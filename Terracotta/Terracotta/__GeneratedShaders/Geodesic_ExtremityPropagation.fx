// This file was auto-generated by FragSharp. It will be regenerated on the next compilation.
// Manual changes made will not persist and may cause incorrect behavior between compilations.

#define PIXEL_SHADER ps_3_0
#define VERTEX_SHADER vs_3_0

// Vertex shader data structure definition
struct VertexToPixel
{
    float4 Position   : POSITION0;
    float4 Color      : COLOR0;
    float2 TexCoords  : TEXCOORD0;
    float2 Position2D : TEXCOORD2;
};

// Fragment shader data structure definition
struct PixelToFrame
{
    float4 Color      : COLOR0;
};

// The following are variables used by the vertex shader (vertex parameters).

// The following are variables used by the fragment shader (fragment parameters).
// Texture Sampler for fs_param_Geo, using register location 1
float2 fs_param_Geo_size;
float2 fs_param_Geo_dxdy;

Texture fs_param_Geo_Texture;
sampler fs_param_Geo : register(s1) = sampler_state
{
    texture   = <fs_param_Geo_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// The following variables are included because they are referenced but are not function parameters. Their values will be set at call time.

// The following methods are included because they are referenced by the fragment shader.
float FragSharpFramework__FragSharpStd__fint_floor(float v)
{
    v += 0.0005;
    return floor(255 * v) * 0.003921569;
}

float GpuSim__SimShader__unpack_val(float2 packed)
{
    float coord = 0;
    packed = floor(255.0 * packed + float2(0.5, 0.5));
    coord = 256 * packed.x + packed.y;
    return coord;
}

float2 GpuSim__SimShader__unpack_vec2_3byte(float3 packed)
{
    float extra_bits = packed.z;
    float extra_y = FragSharpFramework__FragSharpStd__fint_floor(extra_bits / 16);
    float extra_x = FragSharpFramework__FragSharpStd__fint_floor(extra_bits - 16 * extra_y);
    float2 v = float2(0, 0);
    v.x = GpuSim__SimShader__unpack_val(float2(extra_x, packed.x));
    v.y = GpuSim__SimShader__unpack_val(float2(extra_y, packed.y));
    return v;
}

float2 GpuSim__SimShader__geo_pos_id(float4 g)
{
    return GpuSim__SimShader__unpack_vec2_3byte(g.gba);
}

float GpuSim__Geodesic_ExtremityPropagation__flatten(float2 pos)
{
    return pos.x + 4096 * pos.y;
}

// Compiled vertex shader
VertexToPixel StandardVertexShader(float2 inPos : POSITION0, float2 inTexCoords : TEXCOORD0, float4 inColor : COLOR0)
{
    VertexToPixel Output = (VertexToPixel)0;
    Output.Position.w = 1;
    Output.Position.xy = inPos.xy;
    Output.TexCoords = inTexCoords;
    return Output;
}

// Compiled fragment shader
PixelToFrame FragmentShader(VertexToPixel psin)
{
    PixelToFrame __FinalOutput = (PixelToFrame)0;
    float4 here = tex2D(fs_param_Geo, psin.TexCoords + (float2(0, 0)) * fs_param_Geo_dxdy), right = tex2D(fs_param_Geo, psin.TexCoords + (float2(1, 0)) * fs_param_Geo_dxdy), up = tex2D(fs_param_Geo, psin.TexCoords + (float2(0, 1)) * fs_param_Geo_dxdy), left = tex2D(fs_param_Geo, psin.TexCoords + (float2(-(1), 0)) * fs_param_Geo_dxdy), down = tex2D(fs_param_Geo, psin.TexCoords + (float2(0, -(1))) * fs_param_Geo_dxdy), up_right = tex2D(fs_param_Geo, psin.TexCoords + (float2(1, 1)) * fs_param_Geo_dxdy), up_left = tex2D(fs_param_Geo, psin.TexCoords + (float2(-(1), 1)) * fs_param_Geo_dxdy), down_right = tex2D(fs_param_Geo, psin.TexCoords + (float2(1, -(1))) * fs_param_Geo_dxdy), down_left = tex2D(fs_param_Geo, psin.TexCoords + (float2(-(1), -(1))) * fs_param_Geo_dxdy);
    if (abs(here.r - 0.0) < .001)
    {
        __FinalOutput.Color = here;
        return __FinalOutput;
    }
    float2 extr_here = GpuSim__SimShader__geo_pos_id(here), extr_right = GpuSim__SimShader__geo_pos_id(right), extr_up = GpuSim__SimShader__geo_pos_id(up), extr_left = GpuSim__SimShader__geo_pos_id(left), extr_down = GpuSim__SimShader__geo_pos_id(down), extr_up_right = GpuSim__SimShader__geo_pos_id(up_right), extr_up_left = GpuSim__SimShader__geo_pos_id(up_left), extr_down_right = GpuSim__SimShader__geo_pos_id(down_right), extr_down_left = GpuSim__SimShader__geo_pos_id(down_left);
    float val_here = GpuSim__Geodesic_ExtremityPropagation__flatten(extr_here), val_right = GpuSim__Geodesic_ExtremityPropagation__flatten(extr_right), val_up = GpuSim__Geodesic_ExtremityPropagation__flatten(extr_up), val_left = GpuSim__Geodesic_ExtremityPropagation__flatten(extr_left), val_down = GpuSim__Geodesic_ExtremityPropagation__flatten(extr_down), val_up_right = GpuSim__Geodesic_ExtremityPropagation__flatten(extr_up_right), val_up_left = GpuSim__Geodesic_ExtremityPropagation__flatten(extr_up_left), val_down_right = GpuSim__Geodesic_ExtremityPropagation__flatten(extr_down_right), val_down_left = GpuSim__Geodesic_ExtremityPropagation__flatten(extr_down_left);
    if (val_here < val_right - .001)
    {
        here.gba = right.gba;
        val_here = val_right;
    }
    if (val_here < val_up - .001)
    {
        here.gba = up.gba;
        val_here = val_up;
    }
    if (val_here < val_left - .001)
    {
        here.gba = left.gba;
        val_here = val_left;
    }
    if (val_here < val_down - .001)
    {
        here.gba = down.gba;
        val_here = val_down;
    }
    if (val_here < val_up_right - .001)
    {
        here.gba = up_right.gba;
        val_here = val_up_right;
    }
    if (val_here < val_up_left - .001)
    {
        here.gba = up_left.gba;
        val_here = val_up_left;
    }
    if (val_here < val_down_right - .001)
    {
        here.gba = down_right.gba;
        val_here = val_down_right;
    }
    if (val_here < val_down_left - .001)
    {
        here.gba = down_left.gba;
        val_here = val_down_left;
    }
    __FinalOutput.Color = here;
    return __FinalOutput;
}

// Shader compilation
technique Simplest
{
    pass Pass0
    {
        VertexShader = compile VERTEX_SHADER StandardVertexShader();
        PixelShader = compile PIXEL_SHADER FragmentShader();
    }
}