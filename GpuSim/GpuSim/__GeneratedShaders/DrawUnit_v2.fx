// This file was auto-generated by FragSharp. It will be regenerated on the next compilation.
// Manual changes made will not persist and may cause incorrect behavior between compilations.

#define PIXEL_SHADER ps_3_0
#define VERTEX_SHADER vs_3_0

// Vertex shader data structure definition
struct VertexToPixel
{
    float4 Position   : POSITION0;
    float4 Color      : COLOR0;
    float2 TexCoords  : TEXCOORD0;
    float2 Position2D : TEXCOORD2;
};

// Fragment shader data structure definition
struct PixelToFrame
{
    float4 Color      : COLOR0;
};

// The following are variables used by the vertex shader (vertex parameters).
float4 vs_param_cameraPos;
float vs_param_cameraAspect;

// The following are variables used by the fragment shader (fragment parameters).
// Texture Sampler for fs_param_Current, using register location 1
float2 fs_param_Current_size;
float2 fs_param_Current_dxdy;

Texture fs_param_Current_Texture;
sampler fs_param_Current : register(s1) = sampler_state
{
    texture   = <fs_param_Current_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// Texture Sampler for fs_param_Previous, using register location 2
float2 fs_param_Previous_size;
float2 fs_param_Previous_dxdy;

Texture fs_param_Previous_Texture;
sampler fs_param_Previous : register(s2) = sampler_state
{
    texture   = <fs_param_Previous_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// Texture Sampler for fs_param_Texture, using register location 3
float2 fs_param_Texture_size;
float2 fs_param_Texture_dxdy;

Texture fs_param_Texture_Texture;
sampler fs_param_Texture : register(s3) = sampler_state
{
    texture   = <fs_param_Texture_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Wrap;
    AddressV  = Wrap;
};

float fs_param_s;

// The following methods are included because they are referenced by the fragment shader.
float2 GpuSim__SimShader__get_subcell_pos(VertexToPixel vertex, float2 grid_size)
{
    float2 coords = vertex.TexCoords * grid_size;
    float i = floor(coords.x);
    float j = floor(coords.y);
    return coords - float2(i, j);
}

float4 GpuSim__DrawUnit_v2__Sprite(VertexToPixel psin, float2 sprite, float2 pos, float frame, sampler Texture, float2 Texture_size, float2 Texture_dxdy)
{
    if (pos.x >= 1 - .001 || pos.y >= 1 - .001 || pos.x <= 0 + .001 || pos.y <= 0 + .001)
    {
        return float4(0.0, 0.0, 0.0, 0.0);
    }
    pos.x += ((int)(floor(frame)) % 5);
    pos.y -= 1;
    pos = (sprite * 255.0 + pos) * float2(1.0 / 15.0, 1.0 / 8.0);
    return tex2D(Texture, pos);
}

// Compiled vertex shader
VertexToPixel StandardVertexShader(float2 inPos : POSITION0, float2 inTexCoords : TEXCOORD0, float4 inColor : COLOR0)
{
    VertexToPixel Output = (VertexToPixel)0;
    Output.Position.w = 1;
    Output.Position.x = (inPos.x - vs_param_cameraPos.x) / vs_param_cameraAspect * vs_param_cameraPos.z;
    Output.Position.y = (inPos.y - vs_param_cameraPos.y) * vs_param_cameraPos.w;
    Output.TexCoords = inTexCoords;
    Output.Color = inColor;
    return Output;
}

// Compiled fragment shader
PixelToFrame FragmentShader(VertexToPixel psin)
{
    PixelToFrame __FinalOutput = (PixelToFrame)0;
    float4 output = float4(0.0, 0.0, 0.0, 0.0);
    float4 right = tex2D(fs_param_Current, psin.TexCoords + (float2(1, 0)) * fs_param_Current_dxdy), up = tex2D(fs_param_Current, psin.TexCoords + (float2(0, 1)) * fs_param_Current_dxdy), left = tex2D(fs_param_Current, psin.TexCoords + (float2(-(1), 0)) * fs_param_Current_dxdy), down = tex2D(fs_param_Current, psin.TexCoords + (float2(0, -(1))) * fs_param_Current_dxdy), here = tex2D(fs_param_Current, psin.TexCoords + (float2(0, 0)) * fs_param_Current_dxdy);
    float2 subcell_pos = (GpuSim__SimShader__get_subcell_pos(psin, fs_param_Current_size) + float2(0.5, 0.5)) / 2;
    float2 cur_offset = float2(0, 0);
    if (up.y > 0 + .001 && output.a < 0.025 - .001)
    {
        output += GpuSim__DrawUnit_v2__Sprite(psin, up.xy, subcell_pos + cur_offset + float2(0, -(0.5)), fs_param_s * 5, fs_param_Texture, fs_param_Texture_size, fs_param_Texture_dxdy);
    }
    if (right.y > 0 + .001 && output.a < 0.025 - .001)
    {
        output += GpuSim__DrawUnit_v2__Sprite(psin, right.xy, subcell_pos + cur_offset + float2(-(0.5), 0), fs_param_s * 5, fs_param_Texture, fs_param_Texture_size, fs_param_Texture_dxdy);
    }
    if (left.y > 0 + .001 && output.a < 0.025 - .001)
    {
        output += GpuSim__DrawUnit_v2__Sprite(psin, left.xy, subcell_pos + cur_offset + float2(0.5, 0), fs_param_s * 5, fs_param_Texture, fs_param_Texture_size, fs_param_Texture_dxdy);
    }
    if (here.y > 0 + .001 && output.a < 0.025 - .001)
    {
        output += GpuSim__DrawUnit_v2__Sprite(psin, here.xy, subcell_pos + cur_offset, fs_param_s * 5, fs_param_Texture, fs_param_Texture_size, fs_param_Texture_dxdy);
    }
    if (down.y > 0 + .001 && output.a < 0.025 - .001)
    {
        output += GpuSim__DrawUnit_v2__Sprite(psin, down.xy, subcell_pos + cur_offset + float2(0, 0.5), fs_param_s * 5, fs_param_Texture, fs_param_Texture_size, fs_param_Texture_dxdy);
    }
    __FinalOutput.Color = output;
    return __FinalOutput;
}

// Shader compilation
technique Simplest
{
    pass Pass0
    {
        VertexShader = compile VERTEX_SHADER StandardVertexShader();
        PixelShader = compile PIXEL_SHADER FragmentShader();
    }
}