// This file was auto-generated by FragSharp. It will be regenerated on the next compilation.
// Manual changes made will not persist and may cause incorrect behavior between compilations.

#define PIXEL_SHADER ps_3_0
#define VERTEX_SHADER vs_3_0

// Vertex shader data structure definition
struct VertexToPixel
{
    float4 Position   : POSITION0;
    float4 Color      : COLOR0;
    float2 TexCoords  : TEXCOORD0;
    float2 Position2D : TEXCOORD2;
};

// Fragment shader data structure definition
struct PixelToFrame
{
    float4 Color      : COLOR0;
};

// The following are variables used by the vertex shader (vertex parameters).

// The following are variables used by the fragment shader (fragment parameters).
// Texture Sampler for fs_param_Path, using register location 1
float2 fs_param_Path_size;
float2 fs_param_Path_dxdy;

Texture fs_param_Path_Texture;
sampler fs_param_Path : register(s1) = sampler_state
{
    texture   = <fs_param_Path_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// Texture Sampler for fs_param_Current, using register location 2
float2 fs_param_Current_size;
float2 fs_param_Current_dxdy;

Texture fs_param_Current_Texture;
sampler fs_param_Current : register(s2) = sampler_state
{
    texture   = <fs_param_Current_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// The following methods are included because they are referenced by the fragment shader.
bool GpuSim__SimShader__Something(float4 u)
{
    return u.r > 0;
}

float4 GpuSim__PathHelper__Propagate(VertexToPixel psin, sampler Path, float2 Path_size, float2 Path_dxdy, sampler Current, float2 Current_size, float2 Current_dxdy, float4 output)
{
    float4 data = tex2D(Current, psin.TexCoords + (float2(0, 0)) * Current_dxdy);
    float4 right = tex2D(Path, psin.TexCoords + (float2(1, 0)) * Path_dxdy), up = tex2D(Path, psin.TexCoords + (float2(0, 1)) * Path_dxdy), left = tex2D(Path, psin.TexCoords + (float2(-(1), 0)) * Path_dxdy), down = tex2D(Path, psin.TexCoords + (float2(0, -(1))) * Path_dxdy), here = tex2D(Path, psin.TexCoords + (float2(0, 0)) * Path_dxdy);
    float val_right = 255 * right.g + right.b, val_up = 255 * up.g + up.b, val_left = 255 * left.g + left.b, val_down = 255 * down.g + down.b, val_here = 255 * here.g + here.b;
    float min = 255;
    if (val_here > 0 && val_here < min)
    {
        min = val_here;
        output.r = here.r;
    }
    if (val_right > 0 && val_right < min && abs(right.a - 0) < .001)
    {
        min = val_right;
        output.r = 0.003921569;
    }
    if (val_up > 0 && val_up < min && abs(up.a - 0) < .001)
    {
        min = val_up;
        output.r = 0.007843138;
    }
    if (val_left > 0 && val_left < min && abs(left.a - 0) < .001)
    {
        min = val_left;
        output.r = 0.01176471;
    }
    if (val_down > 0 && val_down < min && abs(down.a - 0) < .001)
    {
        min = val_down;
        output.r = 0.01568628;
    }
    min = min + 0.003921569;
    if (GpuSim__SimShader__Something(data))
    {
    }
    output.g = floor(min) / 255.0;
    output.b = min - floor(min);
    return output;
}

// Compiled vertex shader
VertexToPixel StandardVertexShader(float2 inPos : POSITION0, float2 inTexCoords : TEXCOORD0, float4 inColor : COLOR0)
{
    VertexToPixel Output = (VertexToPixel)0;
    Output.Position.w = 1;
    Output.Position.xy = inPos.xy;
    Output.TexCoords = inTexCoords;
    return Output;
}

// Compiled fragment shader
PixelToFrame FragmentShader(VertexToPixel psin)
{
    PixelToFrame __FinalOutput = (PixelToFrame)0;
    float4 output = float4(0, 0, 0, 0);
    if (psin.TexCoords.x + 2 * fs_param_Path_dxdy.x > 1)
    {
        output.b = 0.003921569;
        __FinalOutput.Color = output;
        return __FinalOutput;
    }
    output = GpuSim__PathHelper__Propagate(psin, fs_param_Path, fs_param_Path_size, fs_param_Path_dxdy, fs_param_Current, fs_param_Current_size, fs_param_Current_dxdy, output);
    __FinalOutput.Color = output;
    return __FinalOutput;
}

// Shader compilation
technique Simplest
{
    pass Pass0
    {
        VertexShader = compile VERTEX_SHADER StandardVertexShader();
        PixelShader = compile PIXEL_SHADER FragmentShader();
    }
}