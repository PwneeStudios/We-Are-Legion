// This file was auto-generated by FragSharp. It will be regenerated on the next compilation.
// Manual changes made will not persist and may cause incorrect behavior between compilations.

#define PIXEL_SHADER ps_3_0
#define VERTEX_SHADER vs_3_0

// Vertex shader data structure definition
struct VertexToPixel
{
    float4 Position   : POSITION0;
    float4 Color      : COLOR0;
    float2 TexCoords  : TEXCOORD0;
    float2 Position2D : TEXCOORD2;
};

// Fragment shader data structure definition
struct PixelToFrame
{
    float4 Color      : COLOR0;
};

// The following are variables used by the vertex shader (vertex parameters).
float4 vs_param_cameraPos;
float vs_param_cameraAspect;

// The following are variables used by the fragment shader (fragment parameters).
// Texture Sampler for fs_param_Current, using register location 1
float2 fs_param_Current_size;
float2 fs_param_Current_dxdy;

Texture fs_param_Current_Texture;
sampler fs_param_Current : register(s1) = sampler_state
{
    texture   = <fs_param_Current_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Wrap;
    AddressV  = Wrap;
};

// Texture Sampler for fs_param_Previous, using register location 2
float2 fs_param_Previous_size;
float2 fs_param_Previous_dxdy;

Texture fs_param_Previous_Texture;
sampler fs_param_Previous : register(s2) = sampler_state
{
    texture   = <fs_param_Previous_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Wrap;
    AddressV  = Wrap;
};

// Texture Sampler for fs_param_Texture, using register location 3
float2 fs_param_Texture_size;
float2 fs_param_Texture_dxdy;

Texture fs_param_Texture_Texture;
sampler fs_param_Texture : register(s3) = sampler_state
{
    texture   = <fs_param_Texture_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Wrap;
    AddressV  = Wrap;
};

float fs_param_PercentSimStepComplete;

// The following methods are included because they are referenced by the fragment shader.
float2 get_subcell_pos(VertexToPixel vertex, float2 grid_size)
{
    float2 coords = vertex.TexCoords * grid_size;
    float i = floor(coords.x);
    float j = floor(coords.y);
    return coords - float2(i, j);
}

float4 Sprite(VertexToPixel psin, float4 data, float2 pos, float cycle_offset, sampler Texture, float2 Texture_size, float2 Texture_dxdy, float PercentSimStepComplete)
{
    if (pos.x > 1 || pos.y > 1 || pos.x < 0 || pos.y < 0)
    {
        return float4(0, 0, 0, 0);
    }
    pos *= float2(1.0 / 5.0, 1.0 / 4.0);
    pos.x += float2(1.0 / 5.0, 1.0 / 4.0).x * (((int)(PercentSimStepComplete / float2(1.0 / 5.0, 1.0 / 4.0).x) + (int)(cycle_offset * 255)) % 5) * data.b;
    pos.y += (data.r * 255 - 1) * float2(1.0 / 5.0, 1.0 / 4.0).y;
    float4 clr = tex2D(Texture, pos);
    if (data.a > 0.75)
    {
        float r = clr.r;
        clr.r = clr.g;
        clr.g = r;
    }
    else
    {
        if (data.a > 0.5)
        {
            float b = clr.b;
            clr.b = clr.g;
            clr.g = b;
        }
        else
        {
            if (data.a > 0.25)
            {
                float r = clr.r;
                clr.r = clr.b;
                clr.b = r;
            }
        }
    }
    return clr;
}

bool IsValid(float direction)
{
    return direction > 0;
}

float2 direction_to_vec(float direction)
{
    float angle = (direction * 255 - 1) * (3.141593 / 2.0);
    return IsValid(direction) ? float2(cos(angle), sin(angle)) : float2(0, 0);
}

// Compiled vertex shader
VertexToPixel StandardVertexShader(float2 inPos : POSITION0, float2 inTexCoords : TEXCOORD0, float4 inColor : COLOR0)
{
    VertexToPixel Output = (VertexToPixel)0;
    Output.Position.w = 1;
    Output.Position.x = (inPos.x - vs_param_cameraPos.x) / vs_param_cameraAspect * vs_param_cameraPos.z;
    Output.Position.y = (inPos.y - vs_param_cameraPos.y) * vs_param_cameraPos.w;
    Output.TexCoords = inTexCoords;
    Output.Color = inColor;
    return Output;
}

// Compiled fragment shader
PixelToFrame FragmentShader(VertexToPixel psin)
{
    PixelToFrame __FinalOutput = (PixelToFrame)0;
    float4 output = float4(0, 0, 0, 0);
    float4 cur = tex2D(fs_param_Current, psin.TexCoords + (float2(0, 0)) * fs_param_Current_dxdy);
    float4 pre = tex2D(fs_param_Previous, psin.TexCoords + (float2(0, 0)) * fs_param_Previous_dxdy);
    float2 subcell_pos = get_subcell_pos(psin, fs_param_Current_size);
    if (abs(cur.a - pre.a) < .001 && cur.a != 0)
    {
        if (fs_param_PercentSimStepComplete > 0.5)
        {
            pre = cur;
        }
        pre.b = 0;
        output += Sprite(psin, pre, subcell_pos, cur.a, fs_param_Texture, fs_param_Texture_size, fs_param_Texture_dxdy, fs_param_PercentSimStepComplete);
    }
    else
    {
        if (IsValid(cur.r))
        {
            float2 vel = direction_to_vec(cur.r);
            cur.b = 1;
            output += Sprite(psin, cur, subcell_pos + (1 - fs_param_PercentSimStepComplete) * vel, cur.a, fs_param_Texture, fs_param_Texture_size, fs_param_Texture_dxdy, fs_param_PercentSimStepComplete);
        }
        if (IsValid(pre.r))
        {
            float2 vel = direction_to_vec(pre.r);
            pre.b = 1;
            output += Sprite(psin, pre, subcell_pos - fs_param_PercentSimStepComplete * vel, pre.a, fs_param_Texture, fs_param_Texture_size, fs_param_Texture_dxdy, fs_param_PercentSimStepComplete);
        }
    }
    __FinalOutput.Color = output;
    return __FinalOutput;
}

// Shader compilation
technique Simplest
{
    pass Pass0
    {
        VertexShader = compile VERTEX_SHADER StandardVertexShader();
        PixelShader = compile PIXEL_SHADER FragmentShader();
    }
}