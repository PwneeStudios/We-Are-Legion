// This file was auto-generated by FragSharp. It will be regenerated on the next compilation.
// Manual changes made will not persist and may cause incorrect behavior between compilations.

#define PIXEL_SHADER ps_3_0
#define VERTEX_SHADER vs_3_0

// Vertex shader data structure definition
struct VertexToPixel
{
    float4 Position   : POSITION0;
    float4 Color      : COLOR0;
    float2 TexCoords  : TEXCOORD0;
    float2 Position2D : TEXCOORD2;
};

// Fragment shader data structure definition
struct PixelToFrame
{
    float4 Color      : COLOR0;
};

// The following are variables used by the vertex shader (vertex parameters).

// The following are variables used by the fragment shader (fragment parameters).
// Texture Sampler for fs_param_Unit, using register location 1
float2 fs_param_Unit_size;
float2 fs_param_Unit_dxdy;

Texture fs_param_Unit_Texture;
sampler fs_param_Unit : register(s1) = sampler_state
{
    texture   = <fs_param_Unit_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// Texture Sampler for fs_param_Data, using register location 2
float2 fs_param_Data_size;
float2 fs_param_Data_dxdy;

Texture fs_param_Data_Texture;
sampler fs_param_Data : register(s2) = sampler_state
{
    texture   = <fs_param_Data_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// Texture Sampler for fs_param_Random, using register location 3
float2 fs_param_Random_size;
float2 fs_param_Random_dxdy;

Texture fs_param_Random_Texture;
sampler fs_param_Random : register(s3) = sampler_state
{
    texture   = <fs_param_Random_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// The following methods are included because they are referenced by the fragment shader.
bool GpuSim__SimShader__IsStationary(float4 u)
{
    return abs(0.01960784 - u.r) < .001;
}

bool GpuSim__SimShader__Stayed(float4 u)
{
    return GpuSim__SimShader__IsStationary(u) || abs(0.003921569 - u.g) < .001;
}

bool GpuSim__SimShader__IsValid(float direction)
{
    return direction > 0 + .001;
}

float2 GpuSim__SimShader__dir_to_vec(float direction)
{
    float angle = (float)((direction * 255 - 1) * (3.1415926 / 2.0));
    return GpuSim__SimShader__IsValid(direction) ? float2(cos(angle), sin(angle)) : float2(0, 0);
}

bool GpuSim__SimShader__Something(float4 u)
{
    return u.r > 0 + .001;
}

// Compiled vertex shader
VertexToPixel StandardVertexShader(float2 inPos : POSITION0, float2 inTexCoords : TEXCOORD0, float4 inColor : COLOR0)
{
    VertexToPixel Output = (VertexToPixel)0;
    Output.Position.w = 1;
    Output.Position.xy = inPos.xy;
    Output.TexCoords = inTexCoords;
    return Output;
}

// Compiled fragment shader
PixelToFrame FragmentShader(VertexToPixel psin)
{
    PixelToFrame __FinalOutput = (PixelToFrame)0;
    float4 unit_here = tex2D(fs_param_Unit, psin.TexCoords + (float2(0, 0)) * fs_param_Unit_dxdy);
    float4 data_here = tex2D(fs_param_Data, psin.TexCoords + (float2(0, 0)) * fs_param_Data_dxdy);
    unit_here.a = 0.0;
    if (GpuSim__SimShader__Stayed(data_here) && abs(0.0 - unit_here.b) > .001)
    {
        if (abs(0.007843138 - data_here.a) < .001)
        {
            float4 facing = tex2D(fs_param_Unit, psin.TexCoords + (GpuSim__SimShader__dir_to_vec(data_here.r)) * fs_param_Unit_dxdy);
            if (abs(unit_here.b - facing.b) > .001 && abs(0.0 - facing.b) > .001)
            {
                unit_here.a = 0.01960784;
            }
        }
        float4 data_right = tex2D(fs_param_Data, psin.TexCoords + (float2(1, 0)) * fs_param_Data_dxdy), data_up = tex2D(fs_param_Data, psin.TexCoords + (float2(0, 1)) * fs_param_Data_dxdy), data_left = tex2D(fs_param_Data, psin.TexCoords + (float2(-(1), 0)) * fs_param_Data_dxdy), data_down = tex2D(fs_param_Data, psin.TexCoords + (float2(0, -(1))) * fs_param_Data_dxdy);
        float4 unit_right = tex2D(fs_param_Unit, psin.TexCoords + (float2(1, 0)) * fs_param_Unit_dxdy), unit_up = tex2D(fs_param_Unit, psin.TexCoords + (float2(0, 1)) * fs_param_Unit_dxdy), unit_left = tex2D(fs_param_Unit, psin.TexCoords + (float2(-(1), 0)) * fs_param_Unit_dxdy), unit_down = tex2D(fs_param_Unit, psin.TexCoords + (float2(0, -(1))) * fs_param_Unit_dxdy);
        float4 rnd = tex2D(fs_param_Random, psin.TexCoords + (float2(0, 0)) * fs_param_Random_dxdy);
        if (rnd.x > 0.7 + .001)
        {
            if (GpuSim__SimShader__Something(data_right) && abs(unit_here.b - unit_right.b) > .001 && abs(0.0 - unit_right.b) > .001 && abs(0.01176471 - data_right.r) < .001 && abs(0.007843138 - data_right.a) < .001 && abs(0.003921569 - data_right.g) < .001 || GpuSim__SimShader__Something(data_left) && abs(unit_here.b - unit_left.b) > .001 && abs(0.0 - unit_left.b) > .001 && abs(0.003921569 - data_left.r) < .001 && abs(0.007843138 - data_left.a) < .001 && abs(0.003921569 - data_left.g) < .001 || GpuSim__SimShader__Something(data_up) && abs(unit_here.b - unit_up.b) > .001 && abs(0.0 - unit_up.b) > .001 && abs(0.01568628 - data_up.r) < .001 && abs(0.007843138 - data_up.a) < .001 && abs(0.003921569 - data_up.g) < .001 || GpuSim__SimShader__Something(data_down) && abs(unit_here.b - unit_down.b) > .001 && abs(0.0 - unit_down.b) > .001 && abs(0.007843138 - data_down.r) < .001 && abs(0.007843138 - data_down.a) < .001 && abs(0.003921569 - data_down.g) < .001)
            {
                unit_here.a = 0.03921569;
            }
        }
    }
    __FinalOutput.Color = unit_here;
    return __FinalOutput;
}

// Shader compilation
technique Simplest
{
    pass Pass0
    {
        VertexShader = compile VERTEX_SHADER StandardVertexShader();
        PixelShader = compile PIXEL_SHADER FragmentShader();
    }
}