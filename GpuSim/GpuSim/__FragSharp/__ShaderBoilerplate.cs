// This file was auto-generated by FragSharp. It will be regenerated on the next compilation.
// Manual changes made will not persist and may cause incorrect behavior between compilations.

using System;
using System.Collections.Generic;

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;

using FragSharpFramework;

namespace FragSharpFramework
{
    public class FragSharp
    {
        public static ContentManager Content;
        public static GraphicsDevice GraphicsDevice;
        public static void Initialize(ContentManager Content, GraphicsDevice GraphicsDevice)
        {
            FragSharp.Content = Content;
            FragSharp.GraphicsDevice = GraphicsDevice;
            GpuSim.DrawGrass.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DrawGrass");
            GpuSim.ActionSelect.CompiledEffect = Content.Load<Effect>("FragSharpShaders/ActionSelect");
            GpuSim.DataDrawMouse.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DataDrawMouse");
            GpuSim.DrawMouse.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DrawMouse");
            GpuSim.DrawUnit.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DrawUnit");
            GpuSim.Movement_Phase1.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Movement_Phase1");
            GpuSim.Movement_Phase2.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Movement_Phase2");
            GpuSim.Pathfinding.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Pathfinding");
        }
    }
}

namespace GpuSim
{
    public partial class DrawGrass
    {
        public static Effect CompiledEffect;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Texture, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Texture);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Texture, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Texture);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Texture, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Texture);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Texture, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Texture);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Texture)
        {
            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_Texture_Texture"].SetValue(FragSharpMarshal.Marshal(Texture));
            CompiledEffect.Parameters["fs_param_Texture_size"].SetValue(FragSharpMarshal.Marshal(vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_Texture_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Texture.Width, Texture.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace GpuSim
{
    public partial class ActionSelect
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Current, Texture2D Select, bool Deselect, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Current, Select, Deselect);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Current, Texture2D Select, bool Deselect, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Current, Select, Deselect);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Current, Texture2D Select, bool Deselect, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Current, Select, Deselect);
        }
        public static void Using(Texture2D Current, Texture2D Select, bool Deselect, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Current, Select, Deselect);
        }
        public static void Using(Texture2D Current, Texture2D Select, bool Deselect)
        {
            CompiledEffect.Parameters["fs_param_Current_Texture"].SetValue(FragSharpMarshal.Marshal(Current));
            CompiledEffect.Parameters["fs_param_Current_size"].SetValue(FragSharpMarshal.Marshal(vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Current_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Select_Texture"].SetValue(FragSharpMarshal.Marshal(Select));
            CompiledEffect.Parameters["fs_param_Select_size"].SetValue(FragSharpMarshal.Marshal(vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Select_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Deselect"].SetValue(FragSharpMarshal.Marshal(Deselect));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace GpuSim
{
    public partial class DataDrawMouse
    {
        public static Effect CompiledEffect;

        public static void Apply(RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using();
            GridHelper.DrawGrid();
        }
        public static void Apply(RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using();
            GridHelper.DrawGrid();
        }
        public static void Using(RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using();
        }
        public static void Using(RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using();
        }
        public static void Using()
        {
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace GpuSim
{
    public partial class DrawMouse
    {
        public static Effect CompiledEffect;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Texture, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Texture);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Texture, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Texture);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Texture, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Texture);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Texture, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Texture);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Texture)
        {
            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_Texture_Texture"].SetValue(FragSharpMarshal.Marshal(Texture));
            CompiledEffect.Parameters["fs_param_Texture_size"].SetValue(FragSharpMarshal.Marshal(vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_Texture_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Texture.Width, Texture.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace GpuSim
{
    public partial class DrawUnit
    {
        public static Effect CompiledEffect;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Current, Texture2D Previous, Texture2D Paths, Texture2D Texture, float PercentSimStepComplete, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Current, Previous, Paths, Texture, PercentSimStepComplete);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Current, Texture2D Previous, Texture2D Paths, Texture2D Texture, float PercentSimStepComplete, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Current, Previous, Paths, Texture, PercentSimStepComplete);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Current, Texture2D Previous, Texture2D Paths, Texture2D Texture, float PercentSimStepComplete, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Current, Previous, Paths, Texture, PercentSimStepComplete);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Current, Texture2D Previous, Texture2D Paths, Texture2D Texture, float PercentSimStepComplete, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Current, Previous, Paths, Texture, PercentSimStepComplete);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Current, Texture2D Previous, Texture2D Paths, Texture2D Texture, float PercentSimStepComplete)
        {
            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_Current_Texture"].SetValue(FragSharpMarshal.Marshal(Current));
            CompiledEffect.Parameters["fs_param_Current_size"].SetValue(FragSharpMarshal.Marshal(vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Current_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Previous_Texture"].SetValue(FragSharpMarshal.Marshal(Previous));
            CompiledEffect.Parameters["fs_param_Previous_size"].SetValue(FragSharpMarshal.Marshal(vec(Previous.Width, Previous.Height)));
            CompiledEffect.Parameters["fs_param_Previous_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Previous.Width, Previous.Height)));
            CompiledEffect.Parameters["fs_param_Paths_Texture"].SetValue(FragSharpMarshal.Marshal(Paths));
            CompiledEffect.Parameters["fs_param_Paths_size"].SetValue(FragSharpMarshal.Marshal(vec(Paths.Width, Paths.Height)));
            CompiledEffect.Parameters["fs_param_Paths_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Paths.Width, Paths.Height)));
            CompiledEffect.Parameters["fs_param_Texture_Texture"].SetValue(FragSharpMarshal.Marshal(Texture));
            CompiledEffect.Parameters["fs_param_Texture_size"].SetValue(FragSharpMarshal.Marshal(vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_Texture_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_PercentSimStepComplete"].SetValue(FragSharpMarshal.Marshal(PercentSimStepComplete));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace GpuSim
{
    public partial class Movement_Phase1
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Current, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Current);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Current, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Current);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Current, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Current);
        }
        public static void Using(Texture2D Current, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Current);
        }
        public static void Using(Texture2D Current)
        {
            CompiledEffect.Parameters["fs_param_Current_Texture"].SetValue(FragSharpMarshal.Marshal(Current));
            CompiledEffect.Parameters["fs_param_Current_size"].SetValue(FragSharpMarshal.Marshal(vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Current_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Current.Width, Current.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace GpuSim
{
    public partial class Movement_Phase2
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Current, Texture2D Next, Texture2D Paths, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Current, Next, Paths);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Current, Texture2D Next, Texture2D Paths, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Current, Next, Paths);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Current, Texture2D Next, Texture2D Paths, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Current, Next, Paths);
        }
        public static void Using(Texture2D Current, Texture2D Next, Texture2D Paths, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Current, Next, Paths);
        }
        public static void Using(Texture2D Current, Texture2D Next, Texture2D Paths)
        {
            CompiledEffect.Parameters["fs_param_Current_Texture"].SetValue(FragSharpMarshal.Marshal(Current));
            CompiledEffect.Parameters["fs_param_Current_size"].SetValue(FragSharpMarshal.Marshal(vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Current_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Next_Texture"].SetValue(FragSharpMarshal.Marshal(Next));
            CompiledEffect.Parameters["fs_param_Next_size"].SetValue(FragSharpMarshal.Marshal(vec(Next.Width, Next.Height)));
            CompiledEffect.Parameters["fs_param_Next_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Next.Width, Next.Height)));
            CompiledEffect.Parameters["fs_param_Paths_Texture"].SetValue(FragSharpMarshal.Marshal(Paths));
            CompiledEffect.Parameters["fs_param_Paths_size"].SetValue(FragSharpMarshal.Marshal(vec(Paths.Width, Paths.Height)));
            CompiledEffect.Parameters["fs_param_Paths_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Paths.Width, Paths.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace GpuSim
{
    public partial class Pathfinding
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Path, Texture2D Current, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Path, Current);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Path, Texture2D Current, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Path, Current);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Path, Texture2D Current, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Path, Current);
        }
        public static void Using(Texture2D Path, Texture2D Current, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Path, Current);
        }
        public static void Using(Texture2D Path, Texture2D Current)
        {
            CompiledEffect.Parameters["fs_param_Path_Texture"].SetValue(FragSharpMarshal.Marshal(Path));
            CompiledEffect.Parameters["fs_param_Path_size"].SetValue(FragSharpMarshal.Marshal(vec(Path.Width, Path.Height)));
            CompiledEffect.Parameters["fs_param_Path_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Path.Width, Path.Height)));
            CompiledEffect.Parameters["fs_param_Current_Texture"].SetValue(FragSharpMarshal.Marshal(Current));
            CompiledEffect.Parameters["fs_param_Current_size"].SetValue(FragSharpMarshal.Marshal(vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Current_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Current.Width, Current.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


