// This file was auto-generated by FragSharp. It will be regenerated on the next compilation.
// Manual changes made will not persist and may cause incorrect behavior between compilations.

using System;
using System.Collections.Generic;

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;

using FragSharpFramework;

namespace FragSharpFramework
{
    public class FragSharp
    {
        public static ContentManager Content;
        public static GraphicsDevice GraphicsDevice;
        public static void Initialize(ContentManager Content, GraphicsDevice GraphicsDevice)
        {
            FragSharp.Content = Content;
            FragSharp.GraphicsDevice = GraphicsDevice;
            Game.DrawAntiMagic.CompiledEffect_casting_team_0 = Content.Load<Effect>("FragSharpShaders/DrawAntiMagic_casting_team=0");
            Game.DrawAntiMagic.CompiledEffect_casting_team_0p003921569 = Content.Load<Effect>("FragSharpShaders/DrawAntiMagic_casting_team=0.003921569");
            Game.DrawAntiMagic.CompiledEffect_casting_team_0p007843138 = Content.Load<Effect>("FragSharpShaders/DrawAntiMagic_casting_team=0.007843138");
            Game.DrawAntiMagic.CompiledEffect_casting_team_0p01176471 = Content.Load<Effect>("FragSharpShaders/DrawAntiMagic_casting_team=0.01176471");
            Game.DrawAntiMagic.CompiledEffect_casting_team_0p01568628 = Content.Load<Effect>("FragSharpShaders/DrawAntiMagic_casting_team=0.01568628");
            Game.DrawGeoInfo.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DrawGeoInfo");
            Game.DrawDirwardInfo.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DrawDirwardInfo");
            Game.DrawPolarInfo.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DrawPolarInfo");
            Game.DrawTiles.CompiledEffect_draw_grid_true_solid_blend_flag_true = Content.Load<Effect>("FragSharpShaders/DrawTiles_draw_grid=true_solid_blend_flag=true");
            Game.DrawTiles.CompiledEffect_draw_grid_true_solid_blend_flag_false = Content.Load<Effect>("FragSharpShaders/DrawTiles_draw_grid=true_solid_blend_flag=false");
            Game.DrawTiles.CompiledEffect_draw_grid_false_solid_blend_flag_true = Content.Load<Effect>("FragSharpShaders/DrawTiles_draw_grid=false_solid_blend_flag=true");
            Game.DrawTiles.CompiledEffect_draw_grid_false_solid_blend_flag_false = Content.Load<Effect>("FragSharpShaders/DrawTiles_draw_grid=false_solid_blend_flag=false");
            Game.DrawOutsideTiles.CompiledEffect_solid_blend_flag_true = Content.Load<Effect>("FragSharpShaders/DrawOutsideTiles_solid_blend_flag=true");
            Game.DrawOutsideTiles.CompiledEffect_solid_blend_flag_false = Content.Load<Effect>("FragSharpShaders/DrawOutsideTiles_solid_blend_flag=false");
            Game.Geodesic_Outline.CompiledEffect_Anti_true = Content.Load<Effect>("FragSharpShaders/Geodesic_Outline_Anti=true");
            Game.Geodesic_Outline.CompiledEffect_Anti_false = Content.Load<Effect>("FragSharpShaders/Geodesic_Outline_Anti=false");
            Game.Geodesic_OutlineCleanup.CompiledEffect_Anti_true = Content.Load<Effect>("FragSharpShaders/Geodesic_OutlineCleanup_Anti=true");
            Game.Geodesic_OutlineCleanup.CompiledEffect_Anti_false = Content.Load<Effect>("FragSharpShaders/Geodesic_OutlineCleanup_Anti=false");
            Game.Geodesic_StorePos.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Geodesic_StorePos");
            Game.Geodesic_ExtremityPropagation.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Geodesic_ExtremityPropagation");
            Game.Geodesic_SetGeoId.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Geodesic_SetGeoId");
            Game.Geodesic_PolarDistance.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Geodesic_PolarDistance");
            Game.Geodesic_SetCircumference.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Geodesic_SetCircumference");
            Game.Geodesic_Polarity.CompiledEffect_dir_0p003921569 = Content.Load<Effect>("FragSharpShaders/Geodesic_Polarity_dir=0.003921569");
            Game.Geodesic_Polarity.CompiledEffect_dir_0p007843138 = Content.Load<Effect>("FragSharpShaders/Geodesic_Polarity_dir=0.007843138");
            Game.Geodesic_Polarity.CompiledEffect_dir_0p01176471 = Content.Load<Effect>("FragSharpShaders/Geodesic_Polarity_dir=0.01176471");
            Game.Geodesic_Polarity.CompiledEffect_dir_0p01568628 = Content.Load<Effect>("FragSharpShaders/Geodesic_Polarity_dir=0.01568628");
            Game.Geodesic_FillMissingPolarity.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Geodesic_FillMissingPolarity");
            Game.Geodesic_ClearImportance.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Geodesic_ClearImportance");
            Game.Geodesic_DirwardExtend.CompiledEffect_dir_0p003921569 = Content.Load<Effect>("FragSharpShaders/Geodesic_DirwardExtend_dir=0.003921569");
            Game.Geodesic_DirwardExtend.CompiledEffect_dir_0p007843138 = Content.Load<Effect>("FragSharpShaders/Geodesic_DirwardExtend_dir=0.007843138");
            Game.Geodesic_DirwardExtend.CompiledEffect_dir_0p01176471 = Content.Load<Effect>("FragSharpShaders/Geodesic_DirwardExtend_dir=0.01176471");
            Game.Geodesic_DirwardExtend.CompiledEffect_dir_0p01568628 = Content.Load<Effect>("FragSharpShaders/Geodesic_DirwardExtend_dir=0.01568628");
            Game.Geodesic_ConvertToBlocking.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Geodesic_ConvertToBlocking");
            Game.Geodesic_Flatten.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Geodesic_Flatten");
            Game.Geodesic_Boundary.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Geodesic_Boundary");
            Game.Action_PaintTiles.CompiledEffect_type_0p003921569 = Content.Load<Effect>("FragSharpShaders/Action_PaintTiles_type=0.003921569");
            Game.Action_PaintTiles.CompiledEffect_type_0p007843138 = Content.Load<Effect>("FragSharpShaders/Action_PaintTiles_type=0.007843138");
            Game.Action_PaintTiles.CompiledEffect_type_0p01960784 = Content.Load<Effect>("FragSharpShaders/Action_PaintTiles_type=0.01960784");
            Game.PaintTiles_UpdateData.CompiledEffect = Content.Load<Effect>("FragSharpShaders/PaintTiles_UpdateData");
            Game.PaintTiles_UpdateUnits.CompiledEffect = Content.Load<Effect>("FragSharpShaders/PaintTiles_UpdateUnits");
            Game.PaintTiles_UpdateTiles.CompiledEffect = Content.Load<Effect>("FragSharpShaders/PaintTiles_UpdateTiles");
            Game.ActionDelete_Data.CompiledEffect = Content.Load<Effect>("FragSharpShaders/ActionDelete_Data");
            Game.UpdateFakeSelect.CompiledEffect = Content.Load<Effect>("FragSharpShaders/UpdateFakeSelect");
            Game.ActionSelect.CompiledEffect_player_0_fake_true = Content.Load<Effect>("FragSharpShaders/ActionSelect_player=0_fake=true");
            Game.ActionSelect.CompiledEffect_player_0_fake_false = Content.Load<Effect>("FragSharpShaders/ActionSelect_player=0_fake=false");
            Game.ActionSelect.CompiledEffect_player_0p003921569_fake_true = Content.Load<Effect>("FragSharpShaders/ActionSelect_player=0.003921569_fake=true");
            Game.ActionSelect.CompiledEffect_player_0p003921569_fake_false = Content.Load<Effect>("FragSharpShaders/ActionSelect_player=0.003921569_fake=false");
            Game.ActionSelect.CompiledEffect_player_0p007843138_fake_true = Content.Load<Effect>("FragSharpShaders/ActionSelect_player=0.007843138_fake=true");
            Game.ActionSelect.CompiledEffect_player_0p007843138_fake_false = Content.Load<Effect>("FragSharpShaders/ActionSelect_player=0.007843138_fake=false");
            Game.ActionSelect.CompiledEffect_player_0p01176471_fake_true = Content.Load<Effect>("FragSharpShaders/ActionSelect_player=0.01176471_fake=true");
            Game.ActionSelect.CompiledEffect_player_0p01176471_fake_false = Content.Load<Effect>("FragSharpShaders/ActionSelect_player=0.01176471_fake=false");
            Game.ActionSelect.CompiledEffect_player_0p01568628_fake_true = Content.Load<Effect>("FragSharpShaders/ActionSelect_player=0.01568628_fake=true");
            Game.ActionSelect.CompiledEffect_player_0p01568628_fake_false = Content.Load<Effect>("FragSharpShaders/ActionSelect_player=0.01568628_fake=false");
            Game.ActionSelectInBox.CompiledEffect_player_0_fake_true = Content.Load<Effect>("FragSharpShaders/ActionSelectInBox_player=0_fake=true");
            Game.ActionSelectInBox.CompiledEffect_player_0_fake_false = Content.Load<Effect>("FragSharpShaders/ActionSelectInBox_player=0_fake=false");
            Game.ActionSelectInBox.CompiledEffect_player_0p003921569_fake_true = Content.Load<Effect>("FragSharpShaders/ActionSelectInBox_player=0.003921569_fake=true");
            Game.ActionSelectInBox.CompiledEffect_player_0p003921569_fake_false = Content.Load<Effect>("FragSharpShaders/ActionSelectInBox_player=0.003921569_fake=false");
            Game.ActionSelectInBox.CompiledEffect_player_0p007843138_fake_true = Content.Load<Effect>("FragSharpShaders/ActionSelectInBox_player=0.007843138_fake=true");
            Game.ActionSelectInBox.CompiledEffect_player_0p007843138_fake_false = Content.Load<Effect>("FragSharpShaders/ActionSelectInBox_player=0.007843138_fake=false");
            Game.ActionSelectInBox.CompiledEffect_player_0p01176471_fake_true = Content.Load<Effect>("FragSharpShaders/ActionSelectInBox_player=0.01176471_fake=true");
            Game.ActionSelectInBox.CompiledEffect_player_0p01176471_fake_false = Content.Load<Effect>("FragSharpShaders/ActionSelectInBox_player=0.01176471_fake=false");
            Game.ActionSelectInBox.CompiledEffect_player_0p01568628_fake_true = Content.Load<Effect>("FragSharpShaders/ActionSelectInBox_player=0.01568628_fake=true");
            Game.ActionSelectInBox.CompiledEffect_player_0p01568628_fake_false = Content.Load<Effect>("FragSharpShaders/ActionSelectInBox_player=0.01568628_fake=false");
            Game.DataDrawMouse.CompiledEffect_player_0 = Content.Load<Effect>("FragSharpShaders/DataDrawMouse_player=0");
            Game.DataDrawMouse.CompiledEffect_player_0p003921569 = Content.Load<Effect>("FragSharpShaders/DataDrawMouse_player=0.003921569");
            Game.DataDrawMouse.CompiledEffect_player_0p007843138 = Content.Load<Effect>("FragSharpShaders/DataDrawMouse_player=0.007843138");
            Game.DataDrawMouse.CompiledEffect_player_0p01176471 = Content.Load<Effect>("FragSharpShaders/DataDrawMouse_player=0.01176471");
            Game.DataDrawMouse.CompiledEffect_player_0p01568628 = Content.Load<Effect>("FragSharpShaders/DataDrawMouse_player=0.01568628");
            Game.ActionSpawn_Filter.CompiledEffect_distribution_1_AntiMagicTeam_0 = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Filter_distribution=1_AntiMagicTeam=0");
            Game.ActionSpawn_Filter.CompiledEffect_distribution_1_AntiMagicTeam_0p003921569 = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Filter_distribution=1_AntiMagicTeam=0.003921569");
            Game.ActionSpawn_Filter.CompiledEffect_distribution_1_AntiMagicTeam_0p007843138 = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Filter_distribution=1_AntiMagicTeam=0.007843138");
            Game.ActionSpawn_Filter.CompiledEffect_distribution_1_AntiMagicTeam_0p01176471 = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Filter_distribution=1_AntiMagicTeam=0.01176471");
            Game.ActionSpawn_Filter.CompiledEffect_distribution_1_AntiMagicTeam_0p01568628 = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Filter_distribution=1_AntiMagicTeam=0.01568628");
            Game.ActionSpawn_Filter.CompiledEffect_distribution_2_AntiMagicTeam_0 = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Filter_distribution=2_AntiMagicTeam=0");
            Game.ActionSpawn_Filter.CompiledEffect_distribution_2_AntiMagicTeam_0p003921569 = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Filter_distribution=2_AntiMagicTeam=0.003921569");
            Game.ActionSpawn_Filter.CompiledEffect_distribution_2_AntiMagicTeam_0p007843138 = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Filter_distribution=2_AntiMagicTeam=0.007843138");
            Game.ActionSpawn_Filter.CompiledEffect_distribution_2_AntiMagicTeam_0p01176471 = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Filter_distribution=2_AntiMagicTeam=0.01176471");
            Game.ActionSpawn_Filter.CompiledEffect_distribution_2_AntiMagicTeam_0p01568628 = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Filter_distribution=2_AntiMagicTeam=0.01568628");
            Game.ActionSpawn_Filter.CompiledEffect_distribution_3_AntiMagicTeam_0 = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Filter_distribution=3_AntiMagicTeam=0");
            Game.ActionSpawn_Filter.CompiledEffect_distribution_3_AntiMagicTeam_0p003921569 = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Filter_distribution=3_AntiMagicTeam=0.003921569");
            Game.ActionSpawn_Filter.CompiledEffect_distribution_3_AntiMagicTeam_0p007843138 = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Filter_distribution=3_AntiMagicTeam=0.007843138");
            Game.ActionSpawn_Filter.CompiledEffect_distribution_3_AntiMagicTeam_0p01176471 = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Filter_distribution=3_AntiMagicTeam=0.01176471");
            Game.ActionSpawn_Filter.CompiledEffect_distribution_3_AntiMagicTeam_0p01568628 = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Filter_distribution=3_AntiMagicTeam=0.01568628");
            Game.ActionSpawn_Data.CompiledEffect = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Data");
            Game.ActionSpawn_Unit.CompiledEffect_raising_true = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Unit_raising=true");
            Game.ActionSpawn_Unit.CompiledEffect_raising_false = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Unit_raising=false");
            Game.ActionSpawn_Target.CompiledEffect = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Target");
            Game.ActionSpawn_Corpse.CompiledEffect = Content.Load<Effect>("FragSharpShaders/ActionSpawn_Corpse");
            Game.HashReduce.CompiledEffect = Content.Load<Effect>("FragSharpShaders/HashReduce");
            Game.Hash.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Hash");
            Game.DataHash.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DataHash");
            Game.UpdateMagic.CompiledEffect = Content.Load<Effect>("FragSharpShaders/UpdateMagic");
            Game.Kill.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Kill");
            Game.PropagateNecromancyAuro.CompiledEffect = Content.Load<Effect>("FragSharpShaders/PropagateNecromancyAuro");
            Game.PropagateAntiMagicAuro.CompiledEffect = Content.Load<Effect>("FragSharpShaders/PropagateAntiMagicAuro");
            Game.Identity.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Identity");
            Game.Shift.CompiledEffect_dir_0p003921569 = Content.Load<Effect>("FragSharpShaders/Shift_dir=0.003921569");
            Game.Shift.CompiledEffect_dir_0p007843138 = Content.Load<Effect>("FragSharpShaders/Shift_dir=0.007843138");
            Game.Shift.CompiledEffect_dir_0p01176471 = Content.Load<Effect>("FragSharpShaders/Shift_dir=0.01176471");
            Game.Shift.CompiledEffect_dir_0p01568628 = Content.Load<Effect>("FragSharpShaders/Shift_dir=0.01568628");
            Game.SetTeams.CompiledEffect = Content.Load<Effect>("FragSharpShaders/SetTeams");
            Game.UnitMigrate.CompiledEffect = Content.Load<Effect>("FragSharpShaders/UnitMigrate");
            Game.BenchmarkTest_TextureLookup4x4.CompiledEffect = Content.Load<Effect>("FragSharpShaders/BenchmarkTest_TextureLookup4x4");
            Game.BenchmarkTest_TextureLookup1x1.CompiledEffect = Content.Load<Effect>("FragSharpShaders/BenchmarkTest_TextureLookup1x1");
            Game.BenchmarkTest_TextureLookupWithConditional.CompiledEffect = Content.Load<Effect>("FragSharpShaders/BenchmarkTest_TextureLookupWithConditional");
            Game.BenchmarkTest_TextureLookupWithComplexMath.CompiledEffect = Content.Load<Effect>("FragSharpShaders/BenchmarkTest_TextureLookupWithComplexMath");
            Game.BenchmarkTest_TextureLookup1x5.CompiledEffect = Content.Load<Effect>("FragSharpShaders/BenchmarkTest_TextureLookup1x5");
            Game.BenchmarkTest_MathPacking.CompiledEffect = Content.Load<Effect>("FragSharpShaders/BenchmarkTest_MathPacking");
            Game.BenchmarkTest_MathPackingVec.CompiledEffect = Content.Load<Effect>("FragSharpShaders/BenchmarkTest_MathPackingVec");
            Game.DrawTerritoryPlayer.CompiledEffect_player_0 = Content.Load<Effect>("FragSharpShaders/DrawTerritoryPlayer_player=0");
            Game.DrawTerritoryPlayer.CompiledEffect_player_0p003921569 = Content.Load<Effect>("FragSharpShaders/DrawTerritoryPlayer_player=0.003921569");
            Game.DrawTerritoryPlayer.CompiledEffect_player_0p007843138 = Content.Load<Effect>("FragSharpShaders/DrawTerritoryPlayer_player=0.007843138");
            Game.DrawTerritoryPlayer.CompiledEffect_player_0p01176471 = Content.Load<Effect>("FragSharpShaders/DrawTerritoryPlayer_player=0.01176471");
            Game.DrawTerritoryPlayer.CompiledEffect_player_0p01568628 = Content.Load<Effect>("FragSharpShaders/DrawTerritoryPlayer_player=0.01568628");
            Game.DrawTerritoryColors.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DrawTerritoryColors");
            Game.DrawBuildingsIcons.CompiledEffect_player_0 = Content.Load<Effect>("FragSharpShaders/DrawBuildingsIcons_player=0");
            Game.DrawBuildingsIcons.CompiledEffect_player_0p003921569 = Content.Load<Effect>("FragSharpShaders/DrawBuildingsIcons_player=0.003921569");
            Game.DrawBuildingsIcons.CompiledEffect_player_0p007843138 = Content.Load<Effect>("FragSharpShaders/DrawBuildingsIcons_player=0.007843138");
            Game.DrawBuildingsIcons.CompiledEffect_player_0p01176471 = Content.Load<Effect>("FragSharpShaders/DrawBuildingsIcons_player=0.01176471");
            Game.DrawBuildingsIcons.CompiledEffect_player_0p01568628 = Content.Load<Effect>("FragSharpShaders/DrawBuildingsIcons_player=0.01568628");
            Game.DrawBuildings.CompiledEffect_player_0 = Content.Load<Effect>("FragSharpShaders/DrawBuildings_player=0");
            Game.DrawBuildings.CompiledEffect_player_0p003921569 = Content.Load<Effect>("FragSharpShaders/DrawBuildings_player=0.003921569");
            Game.DrawBuildings.CompiledEffect_player_0p007843138 = Content.Load<Effect>("FragSharpShaders/DrawBuildings_player=0.007843138");
            Game.DrawBuildings.CompiledEffect_player_0p01176471 = Content.Load<Effect>("FragSharpShaders/DrawBuildings_player=0.01176471");
            Game.DrawBuildings.CompiledEffect_player_0p01568628 = Content.Load<Effect>("FragSharpShaders/DrawBuildings_player=0.01568628");
            Game.DrawCorpses.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DrawCorpses");
            Game.DrawPrecomputation_Cur.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DrawPrecomputation_Cur");
            Game.DrawPrecomputation_Pre.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DrawPrecomputation_Pre");
            Game.DrawSolid.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DrawSolid");
            Game.DrawTexture.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DrawTexture");
            Game.DrawColoredTexture.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DrawColoredTexture");
            Game.DrawTextureSmooth.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DrawTextureSmooth");
            Game.DyingDragonLordGridCoord.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DyingDragonLordGridCoord");
            Game.DragonLordGridCoord.CompiledEffect_player_0 = Content.Load<Effect>("FragSharpShaders/DragonLordGridCoord_player=0");
            Game.DragonLordGridCoord.CompiledEffect_player_0p003921569 = Content.Load<Effect>("FragSharpShaders/DragonLordGridCoord_player=0.003921569");
            Game.DragonLordGridCoord.CompiledEffect_player_0p007843138 = Content.Load<Effect>("FragSharpShaders/DragonLordGridCoord_player=0.007843138");
            Game.DragonLordGridCoord.CompiledEffect_player_0p01176471 = Content.Load<Effect>("FragSharpShaders/DragonLordGridCoord_player=0.01176471");
            Game.DragonLordGridCoord.CompiledEffect_player_0p01568628 = Content.Load<Effect>("FragSharpShaders/DragonLordGridCoord_player=0.01568628");
            Game.BoundingTr.CompiledEffect = Content.Load<Effect>("FragSharpShaders/BoundingTr");
            Game.BoundingBl.CompiledEffect = Content.Load<Effect>("FragSharpShaders/BoundingBl");
            Game._BoundingTr.CompiledEffect = Content.Load<Effect>("FragSharpShaders/_BoundingTr");
            Game._BoundingBl.CompiledEffect = Content.Load<Effect>("FragSharpShaders/_BoundingBl");
            Game._PreferTl.CompiledEffect = Content.Load<Effect>("FragSharpShaders/_PreferTl");
            Game.CheckForAttacking.CompiledEffect = Content.Load<Effect>("FragSharpShaders/CheckForAttacking");
            Game.BuildingInfusion_Delete.CompiledEffect = Content.Load<Effect>("FragSharpShaders/BuildingInfusion_Delete");
            Game.BuildingInfusion_Selection.CompiledEffect = Content.Load<Effect>("FragSharpShaders/BuildingInfusion_Selection");
            Game.BuildingDiffusion_Selection.CompiledEffect = Content.Load<Effect>("FragSharpShaders/BuildingDiffusion_Selection");
            Game.BuildingInfusion_Data.CompiledEffect = Content.Load<Effect>("FragSharpShaders/BuildingInfusion_Data");
            Game.BuildingDiffusion_Data.CompiledEffect = Content.Load<Effect>("FragSharpShaders/BuildingDiffusion_Data");
            Game.BuildingDiffusion_Target.CompiledEffect = Content.Load<Effect>("FragSharpShaders/BuildingDiffusion_Target");
            Game.SpawnUnits.CompiledEffect = Content.Load<Effect>("FragSharpShaders/SpawnUnits");
            Game.SetSpawn_Unit.CompiledEffect = Content.Load<Effect>("FragSharpShaders/SetSpawn_Unit");
            Game.SetSpawn_Target.CompiledEffect = Content.Load<Effect>("FragSharpShaders/SetSpawn_Target");
            Game.SetSpawn_Data.CompiledEffect = Content.Load<Effect>("FragSharpShaders/SetSpawn_Data");
            Game.AddCorpses.CompiledEffect = Content.Load<Effect>("FragSharpShaders/AddCorpses");
            Game.UpdateRandomField.CompiledEffect = Content.Load<Effect>("FragSharpShaders/UpdateRandomField");
            Game.DoUnitSummary_1.CompiledEffect_player_0_only_selected_true = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_1_player=0_only_selected=true");
            Game.DoUnitSummary_1.CompiledEffect_player_0_only_selected_false = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_1_player=0_only_selected=false");
            Game.DoUnitSummary_1.CompiledEffect_player_0p003921569_only_selected_true = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_1_player=0.003921569_only_selected=true");
            Game.DoUnitSummary_1.CompiledEffect_player_0p003921569_only_selected_false = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_1_player=0.003921569_only_selected=false");
            Game.DoUnitSummary_1.CompiledEffect_player_0p007843138_only_selected_true = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_1_player=0.007843138_only_selected=true");
            Game.DoUnitSummary_1.CompiledEffect_player_0p007843138_only_selected_false = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_1_player=0.007843138_only_selected=false");
            Game.DoUnitSummary_1.CompiledEffect_player_0p01176471_only_selected_true = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_1_player=0.01176471_only_selected=true");
            Game.DoUnitSummary_1.CompiledEffect_player_0p01176471_only_selected_false = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_1_player=0.01176471_only_selected=false");
            Game.DoUnitSummary_1.CompiledEffect_player_0p01568628_only_selected_true = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_1_player=0.01568628_only_selected=true");
            Game.DoUnitSummary_1.CompiledEffect_player_0p01568628_only_selected_false = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_1_player=0.01568628_only_selected=false");
            Game.DoUnitSummary_2.CompiledEffect_player_0_only_selected_true = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_2_player=0_only_selected=true");
            Game.DoUnitSummary_2.CompiledEffect_player_0_only_selected_false = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_2_player=0_only_selected=false");
            Game.DoUnitSummary_2.CompiledEffect_player_0p003921569_only_selected_true = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_2_player=0.003921569_only_selected=true");
            Game.DoUnitSummary_2.CompiledEffect_player_0p003921569_only_selected_false = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_2_player=0.003921569_only_selected=false");
            Game.DoUnitSummary_2.CompiledEffect_player_0p007843138_only_selected_true = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_2_player=0.007843138_only_selected=true");
            Game.DoUnitSummary_2.CompiledEffect_player_0p007843138_only_selected_false = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_2_player=0.007843138_only_selected=false");
            Game.DoUnitSummary_2.CompiledEffect_player_0p01176471_only_selected_true = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_2_player=0.01176471_only_selected=true");
            Game.DoUnitSummary_2.CompiledEffect_player_0p01176471_only_selected_false = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_2_player=0.01176471_only_selected=false");
            Game.DoUnitSummary_2.CompiledEffect_player_0p01568628_only_selected_true = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_2_player=0.01568628_only_selected=true");
            Game.DoUnitSummary_2.CompiledEffect_player_0p01568628_only_selected_false = Content.Load<Effect>("FragSharpShaders/DoUnitSummary_2_player=0.01568628_only_selected=false");
            Game.CountUnitTypeForAllPlayers.CompiledEffect_type_0p003921569 = Content.Load<Effect>("FragSharpShaders/CountUnitTypeForAllPlayers_type=0.003921569");
            Game.CountUnitTypeForAllPlayers.CompiledEffect_type_0p007843138 = Content.Load<Effect>("FragSharpShaders/CountUnitTypeForAllPlayers_type=0.007843138");
            Game.CountUnitTypeForAllPlayers.CompiledEffect_type_0p01176471 = Content.Load<Effect>("FragSharpShaders/CountUnitTypeForAllPlayers_type=0.01176471");
            Game.CountUnitTypeForAllPlayers.CompiledEffect_type_0p01568628 = Content.Load<Effect>("FragSharpShaders/CountUnitTypeForAllPlayers_type=0.01568628");
            Game.CountUnitTypeForAllPlayers.CompiledEffect_type_0p01960784 = Content.Load<Effect>("FragSharpShaders/CountUnitTypeForAllPlayers_type=0.01960784");
            Game.CountUnitTypeForAllPlayers.CompiledEffect_type_0p02352941 = Content.Load<Effect>("FragSharpShaders/CountUnitTypeForAllPlayers_type=0.02352941");
            Game.CountUnitTypeForAllPlayers.CompiledEffect_type_0p02745098 = Content.Load<Effect>("FragSharpShaders/CountUnitTypeForAllPlayers_type=0.02745098");
            Game.CountUnitTypeForAllPlayers.CompiledEffect_type_0p03137255 = Content.Load<Effect>("FragSharpShaders/CountUnitTypeForAllPlayers_type=0.03137255");
            Game.CountReduce_4x1byte.CompiledEffect = Content.Load<Effect>("FragSharpShaders/CountReduce_4x1byte");
            Game.CountUnits.CompiledEffect_player_0 = Content.Load<Effect>("FragSharpShaders/CountUnits_player=0");
            Game.CountUnits.CompiledEffect_player_0p003921569 = Content.Load<Effect>("FragSharpShaders/CountUnits_player=0.003921569");
            Game.CountUnits.CompiledEffect_player_0p007843138 = Content.Load<Effect>("FragSharpShaders/CountUnits_player=0.007843138");
            Game.CountUnits.CompiledEffect_player_0p01176471 = Content.Load<Effect>("FragSharpShaders/CountUnits_player=0.01176471");
            Game.CountUnits.CompiledEffect_player_0p01568628 = Content.Load<Effect>("FragSharpShaders/CountUnits_player=0.01568628");
            Game.CountAllUnits.CompiledEffect_player_0 = Content.Load<Effect>("FragSharpShaders/CountAllUnits_player=0");
            Game.CountAllUnits.CompiledEffect_player_0p003921569 = Content.Load<Effect>("FragSharpShaders/CountAllUnits_player=0.003921569");
            Game.CountAllUnits.CompiledEffect_player_0p007843138 = Content.Load<Effect>("FragSharpShaders/CountAllUnits_player=0.007843138");
            Game.CountAllUnits.CompiledEffect_player_0p01176471 = Content.Load<Effect>("FragSharpShaders/CountAllUnits_player=0.01176471");
            Game.CountAllUnits.CompiledEffect_player_0p01568628 = Content.Load<Effect>("FragSharpShaders/CountAllUnits_player=0.01568628");
            Game.CountMovingAttackingDyingStanding.CompiledEffect = Content.Load<Effect>("FragSharpShaders/CountMovingAttackingDyingStanding");
            Game.CountReduce_3byte1byte.CompiledEffect = Content.Load<Effect>("FragSharpShaders/CountReduce_3byte1byte");
            Game.SetSelectedAction.CompiledEffect_player_0 = Content.Load<Effect>("FragSharpShaders/SetSelectedAction_player=0");
            Game.SetSelectedAction.CompiledEffect_player_0p003921569 = Content.Load<Effect>("FragSharpShaders/SetSelectedAction_player=0.003921569");
            Game.SetSelectedAction.CompiledEffect_player_0p007843138 = Content.Load<Effect>("FragSharpShaders/SetSelectedAction_player=0.007843138");
            Game.SetSelectedAction.CompiledEffect_player_0p01176471 = Content.Load<Effect>("FragSharpShaders/SetSelectedAction_player=0.01176471");
            Game.SetSelectedAction.CompiledEffect_player_0p01568628 = Content.Load<Effect>("FragSharpShaders/SetSelectedAction_player=0.01568628");
            Game.ActionAttackSquare.CompiledEffect_player_0_filter_0 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0_filter=0");
            Game.ActionAttackSquare.CompiledEffect_player_0_filter_1 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0_filter=1");
            Game.ActionAttackSquare.CompiledEffect_player_0_filter_2 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0_filter=2");
            Game.ActionAttackSquare.CompiledEffect_player_0_filter_3 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0_filter=3");
            Game.ActionAttackSquare.CompiledEffect_player_0_filter_4 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0_filter=4");
            Game.ActionAttackSquare.CompiledEffect_player_0p003921569_filter_0 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.003921569_filter=0");
            Game.ActionAttackSquare.CompiledEffect_player_0p003921569_filter_1 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.003921569_filter=1");
            Game.ActionAttackSquare.CompiledEffect_player_0p003921569_filter_2 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.003921569_filter=2");
            Game.ActionAttackSquare.CompiledEffect_player_0p003921569_filter_3 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.003921569_filter=3");
            Game.ActionAttackSquare.CompiledEffect_player_0p003921569_filter_4 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.003921569_filter=4");
            Game.ActionAttackSquare.CompiledEffect_player_0p007843138_filter_0 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.007843138_filter=0");
            Game.ActionAttackSquare.CompiledEffect_player_0p007843138_filter_1 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.007843138_filter=1");
            Game.ActionAttackSquare.CompiledEffect_player_0p007843138_filter_2 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.007843138_filter=2");
            Game.ActionAttackSquare.CompiledEffect_player_0p007843138_filter_3 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.007843138_filter=3");
            Game.ActionAttackSquare.CompiledEffect_player_0p007843138_filter_4 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.007843138_filter=4");
            Game.ActionAttackSquare.CompiledEffect_player_0p01176471_filter_0 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.01176471_filter=0");
            Game.ActionAttackSquare.CompiledEffect_player_0p01176471_filter_1 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.01176471_filter=1");
            Game.ActionAttackSquare.CompiledEffect_player_0p01176471_filter_2 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.01176471_filter=2");
            Game.ActionAttackSquare.CompiledEffect_player_0p01176471_filter_3 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.01176471_filter=3");
            Game.ActionAttackSquare.CompiledEffect_player_0p01176471_filter_4 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.01176471_filter=4");
            Game.ActionAttackSquare.CompiledEffect_player_0p01568628_filter_0 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.01568628_filter=0");
            Game.ActionAttackSquare.CompiledEffect_player_0p01568628_filter_1 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.01568628_filter=1");
            Game.ActionAttackSquare.CompiledEffect_player_0p01568628_filter_2 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.01568628_filter=2");
            Game.ActionAttackSquare.CompiledEffect_player_0p01568628_filter_3 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.01568628_filter=3");
            Game.ActionAttackSquare.CompiledEffect_player_0p01568628_filter_4 = Content.Load<Effect>("FragSharpShaders/ActionAttackSquare_player=0.01568628_filter=4");
            Game.ActionAttackPoint.CompiledEffect_player_0_filter_0 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0_filter=0");
            Game.ActionAttackPoint.CompiledEffect_player_0_filter_1 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0_filter=1");
            Game.ActionAttackPoint.CompiledEffect_player_0_filter_2 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0_filter=2");
            Game.ActionAttackPoint.CompiledEffect_player_0_filter_3 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0_filter=3");
            Game.ActionAttackPoint.CompiledEffect_player_0_filter_4 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0_filter=4");
            Game.ActionAttackPoint.CompiledEffect_player_0p003921569_filter_0 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.003921569_filter=0");
            Game.ActionAttackPoint.CompiledEffect_player_0p003921569_filter_1 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.003921569_filter=1");
            Game.ActionAttackPoint.CompiledEffect_player_0p003921569_filter_2 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.003921569_filter=2");
            Game.ActionAttackPoint.CompiledEffect_player_0p003921569_filter_3 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.003921569_filter=3");
            Game.ActionAttackPoint.CompiledEffect_player_0p003921569_filter_4 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.003921569_filter=4");
            Game.ActionAttackPoint.CompiledEffect_player_0p007843138_filter_0 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.007843138_filter=0");
            Game.ActionAttackPoint.CompiledEffect_player_0p007843138_filter_1 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.007843138_filter=1");
            Game.ActionAttackPoint.CompiledEffect_player_0p007843138_filter_2 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.007843138_filter=2");
            Game.ActionAttackPoint.CompiledEffect_player_0p007843138_filter_3 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.007843138_filter=3");
            Game.ActionAttackPoint.CompiledEffect_player_0p007843138_filter_4 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.007843138_filter=4");
            Game.ActionAttackPoint.CompiledEffect_player_0p01176471_filter_0 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.01176471_filter=0");
            Game.ActionAttackPoint.CompiledEffect_player_0p01176471_filter_1 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.01176471_filter=1");
            Game.ActionAttackPoint.CompiledEffect_player_0p01176471_filter_2 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.01176471_filter=2");
            Game.ActionAttackPoint.CompiledEffect_player_0p01176471_filter_3 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.01176471_filter=3");
            Game.ActionAttackPoint.CompiledEffect_player_0p01176471_filter_4 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.01176471_filter=4");
            Game.ActionAttackPoint.CompiledEffect_player_0p01568628_filter_0 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.01568628_filter=0");
            Game.ActionAttackPoint.CompiledEffect_player_0p01568628_filter_1 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.01568628_filter=1");
            Game.ActionAttackPoint.CompiledEffect_player_0p01568628_filter_2 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.01568628_filter=2");
            Game.ActionAttackPoint.CompiledEffect_player_0p01568628_filter_3 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.01568628_filter=3");
            Game.ActionAttackPoint.CompiledEffect_player_0p01568628_filter_4 = Content.Load<Effect>("FragSharpShaders/ActionAttackPoint_player=0.01568628_filter=4");
            Game.ActionAttack2.CompiledEffect_player_0_filter_0 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0_filter=0");
            Game.ActionAttack2.CompiledEffect_player_0_filter_1 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0_filter=1");
            Game.ActionAttack2.CompiledEffect_player_0_filter_2 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0_filter=2");
            Game.ActionAttack2.CompiledEffect_player_0_filter_3 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0_filter=3");
            Game.ActionAttack2.CompiledEffect_player_0_filter_4 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0_filter=4");
            Game.ActionAttack2.CompiledEffect_player_0p003921569_filter_0 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.003921569_filter=0");
            Game.ActionAttack2.CompiledEffect_player_0p003921569_filter_1 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.003921569_filter=1");
            Game.ActionAttack2.CompiledEffect_player_0p003921569_filter_2 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.003921569_filter=2");
            Game.ActionAttack2.CompiledEffect_player_0p003921569_filter_3 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.003921569_filter=3");
            Game.ActionAttack2.CompiledEffect_player_0p003921569_filter_4 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.003921569_filter=4");
            Game.ActionAttack2.CompiledEffect_player_0p007843138_filter_0 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.007843138_filter=0");
            Game.ActionAttack2.CompiledEffect_player_0p007843138_filter_1 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.007843138_filter=1");
            Game.ActionAttack2.CompiledEffect_player_0p007843138_filter_2 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.007843138_filter=2");
            Game.ActionAttack2.CompiledEffect_player_0p007843138_filter_3 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.007843138_filter=3");
            Game.ActionAttack2.CompiledEffect_player_0p007843138_filter_4 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.007843138_filter=4");
            Game.ActionAttack2.CompiledEffect_player_0p01176471_filter_0 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.01176471_filter=0");
            Game.ActionAttack2.CompiledEffect_player_0p01176471_filter_1 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.01176471_filter=1");
            Game.ActionAttack2.CompiledEffect_player_0p01176471_filter_2 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.01176471_filter=2");
            Game.ActionAttack2.CompiledEffect_player_0p01176471_filter_3 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.01176471_filter=3");
            Game.ActionAttack2.CompiledEffect_player_0p01176471_filter_4 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.01176471_filter=4");
            Game.ActionAttack2.CompiledEffect_player_0p01568628_filter_0 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.01568628_filter=0");
            Game.ActionAttack2.CompiledEffect_player_0p01568628_filter_1 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.01568628_filter=1");
            Game.ActionAttack2.CompiledEffect_player_0p01568628_filter_2 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.01568628_filter=2");
            Game.ActionAttack2.CompiledEffect_player_0p01568628_filter_3 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.01568628_filter=3");
            Game.ActionAttack2.CompiledEffect_player_0p01568628_filter_4 = Content.Load<Effect>("FragSharpShaders/ActionAttack2_player=0.01568628_filter=4");
            Game.Pathfinding_ToSpecial.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Pathfinding_ToSpecial");
            Game.Pathfinding_ToPlayers.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Pathfinding_ToPlayers");
            Game.Pathfinding_ToOtherTeams.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Pathfinding_ToOtherTeams");
            Game.Movement_Phase1.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Movement_Phase1");
            Game.Movement_Phase2.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Movement_Phase2");
            Game.Movement_Convect.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Movement_Convect");
            Game.Movement_UpdateDirection_RemoveDead.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Movement_UpdateDirection_RemoveDead");
            Game.Movement_SetPolarity_Phase1.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Movement_SetPolarity_Phase1");
            Game.Movement_SetPolarity_Phase2.CompiledEffect = Content.Load<Effect>("FragSharpShaders/Movement_SetPolarity_Phase2");
            Game.DrawUnitsZoomedOutBlur.CompiledEffect_player_0 = Content.Load<Effect>("FragSharpShaders/DrawUnitsZoomedOutBlur_player=0");
            Game.DrawUnitsZoomedOutBlur.CompiledEffect_player_0p003921569 = Content.Load<Effect>("FragSharpShaders/DrawUnitsZoomedOutBlur_player=0.003921569");
            Game.DrawUnitsZoomedOutBlur.CompiledEffect_player_0p007843138 = Content.Load<Effect>("FragSharpShaders/DrawUnitsZoomedOutBlur_player=0.007843138");
            Game.DrawUnitsZoomedOutBlur.CompiledEffect_player_0p01176471 = Content.Load<Effect>("FragSharpShaders/DrawUnitsZoomedOutBlur_player=0.01176471");
            Game.DrawUnitsZoomedOutBlur.CompiledEffect_player_0p01568628 = Content.Load<Effect>("FragSharpShaders/DrawUnitsZoomedOutBlur_player=0.01568628");
            Game.DrawUnits.CompiledEffect_player_0_solid_blend_flag_true = Content.Load<Effect>("FragSharpShaders/DrawUnits_player=0_solid_blend_flag=true");
            Game.DrawUnits.CompiledEffect_player_0_solid_blend_flag_false = Content.Load<Effect>("FragSharpShaders/DrawUnits_player=0_solid_blend_flag=false");
            Game.DrawUnits.CompiledEffect_player_0p003921569_solid_blend_flag_true = Content.Load<Effect>("FragSharpShaders/DrawUnits_player=0.003921569_solid_blend_flag=true");
            Game.DrawUnits.CompiledEffect_player_0p003921569_solid_blend_flag_false = Content.Load<Effect>("FragSharpShaders/DrawUnits_player=0.003921569_solid_blend_flag=false");
            Game.DrawUnits.CompiledEffect_player_0p007843138_solid_blend_flag_true = Content.Load<Effect>("FragSharpShaders/DrawUnits_player=0.007843138_solid_blend_flag=true");
            Game.DrawUnits.CompiledEffect_player_0p007843138_solid_blend_flag_false = Content.Load<Effect>("FragSharpShaders/DrawUnits_player=0.007843138_solid_blend_flag=false");
            Game.DrawUnits.CompiledEffect_player_0p01176471_solid_blend_flag_true = Content.Load<Effect>("FragSharpShaders/DrawUnits_player=0.01176471_solid_blend_flag=true");
            Game.DrawUnits.CompiledEffect_player_0p01176471_solid_blend_flag_false = Content.Load<Effect>("FragSharpShaders/DrawUnits_player=0.01176471_solid_blend_flag=false");
            Game.DrawUnits.CompiledEffect_player_0p01568628_solid_blend_flag_true = Content.Load<Effect>("FragSharpShaders/DrawUnits_player=0.01568628_solid_blend_flag=true");
            Game.DrawUnits.CompiledEffect_player_0p01568628_solid_blend_flag_false = Content.Load<Effect>("FragSharpShaders/DrawUnits_player=0.01568628_solid_blend_flag=false");
        }
    }
}





namespace Game
{
    public partial class DrawAntiMagic
    {
        public static Effect CompiledEffect_casting_team_0;
        public static Effect CompiledEffect_casting_team_0p003921569;
        public static Effect CompiledEffect_casting_team_0p007843138;
        public static Effect CompiledEffect_casting_team_0p01176471;
        public static Effect CompiledEffect_casting_team_0p01568628;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D AntiMagic, float casting_team, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, AntiMagic, casting_team);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D AntiMagic, float casting_team, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, AntiMagic, casting_team);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D AntiMagic, float casting_team, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, AntiMagic, casting_team);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D AntiMagic, float casting_team, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, AntiMagic, casting_team);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D AntiMagic, float casting_team)
        {
            Effect CompiledEffect = null;

            if (abs((float)(casting_team - 0)) < .001) CompiledEffect = CompiledEffect_casting_team_0;
            else if (abs((float)(casting_team - 0.003921569)) < .001) CompiledEffect = CompiledEffect_casting_team_0p003921569;
            else if (abs((float)(casting_team - 0.007843138)) < .001) CompiledEffect = CompiledEffect_casting_team_0p007843138;
            else if (abs((float)(casting_team - 0.01176471)) < .001) CompiledEffect = CompiledEffect_casting_team_0p01176471;
            else if (abs((float)(casting_team - 0.01568628)) < .001) CompiledEffect = CompiledEffect_casting_team_0p01568628;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_AntiMagic_Texture"].SetValue(FragSharpMarshal.Marshal(AntiMagic));
            CompiledEffect.Parameters["fs_param_AntiMagic_size"].SetValue(FragSharpMarshal.Marshal(vec(AntiMagic.Width, AntiMagic.Height)));
            CompiledEffect.Parameters["fs_param_AntiMagic_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(AntiMagic.Width, AntiMagic.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class DrawGeoInfo
    {
        public static Effect CompiledEffect;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Geo, Texture2D Texture, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Geo, Texture);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Geo, Texture2D Texture, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Geo, Texture);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Geo, Texture2D Texture, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Geo, Texture);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Geo, Texture2D Texture, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Geo, Texture);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Geo, Texture2D Texture)
        {
            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_Geo_Texture"].SetValue(FragSharpMarshal.Marshal(Geo));
            CompiledEffect.Parameters["fs_param_Geo_size"].SetValue(FragSharpMarshal.Marshal(vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Geo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Texture_Texture"].SetValue(FragSharpMarshal.Marshal(Texture));
            CompiledEffect.Parameters["fs_param_Texture_size"].SetValue(FragSharpMarshal.Marshal(vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_Texture_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Texture.Width, Texture.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class DrawDirwardInfo
    {
        public static Effect CompiledEffect;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Dirward, Texture2D Texture, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Dirward, Texture);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Dirward, Texture2D Texture, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Dirward, Texture);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Dirward, Texture2D Texture, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Dirward, Texture);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Dirward, Texture2D Texture, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Dirward, Texture);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Dirward, Texture2D Texture)
        {
            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_Dirward_Texture"].SetValue(FragSharpMarshal.Marshal(Dirward));
            CompiledEffect.Parameters["fs_param_Dirward_size"].SetValue(FragSharpMarshal.Marshal(vec(Dirward.Width, Dirward.Height)));
            CompiledEffect.Parameters["fs_param_Dirward_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Dirward.Width, Dirward.Height)));
            CompiledEffect.Parameters["fs_param_Texture_Texture"].SetValue(FragSharpMarshal.Marshal(Texture));
            CompiledEffect.Parameters["fs_param_Texture_size"].SetValue(FragSharpMarshal.Marshal(vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_Texture_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Texture.Width, Texture.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class DrawPolarInfo
    {
        public static Effect CompiledEffect;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Geo, Texture2D PolarDistance, Texture2D Texture, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Geo, PolarDistance, Texture);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Geo, Texture2D PolarDistance, Texture2D Texture, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Geo, PolarDistance, Texture);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Geo, Texture2D PolarDistance, Texture2D Texture, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Geo, PolarDistance, Texture);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Geo, Texture2D PolarDistance, Texture2D Texture, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Geo, PolarDistance, Texture);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Geo, Texture2D PolarDistance, Texture2D Texture)
        {
            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_Geo_Texture"].SetValue(FragSharpMarshal.Marshal(Geo));
            CompiledEffect.Parameters["fs_param_Geo_size"].SetValue(FragSharpMarshal.Marshal(vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Geo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_PolarDistance_Texture"].SetValue(FragSharpMarshal.Marshal(PolarDistance));
            CompiledEffect.Parameters["fs_param_PolarDistance_size"].SetValue(FragSharpMarshal.Marshal(vec(PolarDistance.Width, PolarDistance.Height)));
            CompiledEffect.Parameters["fs_param_PolarDistance_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(PolarDistance.Width, PolarDistance.Height)));
            CompiledEffect.Parameters["fs_param_Texture_Texture"].SetValue(FragSharpMarshal.Marshal(Texture));
            CompiledEffect.Parameters["fs_param_Texture_size"].SetValue(FragSharpMarshal.Marshal(vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_Texture_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Texture.Width, Texture.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}





namespace Game
{
    public partial class DrawTiles
    {
        public static Effect CompiledEffect_draw_grid_true_solid_blend_flag_true;
        public static Effect CompiledEffect_draw_grid_true_solid_blend_flag_false;
        public static Effect CompiledEffect_draw_grid_false_solid_blend_flag_true;
        public static Effect CompiledEffect_draw_grid_false_solid_blend_flag_false;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Tiles, Texture2D Texture, bool draw_grid, bool solid_blend_flag, float solid_blend, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Tiles, Texture, draw_grid, solid_blend_flag, solid_blend);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Tiles, Texture2D Texture, bool draw_grid, bool solid_blend_flag, float solid_blend, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Tiles, Texture, draw_grid, solid_blend_flag, solid_blend);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Tiles, Texture2D Texture, bool draw_grid, bool solid_blend_flag, float solid_blend, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Tiles, Texture, draw_grid, solid_blend_flag, solid_blend);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Tiles, Texture2D Texture, bool draw_grid, bool solid_blend_flag, float solid_blend, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Tiles, Texture, draw_grid, solid_blend_flag, solid_blend);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Tiles, Texture2D Texture, bool draw_grid, bool solid_blend_flag, float solid_blend)
        {
            Effect CompiledEffect = null;

            if (draw_grid == true && solid_blend_flag == true) CompiledEffect = CompiledEffect_draw_grid_true_solid_blend_flag_true;
            else if (draw_grid == true && solid_blend_flag == false) CompiledEffect = CompiledEffect_draw_grid_true_solid_blend_flag_false;
            else if (draw_grid == false && solid_blend_flag == true) CompiledEffect = CompiledEffect_draw_grid_false_solid_blend_flag_true;
            else if (draw_grid == false && solid_blend_flag == false) CompiledEffect = CompiledEffect_draw_grid_false_solid_blend_flag_false;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_Tiles_Texture"].SetValue(FragSharpMarshal.Marshal(Tiles));
            CompiledEffect.Parameters["fs_param_Tiles_size"].SetValue(FragSharpMarshal.Marshal(vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Tiles_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Texture_Texture"].SetValue(FragSharpMarshal.Marshal(Texture));
            CompiledEffect.Parameters["fs_param_Texture_size"].SetValue(FragSharpMarshal.Marshal(vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_Texture_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_solid_blend"].SetValue(FragSharpMarshal.Marshal(solid_blend));
            CompiledEffect.Parameters["fs_param_FarColor_Texture"].SetValue(FragSharpMarshal.Marshal(FarColor));
            CompiledEffect.Parameters["fs_param_FarColor_size"].SetValue(FragSharpMarshal.Marshal(vec(FarColor.Width, FarColor.Height)));
            CompiledEffect.Parameters["fs_param_FarColor_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(FarColor.Width, FarColor.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}



namespace Game
{
    public partial class DrawOutsideTiles
    {
        public static Effect CompiledEffect_solid_blend_flag_true;
        public static Effect CompiledEffect_solid_blend_flag_false;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Tiles, Texture2D Texture, bool solid_blend_flag, float solid_blend, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Tiles, Texture, solid_blend_flag, solid_blend);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Tiles, Texture2D Texture, bool solid_blend_flag, float solid_blend, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Tiles, Texture, solid_blend_flag, solid_blend);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Tiles, Texture2D Texture, bool solid_blend_flag, float solid_blend, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Tiles, Texture, solid_blend_flag, solid_blend);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Tiles, Texture2D Texture, bool solid_blend_flag, float solid_blend, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Tiles, Texture, solid_blend_flag, solid_blend);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Tiles, Texture2D Texture, bool solid_blend_flag, float solid_blend)
        {
            Effect CompiledEffect = null;

            if (solid_blend_flag == true) CompiledEffect = CompiledEffect_solid_blend_flag_true;
            else if (solid_blend_flag == false) CompiledEffect = CompiledEffect_solid_blend_flag_false;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_Tiles_Texture"].SetValue(FragSharpMarshal.Marshal(Tiles));
            CompiledEffect.Parameters["fs_param_Tiles_size"].SetValue(FragSharpMarshal.Marshal(vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Tiles_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Texture_Texture"].SetValue(FragSharpMarshal.Marshal(Texture));
            CompiledEffect.Parameters["fs_param_Texture_size"].SetValue(FragSharpMarshal.Marshal(vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_Texture_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_solid_blend"].SetValue(FragSharpMarshal.Marshal(solid_blend));
            CompiledEffect.Parameters["fs_param_FarColor_Texture"].SetValue(FragSharpMarshal.Marshal(FarColor));
            CompiledEffect.Parameters["fs_param_FarColor_size"].SetValue(FragSharpMarshal.Marshal(vec(FarColor.Width, FarColor.Height)));
            CompiledEffect.Parameters["fs_param_FarColor_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(FarColor.Width, FarColor.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}



namespace Game
{
    public partial class Geodesic_Outline
    {
        public static Effect CompiledEffect_Anti_true;
        public static Effect CompiledEffect_Anti_false;

        public static void Apply(Texture2D Tiles, bool Anti, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Tiles, Anti);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Tiles, bool Anti, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Tiles, Anti);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Tiles, bool Anti, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Tiles, Anti);
        }
        public static void Using(Texture2D Tiles, bool Anti, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Tiles, Anti);
        }
        public static void Using(Texture2D Tiles, bool Anti)
        {
            Effect CompiledEffect = null;

            if (Anti == true) CompiledEffect = CompiledEffect_Anti_true;
            else if (Anti == false) CompiledEffect = CompiledEffect_Anti_false;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Tiles_Texture"].SetValue(FragSharpMarshal.Marshal(Tiles));
            CompiledEffect.Parameters["fs_param_Tiles_size"].SetValue(FragSharpMarshal.Marshal(vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Tiles_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}



namespace Game
{
    public partial class Geodesic_OutlineCleanup
    {
        public static Effect CompiledEffect_Anti_true;
        public static Effect CompiledEffect_Anti_false;

        public static void Apply(Texture2D Tiles, Texture2D Geo, bool Anti, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Tiles, Geo, Anti);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Tiles, Texture2D Geo, bool Anti, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Tiles, Geo, Anti);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Tiles, Texture2D Geo, bool Anti, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Tiles, Geo, Anti);
        }
        public static void Using(Texture2D Tiles, Texture2D Geo, bool Anti, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Tiles, Geo, Anti);
        }
        public static void Using(Texture2D Tiles, Texture2D Geo, bool Anti)
        {
            Effect CompiledEffect = null;

            if (Anti == true) CompiledEffect = CompiledEffect_Anti_true;
            else if (Anti == false) CompiledEffect = CompiledEffect_Anti_false;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Tiles_Texture"].SetValue(FragSharpMarshal.Marshal(Tiles));
            CompiledEffect.Parameters["fs_param_Tiles_size"].SetValue(FragSharpMarshal.Marshal(vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Tiles_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Geo_Texture"].SetValue(FragSharpMarshal.Marshal(Geo));
            CompiledEffect.Parameters["fs_param_Geo_size"].SetValue(FragSharpMarshal.Marshal(vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Geo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Geo.Width, Geo.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Geodesic_StorePos
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Geo, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Geo);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Geo, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Geo);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Geo, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Geo);
        }
        public static void Using(Texture2D Geo, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Geo);
        }
        public static void Using(Texture2D Geo)
        {
            CompiledEffect.Parameters["fs_param_Geo_Texture"].SetValue(FragSharpMarshal.Marshal(Geo));
            CompiledEffect.Parameters["fs_param_Geo_size"].SetValue(FragSharpMarshal.Marshal(vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Geo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Geo.Width, Geo.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Geodesic_ExtremityPropagation
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Geo, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Geo);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Geo, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Geo);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Geo, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Geo);
        }
        public static void Using(Texture2D Geo, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Geo);
        }
        public static void Using(Texture2D Geo)
        {
            CompiledEffect.Parameters["fs_param_Geo_Texture"].SetValue(FragSharpMarshal.Marshal(Geo));
            CompiledEffect.Parameters["fs_param_Geo_size"].SetValue(FragSharpMarshal.Marshal(vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Geo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Geo.Width, Geo.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Geodesic_SetGeoId
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Geo, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Geo);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Geo, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Geo);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Geo, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Geo);
        }
        public static void Using(Texture2D Geo, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Geo);
        }
        public static void Using(Texture2D Geo)
        {
            CompiledEffect.Parameters["fs_param_Geo_Texture"].SetValue(FragSharpMarshal.Marshal(Geo));
            CompiledEffect.Parameters["fs_param_Geo_size"].SetValue(FragSharpMarshal.Marshal(vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Geo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Geo.Width, Geo.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Geodesic_PolarDistance
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Geo, Texture2D Info, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Geo, Info);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Geo, Texture2D Info, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Geo, Info);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Geo, Texture2D Info, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Geo, Info);
        }
        public static void Using(Texture2D Geo, Texture2D Info, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Geo, Info);
        }
        public static void Using(Texture2D Geo, Texture2D Info)
        {
            CompiledEffect.Parameters["fs_param_Geo_Texture"].SetValue(FragSharpMarshal.Marshal(Geo));
            CompiledEffect.Parameters["fs_param_Geo_size"].SetValue(FragSharpMarshal.Marshal(vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Geo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Info_Texture"].SetValue(FragSharpMarshal.Marshal(Info));
            CompiledEffect.Parameters["fs_param_Info_size"].SetValue(FragSharpMarshal.Marshal(vec(Info.Width, Info.Height)));
            CompiledEffect.Parameters["fs_param_Info_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Info.Width, Info.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Geodesic_SetCircumference
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Geo, Texture2D Info, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Geo, Info);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Geo, Texture2D Info, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Geo, Info);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Geo, Texture2D Info, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Geo, Info);
        }
        public static void Using(Texture2D Geo, Texture2D Info, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Geo, Info);
        }
        public static void Using(Texture2D Geo, Texture2D Info)
        {
            CompiledEffect.Parameters["fs_param_Geo_Texture"].SetValue(FragSharpMarshal.Marshal(Geo));
            CompiledEffect.Parameters["fs_param_Geo_size"].SetValue(FragSharpMarshal.Marshal(vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Geo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Info_Texture"].SetValue(FragSharpMarshal.Marshal(Info));
            CompiledEffect.Parameters["fs_param_Info_size"].SetValue(FragSharpMarshal.Marshal(vec(Info.Width, Info.Height)));
            CompiledEffect.Parameters["fs_param_Info_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Info.Width, Info.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}





namespace Game
{
    public partial class Geodesic_Polarity
    {
        public static Effect CompiledEffect_dir_0p003921569;
        public static Effect CompiledEffect_dir_0p007843138;
        public static Effect CompiledEffect_dir_0p01176471;
        public static Effect CompiledEffect_dir_0p01568628;

        public static void Apply(Texture2D Dirward, Texture2D Geo, Texture2D ShiftedGeo, Texture2D Info, Texture2D ShiftedInfo, float dir, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Dirward, Geo, ShiftedGeo, Info, ShiftedInfo, dir);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Dirward, Texture2D Geo, Texture2D ShiftedGeo, Texture2D Info, Texture2D ShiftedInfo, float dir, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Dirward, Geo, ShiftedGeo, Info, ShiftedInfo, dir);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Dirward, Texture2D Geo, Texture2D ShiftedGeo, Texture2D Info, Texture2D ShiftedInfo, float dir, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Dirward, Geo, ShiftedGeo, Info, ShiftedInfo, dir);
        }
        public static void Using(Texture2D Dirward, Texture2D Geo, Texture2D ShiftedGeo, Texture2D Info, Texture2D ShiftedInfo, float dir, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Dirward, Geo, ShiftedGeo, Info, ShiftedInfo, dir);
        }
        public static void Using(Texture2D Dirward, Texture2D Geo, Texture2D ShiftedGeo, Texture2D Info, Texture2D ShiftedInfo, float dir)
        {
            Effect CompiledEffect = null;

            if (abs((float)(dir - 0.003921569)) < .001) CompiledEffect = CompiledEffect_dir_0p003921569;
            else if (abs((float)(dir - 0.007843138)) < .001) CompiledEffect = CompiledEffect_dir_0p007843138;
            else if (abs((float)(dir - 0.01176471)) < .001) CompiledEffect = CompiledEffect_dir_0p01176471;
            else if (abs((float)(dir - 0.01568628)) < .001) CompiledEffect = CompiledEffect_dir_0p01568628;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Dirward_Texture"].SetValue(FragSharpMarshal.Marshal(Dirward));
            CompiledEffect.Parameters["fs_param_Dirward_size"].SetValue(FragSharpMarshal.Marshal(vec(Dirward.Width, Dirward.Height)));
            CompiledEffect.Parameters["fs_param_Dirward_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Dirward.Width, Dirward.Height)));
            CompiledEffect.Parameters["fs_param_Geo_Texture"].SetValue(FragSharpMarshal.Marshal(Geo));
            CompiledEffect.Parameters["fs_param_Geo_size"].SetValue(FragSharpMarshal.Marshal(vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Geo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_ShiftedGeo_Texture"].SetValue(FragSharpMarshal.Marshal(ShiftedGeo));
            CompiledEffect.Parameters["fs_param_ShiftedGeo_size"].SetValue(FragSharpMarshal.Marshal(vec(ShiftedGeo.Width, ShiftedGeo.Height)));
            CompiledEffect.Parameters["fs_param_ShiftedGeo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(ShiftedGeo.Width, ShiftedGeo.Height)));
            CompiledEffect.Parameters["fs_param_Info_Texture"].SetValue(FragSharpMarshal.Marshal(Info));
            CompiledEffect.Parameters["fs_param_Info_size"].SetValue(FragSharpMarshal.Marshal(vec(Info.Width, Info.Height)));
            CompiledEffect.Parameters["fs_param_Info_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Info.Width, Info.Height)));
            CompiledEffect.Parameters["fs_param_ShiftedInfo_Texture"].SetValue(FragSharpMarshal.Marshal(ShiftedInfo));
            CompiledEffect.Parameters["fs_param_ShiftedInfo_size"].SetValue(FragSharpMarshal.Marshal(vec(ShiftedInfo.Width, ShiftedInfo.Height)));
            CompiledEffect.Parameters["fs_param_ShiftedInfo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(ShiftedInfo.Width, ShiftedInfo.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Geodesic_FillMissingPolarity
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Dirward, Texture2D Geo, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Dirward, Geo);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Dirward, Texture2D Geo, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Dirward, Geo);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Dirward, Texture2D Geo, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Dirward, Geo);
        }
        public static void Using(Texture2D Dirward, Texture2D Geo, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Dirward, Geo);
        }
        public static void Using(Texture2D Dirward, Texture2D Geo)
        {
            CompiledEffect.Parameters["fs_param_Dirward_Texture"].SetValue(FragSharpMarshal.Marshal(Dirward));
            CompiledEffect.Parameters["fs_param_Dirward_size"].SetValue(FragSharpMarshal.Marshal(vec(Dirward.Width, Dirward.Height)));
            CompiledEffect.Parameters["fs_param_Dirward_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Dirward.Width, Dirward.Height)));
            CompiledEffect.Parameters["fs_param_Geo_Texture"].SetValue(FragSharpMarshal.Marshal(Geo));
            CompiledEffect.Parameters["fs_param_Geo_size"].SetValue(FragSharpMarshal.Marshal(vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Geo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Geo.Width, Geo.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Geodesic_ClearImportance
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Dirward, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Dirward);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Dirward, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Dirward);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Dirward, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Dirward);
        }
        public static void Using(Texture2D Dirward, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Dirward);
        }
        public static void Using(Texture2D Dirward)
        {
            CompiledEffect.Parameters["fs_param_Dirward_Texture"].SetValue(FragSharpMarshal.Marshal(Dirward));
            CompiledEffect.Parameters["fs_param_Dirward_size"].SetValue(FragSharpMarshal.Marshal(vec(Dirward.Width, Dirward.Height)));
            CompiledEffect.Parameters["fs_param_Dirward_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Dirward.Width, Dirward.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}





namespace Game
{
    public partial class Geodesic_DirwardExtend
    {
        public static Effect CompiledEffect_dir_0p003921569;
        public static Effect CompiledEffect_dir_0p007843138;
        public static Effect CompiledEffect_dir_0p01176471;
        public static Effect CompiledEffect_dir_0p01568628;

        public static void Apply(Texture2D Tiles, Texture2D Geo, Texture2D Dirward, float dir, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Tiles, Geo, Dirward, dir);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Tiles, Texture2D Geo, Texture2D Dirward, float dir, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Tiles, Geo, Dirward, dir);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Tiles, Texture2D Geo, Texture2D Dirward, float dir, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Tiles, Geo, Dirward, dir);
        }
        public static void Using(Texture2D Tiles, Texture2D Geo, Texture2D Dirward, float dir, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Tiles, Geo, Dirward, dir);
        }
        public static void Using(Texture2D Tiles, Texture2D Geo, Texture2D Dirward, float dir)
        {
            Effect CompiledEffect = null;

            if (abs((float)(dir - 0.003921569)) < .001) CompiledEffect = CompiledEffect_dir_0p003921569;
            else if (abs((float)(dir - 0.007843138)) < .001) CompiledEffect = CompiledEffect_dir_0p007843138;
            else if (abs((float)(dir - 0.01176471)) < .001) CompiledEffect = CompiledEffect_dir_0p01176471;
            else if (abs((float)(dir - 0.01568628)) < .001) CompiledEffect = CompiledEffect_dir_0p01568628;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Tiles_Texture"].SetValue(FragSharpMarshal.Marshal(Tiles));
            CompiledEffect.Parameters["fs_param_Tiles_size"].SetValue(FragSharpMarshal.Marshal(vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Tiles_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Geo_Texture"].SetValue(FragSharpMarshal.Marshal(Geo));
            CompiledEffect.Parameters["fs_param_Geo_size"].SetValue(FragSharpMarshal.Marshal(vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Geo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Dirward_Texture"].SetValue(FragSharpMarshal.Marshal(Dirward));
            CompiledEffect.Parameters["fs_param_Dirward_size"].SetValue(FragSharpMarshal.Marshal(vec(Dirward.Width, Dirward.Height)));
            CompiledEffect.Parameters["fs_param_Dirward_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Dirward.Width, Dirward.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Geodesic_ConvertToBlocking
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Tiles, Texture2D Geo, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Tiles, Geo);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Tiles, Texture2D Geo, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Tiles, Geo);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Tiles, Texture2D Geo, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Tiles, Geo);
        }
        public static void Using(Texture2D Tiles, Texture2D Geo, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Tiles, Geo);
        }
        public static void Using(Texture2D Tiles, Texture2D Geo)
        {
            CompiledEffect.Parameters["fs_param_Tiles_Texture"].SetValue(FragSharpMarshal.Marshal(Tiles));
            CompiledEffect.Parameters["fs_param_Tiles_size"].SetValue(FragSharpMarshal.Marshal(vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Tiles_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Geo_Texture"].SetValue(FragSharpMarshal.Marshal(Geo));
            CompiledEffect.Parameters["fs_param_Geo_size"].SetValue(FragSharpMarshal.Marshal(vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Geo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Geo.Width, Geo.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Geodesic_Flatten
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Geo, Texture2D OuterGeo, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Geo, OuterGeo);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Geo, Texture2D OuterGeo, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Geo, OuterGeo);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Geo, Texture2D OuterGeo, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Geo, OuterGeo);
        }
        public static void Using(Texture2D Geo, Texture2D OuterGeo, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Geo, OuterGeo);
        }
        public static void Using(Texture2D Geo, Texture2D OuterGeo)
        {
            CompiledEffect.Parameters["fs_param_Geo_Texture"].SetValue(FragSharpMarshal.Marshal(Geo));
            CompiledEffect.Parameters["fs_param_Geo_size"].SetValue(FragSharpMarshal.Marshal(vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Geo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_OuterGeo_Texture"].SetValue(FragSharpMarshal.Marshal(OuterGeo));
            CompiledEffect.Parameters["fs_param_OuterGeo_size"].SetValue(FragSharpMarshal.Marshal(vec(OuterGeo.Width, OuterGeo.Height)));
            CompiledEffect.Parameters["fs_param_OuterGeo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(OuterGeo.Width, OuterGeo.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Geodesic_Boundary
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Geo, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Geo);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Geo, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Geo);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Geo, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Geo);
        }
        public static void Using(Texture2D Geo, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Geo);
        }
        public static void Using(Texture2D Geo)
        {
            CompiledEffect.Parameters["fs_param_Geo_Texture"].SetValue(FragSharpMarshal.Marshal(Geo));
            CompiledEffect.Parameters["fs_param_Geo_size"].SetValue(FragSharpMarshal.Marshal(vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Geo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Geo.Width, Geo.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}




namespace Game
{
    public partial class Action_PaintTiles
    {
        public static Effect CompiledEffect_type_0p003921569;
        public static Effect CompiledEffect_type_0p007843138;
        public static Effect CompiledEffect_type_0p01960784;

        public static void Apply(Texture2D Tiles, Texture2D Select, Texture2D Random, float type, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Tiles, Select, Random, type);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Tiles, Texture2D Select, Texture2D Random, float type, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Tiles, Select, Random, type);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Tiles, Texture2D Select, Texture2D Random, float type, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Tiles, Select, Random, type);
        }
        public static void Using(Texture2D Tiles, Texture2D Select, Texture2D Random, float type, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Tiles, Select, Random, type);
        }
        public static void Using(Texture2D Tiles, Texture2D Select, Texture2D Random, float type)
        {
            Effect CompiledEffect = null;

            if (abs((float)(type - 0.003921569)) < .001) CompiledEffect = CompiledEffect_type_0p003921569;
            else if (abs((float)(type - 0.007843138)) < .001) CompiledEffect = CompiledEffect_type_0p007843138;
            else if (abs((float)(type - 0.01960784)) < .001) CompiledEffect = CompiledEffect_type_0p01960784;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Tiles_Texture"].SetValue(FragSharpMarshal.Marshal(Tiles));
            CompiledEffect.Parameters["fs_param_Tiles_size"].SetValue(FragSharpMarshal.Marshal(vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Tiles_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Select_Texture"].SetValue(FragSharpMarshal.Marshal(Select));
            CompiledEffect.Parameters["fs_param_Select_size"].SetValue(FragSharpMarshal.Marshal(vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Select_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Random_Texture"].SetValue(FragSharpMarshal.Marshal(Random));
            CompiledEffect.Parameters["fs_param_Random_size"].SetValue(FragSharpMarshal.Marshal(vec(Random.Width, Random.Height)));
            CompiledEffect.Parameters["fs_param_Random_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Random.Width, Random.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class PaintTiles_UpdateData
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Tiles, Texture2D Units, Texture2D Data, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Tiles, Units, Data);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Tiles, Texture2D Units, Texture2D Data, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Tiles, Units, Data);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Tiles, Texture2D Units, Texture2D Data, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Tiles, Units, Data);
        }
        public static void Using(Texture2D Tiles, Texture2D Units, Texture2D Data, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Tiles, Units, Data);
        }
        public static void Using(Texture2D Tiles, Texture2D Units, Texture2D Data)
        {
            CompiledEffect.Parameters["fs_param_Tiles_Texture"].SetValue(FragSharpMarshal.Marshal(Tiles));
            CompiledEffect.Parameters["fs_param_Tiles_size"].SetValue(FragSharpMarshal.Marshal(vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Tiles_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Units_Texture"].SetValue(FragSharpMarshal.Marshal(Units));
            CompiledEffect.Parameters["fs_param_Units_size"].SetValue(FragSharpMarshal.Marshal(vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Units_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class PaintTiles_UpdateUnits
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Tiles, Texture2D Units, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Tiles, Units);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Tiles, Texture2D Units, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Tiles, Units);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Tiles, Texture2D Units, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Tiles, Units);
        }
        public static void Using(Texture2D Tiles, Texture2D Units, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Tiles, Units);
        }
        public static void Using(Texture2D Tiles, Texture2D Units)
        {
            CompiledEffect.Parameters["fs_param_Tiles_Texture"].SetValue(FragSharpMarshal.Marshal(Tiles));
            CompiledEffect.Parameters["fs_param_Tiles_size"].SetValue(FragSharpMarshal.Marshal(vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Tiles_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Units_Texture"].SetValue(FragSharpMarshal.Marshal(Units));
            CompiledEffect.Parameters["fs_param_Units_size"].SetValue(FragSharpMarshal.Marshal(vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Units_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Units.Width, Units.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class PaintTiles_UpdateTiles
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Tiles, Texture2D Select, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Tiles, Select);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Tiles, Texture2D Select, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Tiles, Select);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Tiles, Texture2D Select, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Tiles, Select);
        }
        public static void Using(Texture2D Tiles, Texture2D Select, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Tiles, Select);
        }
        public static void Using(Texture2D Tiles, Texture2D Select)
        {
            CompiledEffect.Parameters["fs_param_Tiles_Texture"].SetValue(FragSharpMarshal.Marshal(Tiles));
            CompiledEffect.Parameters["fs_param_Tiles_size"].SetValue(FragSharpMarshal.Marshal(vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Tiles_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Tiles.Width, Tiles.Height)));
            CompiledEffect.Parameters["fs_param_Select_Texture"].SetValue(FragSharpMarshal.Marshal(Select));
            CompiledEffect.Parameters["fs_param_Select_size"].SetValue(FragSharpMarshal.Marshal(vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Select_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Select.Width, Select.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class ActionDelete_Data
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Data, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data);
        }
        public static void Using(Texture2D Data, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data);
        }
        public static void Using(Texture2D Data)
        {
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class UpdateFakeSelect
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Data, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data);
        }
        public static void Using(Texture2D Data, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data);
        }
        public static void Using(Texture2D Data)
        {
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}











namespace Game
{
    public partial class ActionSelect
    {
        public static Effect CompiledEffect_player_0_fake_true;
        public static Effect CompiledEffect_player_0_fake_false;
        public static Effect CompiledEffect_player_0p003921569_fake_true;
        public static Effect CompiledEffect_player_0p003921569_fake_false;
        public static Effect CompiledEffect_player_0p007843138_fake_true;
        public static Effect CompiledEffect_player_0p007843138_fake_false;
        public static Effect CompiledEffect_player_0p01176471_fake_true;
        public static Effect CompiledEffect_player_0p01176471_fake_false;
        public static Effect CompiledEffect_player_0p01568628_fake_true;
        public static Effect CompiledEffect_player_0p01568628_fake_false;

        public static void Apply(Texture2D Data, Texture2D Unit, Texture2D Select, float player, bool deselect, bool fake, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Unit, Select, player, deselect, fake);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, Texture2D Unit, Texture2D Select, float player, bool deselect, bool fake, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Unit, Select, player, deselect, fake);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, Texture2D Unit, Texture2D Select, float player, bool deselect, bool fake, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Unit, Select, player, deselect, fake);
        }
        public static void Using(Texture2D Data, Texture2D Unit, Texture2D Select, float player, bool deselect, bool fake, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Unit, Select, player, deselect, fake);
        }
        public static void Using(Texture2D Data, Texture2D Unit, Texture2D Select, float player, bool deselect, bool fake)
        {
            Effect CompiledEffect = null;

            if (abs((float)(player - 0)) < .001 && fake == true) CompiledEffect = CompiledEffect_player_0_fake_true;
            else if (abs((float)(player - 0)) < .001 && fake == false) CompiledEffect = CompiledEffect_player_0_fake_false;
            else if (abs((float)(player - 0.003921569)) < .001 && fake == true) CompiledEffect = CompiledEffect_player_0p003921569_fake_true;
            else if (abs((float)(player - 0.003921569)) < .001 && fake == false) CompiledEffect = CompiledEffect_player_0p003921569_fake_false;
            else if (abs((float)(player - 0.007843138)) < .001 && fake == true) CompiledEffect = CompiledEffect_player_0p007843138_fake_true;
            else if (abs((float)(player - 0.007843138)) < .001 && fake == false) CompiledEffect = CompiledEffect_player_0p007843138_fake_false;
            else if (abs((float)(player - 0.01176471)) < .001 && fake == true) CompiledEffect = CompiledEffect_player_0p01176471_fake_true;
            else if (abs((float)(player - 0.01176471)) < .001 && fake == false) CompiledEffect = CompiledEffect_player_0p01176471_fake_false;
            else if (abs((float)(player - 0.01568628)) < .001 && fake == true) CompiledEffect = CompiledEffect_player_0p01568628_fake_true;
            else if (abs((float)(player - 0.01568628)) < .001 && fake == false) CompiledEffect = CompiledEffect_player_0p01568628_fake_false;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Select_Texture"].SetValue(FragSharpMarshal.Marshal(Select));
            CompiledEffect.Parameters["fs_param_Select_size"].SetValue(FragSharpMarshal.Marshal(vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Select_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_deselect"].SetValue(FragSharpMarshal.Marshal(deselect));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}











namespace Game
{
    public partial class ActionSelectInBox
    {
        public static Effect CompiledEffect_player_0_fake_true;
        public static Effect CompiledEffect_player_0_fake_false;
        public static Effect CompiledEffect_player_0p003921569_fake_true;
        public static Effect CompiledEffect_player_0p003921569_fake_false;
        public static Effect CompiledEffect_player_0p007843138_fake_true;
        public static Effect CompiledEffect_player_0p007843138_fake_false;
        public static Effect CompiledEffect_player_0p01176471_fake_true;
        public static Effect CompiledEffect_player_0p01176471_fake_false;
        public static Effect CompiledEffect_player_0p01568628_fake_true;
        public static Effect CompiledEffect_player_0p01568628_fake_false;

        public static void Apply(Texture2D Data, Texture2D Unit, vec2 bl, vec2 tr, float player, bool deselect, bool fake, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Unit, bl, tr, player, deselect, fake);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, Texture2D Unit, vec2 bl, vec2 tr, float player, bool deselect, bool fake, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Unit, bl, tr, player, deselect, fake);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, Texture2D Unit, vec2 bl, vec2 tr, float player, bool deselect, bool fake, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Unit, bl, tr, player, deselect, fake);
        }
        public static void Using(Texture2D Data, Texture2D Unit, vec2 bl, vec2 tr, float player, bool deselect, bool fake, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Unit, bl, tr, player, deselect, fake);
        }
        public static void Using(Texture2D Data, Texture2D Unit, vec2 bl, vec2 tr, float player, bool deselect, bool fake)
        {
            Effect CompiledEffect = null;

            if (abs((float)(player - 0)) < .001 && fake == true) CompiledEffect = CompiledEffect_player_0_fake_true;
            else if (abs((float)(player - 0)) < .001 && fake == false) CompiledEffect = CompiledEffect_player_0_fake_false;
            else if (abs((float)(player - 0.003921569)) < .001 && fake == true) CompiledEffect = CompiledEffect_player_0p003921569_fake_true;
            else if (abs((float)(player - 0.003921569)) < .001 && fake == false) CompiledEffect = CompiledEffect_player_0p003921569_fake_false;
            else if (abs((float)(player - 0.007843138)) < .001 && fake == true) CompiledEffect = CompiledEffect_player_0p007843138_fake_true;
            else if (abs((float)(player - 0.007843138)) < .001 && fake == false) CompiledEffect = CompiledEffect_player_0p007843138_fake_false;
            else if (abs((float)(player - 0.01176471)) < .001 && fake == true) CompiledEffect = CompiledEffect_player_0p01176471_fake_true;
            else if (abs((float)(player - 0.01176471)) < .001 && fake == false) CompiledEffect = CompiledEffect_player_0p01176471_fake_false;
            else if (abs((float)(player - 0.01568628)) < .001 && fake == true) CompiledEffect = CompiledEffect_player_0p01568628_fake_true;
            else if (abs((float)(player - 0.01568628)) < .001 && fake == false) CompiledEffect = CompiledEffect_player_0p01568628_fake_false;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_bl"].SetValue(FragSharpMarshal.Marshal(bl));
            CompiledEffect.Parameters["fs_param_tr"].SetValue(FragSharpMarshal.Marshal(tr));
            CompiledEffect.Parameters["fs_param_deselect"].SetValue(FragSharpMarshal.Marshal(deselect));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}






namespace Game
{
    public partial class DataDrawMouse
    {
        public static Effect CompiledEffect_player_0;
        public static Effect CompiledEffect_player_0p003921569;
        public static Effect CompiledEffect_player_0p007843138;
        public static Effect CompiledEffect_player_0p01176471;
        public static Effect CompiledEffect_player_0p01568628;

        public static void Apply(Texture2D data_texture, float player, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(data_texture, player);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D data_texture, float player, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(data_texture, player);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D data_texture, float player, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(data_texture, player);
        }
        public static void Using(Texture2D data_texture, float player, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(data_texture, player);
        }
        public static void Using(Texture2D data_texture, float player)
        {
            Effect CompiledEffect = null;

            if (abs((float)(player - 0)) < .001) CompiledEffect = CompiledEffect_player_0;
            else if (abs((float)(player - 0.003921569)) < .001) CompiledEffect = CompiledEffect_player_0p003921569;
            else if (abs((float)(player - 0.007843138)) < .001) CompiledEffect = CompiledEffect_player_0p007843138;
            else if (abs((float)(player - 0.01176471)) < .001) CompiledEffect = CompiledEffect_player_0p01176471;
            else if (abs((float)(player - 0.01568628)) < .001) CompiledEffect = CompiledEffect_player_0p01568628;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_data_texture_Texture"].SetValue(FragSharpMarshal.Marshal(data_texture));
            CompiledEffect.Parameters["fs_param_data_texture_size"].SetValue(FragSharpMarshal.Marshal(vec(data_texture.Width, data_texture.Height)));
            CompiledEffect.Parameters["fs_param_data_texture_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(data_texture.Width, data_texture.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}
















namespace Game
{
    public partial class ActionSpawn_Filter
    {
        public static Effect CompiledEffect_distribution_1_AntiMagicTeam_0;
        public static Effect CompiledEffect_distribution_1_AntiMagicTeam_0p003921569;
        public static Effect CompiledEffect_distribution_1_AntiMagicTeam_0p007843138;
        public static Effect CompiledEffect_distribution_1_AntiMagicTeam_0p01176471;
        public static Effect CompiledEffect_distribution_1_AntiMagicTeam_0p01568628;
        public static Effect CompiledEffect_distribution_2_AntiMagicTeam_0;
        public static Effect CompiledEffect_distribution_2_AntiMagicTeam_0p003921569;
        public static Effect CompiledEffect_distribution_2_AntiMagicTeam_0p007843138;
        public static Effect CompiledEffect_distribution_2_AntiMagicTeam_0p01176471;
        public static Effect CompiledEffect_distribution_2_AntiMagicTeam_0p01568628;
        public static Effect CompiledEffect_distribution_3_AntiMagicTeam_0;
        public static Effect CompiledEffect_distribution_3_AntiMagicTeam_0p003921569;
        public static Effect CompiledEffect_distribution_3_AntiMagicTeam_0p007843138;
        public static Effect CompiledEffect_distribution_3_AntiMagicTeam_0p01176471;
        public static Effect CompiledEffect_distribution_3_AntiMagicTeam_0p01568628;

        public static void Apply(Texture2D Select, Texture2D Data, Texture2D Units, Texture2D Corpses, Texture2D AntiMagic, float distribution, float AntiMagicTeam, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Select, Data, Units, Corpses, AntiMagic, distribution, AntiMagicTeam);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Select, Texture2D Data, Texture2D Units, Texture2D Corpses, Texture2D AntiMagic, float distribution, float AntiMagicTeam, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Select, Data, Units, Corpses, AntiMagic, distribution, AntiMagicTeam);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Select, Texture2D Data, Texture2D Units, Texture2D Corpses, Texture2D AntiMagic, float distribution, float AntiMagicTeam, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Select, Data, Units, Corpses, AntiMagic, distribution, AntiMagicTeam);
        }
        public static void Using(Texture2D Select, Texture2D Data, Texture2D Units, Texture2D Corpses, Texture2D AntiMagic, float distribution, float AntiMagicTeam, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Select, Data, Units, Corpses, AntiMagic, distribution, AntiMagicTeam);
        }
        public static void Using(Texture2D Select, Texture2D Data, Texture2D Units, Texture2D Corpses, Texture2D AntiMagic, float distribution, float AntiMagicTeam)
        {
            Effect CompiledEffect = null;

            if (abs((float)(distribution - 1)) < .001 && abs((float)(AntiMagicTeam - 0)) < .001) CompiledEffect = CompiledEffect_distribution_1_AntiMagicTeam_0;
            else if (abs((float)(distribution - 1)) < .001 && abs((float)(AntiMagicTeam - 0.003921569)) < .001) CompiledEffect = CompiledEffect_distribution_1_AntiMagicTeam_0p003921569;
            else if (abs((float)(distribution - 1)) < .001 && abs((float)(AntiMagicTeam - 0.007843138)) < .001) CompiledEffect = CompiledEffect_distribution_1_AntiMagicTeam_0p007843138;
            else if (abs((float)(distribution - 1)) < .001 && abs((float)(AntiMagicTeam - 0.01176471)) < .001) CompiledEffect = CompiledEffect_distribution_1_AntiMagicTeam_0p01176471;
            else if (abs((float)(distribution - 1)) < .001 && abs((float)(AntiMagicTeam - 0.01568628)) < .001) CompiledEffect = CompiledEffect_distribution_1_AntiMagicTeam_0p01568628;
            else if (abs((float)(distribution - 2)) < .001 && abs((float)(AntiMagicTeam - 0)) < .001) CompiledEffect = CompiledEffect_distribution_2_AntiMagicTeam_0;
            else if (abs((float)(distribution - 2)) < .001 && abs((float)(AntiMagicTeam - 0.003921569)) < .001) CompiledEffect = CompiledEffect_distribution_2_AntiMagicTeam_0p003921569;
            else if (abs((float)(distribution - 2)) < .001 && abs((float)(AntiMagicTeam - 0.007843138)) < .001) CompiledEffect = CompiledEffect_distribution_2_AntiMagicTeam_0p007843138;
            else if (abs((float)(distribution - 2)) < .001 && abs((float)(AntiMagicTeam - 0.01176471)) < .001) CompiledEffect = CompiledEffect_distribution_2_AntiMagicTeam_0p01176471;
            else if (abs((float)(distribution - 2)) < .001 && abs((float)(AntiMagicTeam - 0.01568628)) < .001) CompiledEffect = CompiledEffect_distribution_2_AntiMagicTeam_0p01568628;
            else if (abs((float)(distribution - 3)) < .001 && abs((float)(AntiMagicTeam - 0)) < .001) CompiledEffect = CompiledEffect_distribution_3_AntiMagicTeam_0;
            else if (abs((float)(distribution - 3)) < .001 && abs((float)(AntiMagicTeam - 0.003921569)) < .001) CompiledEffect = CompiledEffect_distribution_3_AntiMagicTeam_0p003921569;
            else if (abs((float)(distribution - 3)) < .001 && abs((float)(AntiMagicTeam - 0.007843138)) < .001) CompiledEffect = CompiledEffect_distribution_3_AntiMagicTeam_0p007843138;
            else if (abs((float)(distribution - 3)) < .001 && abs((float)(AntiMagicTeam - 0.01176471)) < .001) CompiledEffect = CompiledEffect_distribution_3_AntiMagicTeam_0p01176471;
            else if (abs((float)(distribution - 3)) < .001 && abs((float)(AntiMagicTeam - 0.01568628)) < .001) CompiledEffect = CompiledEffect_distribution_3_AntiMagicTeam_0p01568628;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Select_Texture"].SetValue(FragSharpMarshal.Marshal(Select));
            CompiledEffect.Parameters["fs_param_Select_size"].SetValue(FragSharpMarshal.Marshal(vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Select_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Units_Texture"].SetValue(FragSharpMarshal.Marshal(Units));
            CompiledEffect.Parameters["fs_param_Units_size"].SetValue(FragSharpMarshal.Marshal(vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Units_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Corpses_Texture"].SetValue(FragSharpMarshal.Marshal(Corpses));
            CompiledEffect.Parameters["fs_param_Corpses_size"].SetValue(FragSharpMarshal.Marshal(vec(Corpses.Width, Corpses.Height)));
            CompiledEffect.Parameters["fs_param_Corpses_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Corpses.Width, Corpses.Height)));
            CompiledEffect.Parameters["fs_param_AntiMagic_Texture"].SetValue(FragSharpMarshal.Marshal(AntiMagic));
            CompiledEffect.Parameters["fs_param_AntiMagic_size"].SetValue(FragSharpMarshal.Marshal(vec(AntiMagic.Width, AntiMagic.Height)));
            CompiledEffect.Parameters["fs_param_AntiMagic_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(AntiMagic.Width, AntiMagic.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class ActionSpawn_Data
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Select, Texture2D Data, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Select, Data);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Select, Texture2D Data, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Select, Data);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Select, Texture2D Data, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Select, Data);
        }
        public static void Using(Texture2D Select, Texture2D Data, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Select, Data);
        }
        public static void Using(Texture2D Select, Texture2D Data)
        {
            CompiledEffect.Parameters["fs_param_Select_Texture"].SetValue(FragSharpMarshal.Marshal(Select));
            CompiledEffect.Parameters["fs_param_Select_size"].SetValue(FragSharpMarshal.Marshal(vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Select_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}



namespace Game
{
    public partial class ActionSpawn_Unit
    {
        public static Effect CompiledEffect_raising_true;
        public static Effect CompiledEffect_raising_false;

        public static void Apply(Texture2D Select, Texture2D Units, float player, float team, float type, bool raising, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Select, Units, player, team, type, raising);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Select, Texture2D Units, float player, float team, float type, bool raising, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Select, Units, player, team, type, raising);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Select, Texture2D Units, float player, float team, float type, bool raising, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Select, Units, player, team, type, raising);
        }
        public static void Using(Texture2D Select, Texture2D Units, float player, float team, float type, bool raising, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Select, Units, player, team, type, raising);
        }
        public static void Using(Texture2D Select, Texture2D Units, float player, float team, float type, bool raising)
        {
            Effect CompiledEffect = null;

            if (raising == true) CompiledEffect = CompiledEffect_raising_true;
            else if (raising == false) CompiledEffect = CompiledEffect_raising_false;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Select_Texture"].SetValue(FragSharpMarshal.Marshal(Select));
            CompiledEffect.Parameters["fs_param_Select_size"].SetValue(FragSharpMarshal.Marshal(vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Select_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Units_Texture"].SetValue(FragSharpMarshal.Marshal(Units));
            CompiledEffect.Parameters["fs_param_Units_size"].SetValue(FragSharpMarshal.Marshal(vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Units_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_player"].SetValue(FragSharpMarshal.Marshal(player));
            CompiledEffect.Parameters["fs_param_team"].SetValue(FragSharpMarshal.Marshal(team));
            CompiledEffect.Parameters["fs_param_type"].SetValue(FragSharpMarshal.Marshal(type));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class ActionSpawn_Target
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Select, Texture2D Target, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Select, Target);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Select, Texture2D Target, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Select, Target);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Select, Texture2D Target, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Select, Target);
        }
        public static void Using(Texture2D Select, Texture2D Target, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Select, Target);
        }
        public static void Using(Texture2D Select, Texture2D Target)
        {
            CompiledEffect.Parameters["fs_param_Select_Texture"].SetValue(FragSharpMarshal.Marshal(Select));
            CompiledEffect.Parameters["fs_param_Select_size"].SetValue(FragSharpMarshal.Marshal(vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Select_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Target_Texture"].SetValue(FragSharpMarshal.Marshal(Target));
            CompiledEffect.Parameters["fs_param_Target_size"].SetValue(FragSharpMarshal.Marshal(vec(Target.Width, Target.Height)));
            CompiledEffect.Parameters["fs_param_Target_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Target.Width, Target.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class ActionSpawn_Corpse
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Select, Texture2D Corpses, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Select, Corpses);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Select, Texture2D Corpses, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Select, Corpses);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Select, Texture2D Corpses, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Select, Corpses);
        }
        public static void Using(Texture2D Select, Texture2D Corpses, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Select, Corpses);
        }
        public static void Using(Texture2D Select, Texture2D Corpses)
        {
            CompiledEffect.Parameters["fs_param_Select_Texture"].SetValue(FragSharpMarshal.Marshal(Select));
            CompiledEffect.Parameters["fs_param_Select_size"].SetValue(FragSharpMarshal.Marshal(vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Select_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Corpses_Texture"].SetValue(FragSharpMarshal.Marshal(Corpses));
            CompiledEffect.Parameters["fs_param_Corpses_size"].SetValue(FragSharpMarshal.Marshal(vec(Corpses.Width, Corpses.Height)));
            CompiledEffect.Parameters["fs_param_Corpses_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Corpses.Width, Corpses.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class HashReduce
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D PreviousLevel, Texture2D Noise, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(PreviousLevel, Noise);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D PreviousLevel, Texture2D Noise, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(PreviousLevel, Noise);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D PreviousLevel, Texture2D Noise, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(PreviousLevel, Noise);
        }
        public static void Using(Texture2D PreviousLevel, Texture2D Noise, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(PreviousLevel, Noise);
        }
        public static void Using(Texture2D PreviousLevel, Texture2D Noise)
        {
            CompiledEffect.Parameters["fs_param_PreviousLevel_Texture"].SetValue(FragSharpMarshal.Marshal(PreviousLevel));
            CompiledEffect.Parameters["fs_param_PreviousLevel_size"].SetValue(FragSharpMarshal.Marshal(vec(PreviousLevel.Width, PreviousLevel.Height)));
            CompiledEffect.Parameters["fs_param_PreviousLevel_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(PreviousLevel.Width, PreviousLevel.Height)));
            CompiledEffect.Parameters["fs_param_Noise_Texture"].SetValue(FragSharpMarshal.Marshal(Noise));
            CompiledEffect.Parameters["fs_param_Noise_size"].SetValue(FragSharpMarshal.Marshal(vec(Noise.Width, Noise.Height)));
            CompiledEffect.Parameters["fs_param_Noise_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Noise.Width, Noise.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Hash
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D F, Texture2D Noise, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(F, Noise);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D F, Texture2D Noise, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(F, Noise);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D F, Texture2D Noise, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(F, Noise);
        }
        public static void Using(Texture2D F, Texture2D Noise, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(F, Noise);
        }
        public static void Using(Texture2D F, Texture2D Noise)
        {
            CompiledEffect.Parameters["fs_param_F_Texture"].SetValue(FragSharpMarshal.Marshal(F));
            CompiledEffect.Parameters["fs_param_F_size"].SetValue(FragSharpMarshal.Marshal(vec(F.Width, F.Height)));
            CompiledEffect.Parameters["fs_param_F_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(F.Width, F.Height)));
            CompiledEffect.Parameters["fs_param_Noise_Texture"].SetValue(FragSharpMarshal.Marshal(Noise));
            CompiledEffect.Parameters["fs_param_Noise_size"].SetValue(FragSharpMarshal.Marshal(vec(Noise.Width, Noise.Height)));
            CompiledEffect.Parameters["fs_param_Noise_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Noise.Width, Noise.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class DataHash
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Data, Texture2D Noise, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Noise);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, Texture2D Noise, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Noise);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, Texture2D Noise, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Noise);
        }
        public static void Using(Texture2D Data, Texture2D Noise, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Noise);
        }
        public static void Using(Texture2D Data, Texture2D Noise)
        {
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Noise_Texture"].SetValue(FragSharpMarshal.Marshal(Noise));
            CompiledEffect.Parameters["fs_param_Noise_size"].SetValue(FragSharpMarshal.Marshal(vec(Noise.Width, Noise.Height)));
            CompiledEffect.Parameters["fs_param_Noise_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Noise.Width, Noise.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class UpdateMagic
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Magic, Texture2D CurrentData, Texture2D PreviousData, Texture2D Corpses, Texture2D Necromancy, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Magic, CurrentData, PreviousData, Corpses, Necromancy);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Magic, Texture2D CurrentData, Texture2D PreviousData, Texture2D Corpses, Texture2D Necromancy, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Magic, CurrentData, PreviousData, Corpses, Necromancy);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Magic, Texture2D CurrentData, Texture2D PreviousData, Texture2D Corpses, Texture2D Necromancy, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Magic, CurrentData, PreviousData, Corpses, Necromancy);
        }
        public static void Using(Texture2D Magic, Texture2D CurrentData, Texture2D PreviousData, Texture2D Corpses, Texture2D Necromancy, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Magic, CurrentData, PreviousData, Corpses, Necromancy);
        }
        public static void Using(Texture2D Magic, Texture2D CurrentData, Texture2D PreviousData, Texture2D Corpses, Texture2D Necromancy)
        {
            CompiledEffect.Parameters["fs_param_Magic_Texture"].SetValue(FragSharpMarshal.Marshal(Magic));
            CompiledEffect.Parameters["fs_param_Magic_size"].SetValue(FragSharpMarshal.Marshal(vec(Magic.Width, Magic.Height)));
            CompiledEffect.Parameters["fs_param_Magic_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Magic.Width, Magic.Height)));
            CompiledEffect.Parameters["fs_param_CurrentData_Texture"].SetValue(FragSharpMarshal.Marshal(CurrentData));
            CompiledEffect.Parameters["fs_param_CurrentData_size"].SetValue(FragSharpMarshal.Marshal(vec(CurrentData.Width, CurrentData.Height)));
            CompiledEffect.Parameters["fs_param_CurrentData_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(CurrentData.Width, CurrentData.Height)));
            CompiledEffect.Parameters["fs_param_PreviousData_Texture"].SetValue(FragSharpMarshal.Marshal(PreviousData));
            CompiledEffect.Parameters["fs_param_PreviousData_size"].SetValue(FragSharpMarshal.Marshal(vec(PreviousData.Width, PreviousData.Height)));
            CompiledEffect.Parameters["fs_param_PreviousData_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(PreviousData.Width, PreviousData.Height)));
            CompiledEffect.Parameters["fs_param_Corpses_Texture"].SetValue(FragSharpMarshal.Marshal(Corpses));
            CompiledEffect.Parameters["fs_param_Corpses_size"].SetValue(FragSharpMarshal.Marshal(vec(Corpses.Width, Corpses.Height)));
            CompiledEffect.Parameters["fs_param_Corpses_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Corpses.Width, Corpses.Height)));
            CompiledEffect.Parameters["fs_param_Necromancy_Texture"].SetValue(FragSharpMarshal.Marshal(Necromancy));
            CompiledEffect.Parameters["fs_param_Necromancy_size"].SetValue(FragSharpMarshal.Marshal(vec(Necromancy.Width, Necromancy.Height)));
            CompiledEffect.Parameters["fs_param_Necromancy_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Necromancy.Width, Necromancy.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Kill
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Select, Texture2D Magic, Texture2D AntiMagic, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Select, Magic, AntiMagic);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Select, Texture2D Magic, Texture2D AntiMagic, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Select, Magic, AntiMagic);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Select, Texture2D Magic, Texture2D AntiMagic, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Select, Magic, AntiMagic);
        }
        public static void Using(Texture2D Select, Texture2D Magic, Texture2D AntiMagic, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Select, Magic, AntiMagic);
        }
        public static void Using(Texture2D Select, Texture2D Magic, Texture2D AntiMagic)
        {
            CompiledEffect.Parameters["fs_param_Select_Texture"].SetValue(FragSharpMarshal.Marshal(Select));
            CompiledEffect.Parameters["fs_param_Select_size"].SetValue(FragSharpMarshal.Marshal(vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Select_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Select.Width, Select.Height)));
            CompiledEffect.Parameters["fs_param_Magic_Texture"].SetValue(FragSharpMarshal.Marshal(Magic));
            CompiledEffect.Parameters["fs_param_Magic_size"].SetValue(FragSharpMarshal.Marshal(vec(Magic.Width, Magic.Height)));
            CompiledEffect.Parameters["fs_param_Magic_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Magic.Width, Magic.Height)));
            CompiledEffect.Parameters["fs_param_AntiMagic_Texture"].SetValue(FragSharpMarshal.Marshal(AntiMagic));
            CompiledEffect.Parameters["fs_param_AntiMagic_size"].SetValue(FragSharpMarshal.Marshal(vec(AntiMagic.Width, AntiMagic.Height)));
            CompiledEffect.Parameters["fs_param_AntiMagic_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(AntiMagic.Width, AntiMagic.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class PropagateNecromancyAuro
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Necromancy, Texture2D Data, Texture2D Units, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Necromancy, Data, Units);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Necromancy, Texture2D Data, Texture2D Units, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Necromancy, Data, Units);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Necromancy, Texture2D Data, Texture2D Units, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Necromancy, Data, Units);
        }
        public static void Using(Texture2D Necromancy, Texture2D Data, Texture2D Units, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Necromancy, Data, Units);
        }
        public static void Using(Texture2D Necromancy, Texture2D Data, Texture2D Units)
        {
            CompiledEffect.Parameters["fs_param_Necromancy_Texture"].SetValue(FragSharpMarshal.Marshal(Necromancy));
            CompiledEffect.Parameters["fs_param_Necromancy_size"].SetValue(FragSharpMarshal.Marshal(vec(Necromancy.Width, Necromancy.Height)));
            CompiledEffect.Parameters["fs_param_Necromancy_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Necromancy.Width, Necromancy.Height)));
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Units_Texture"].SetValue(FragSharpMarshal.Marshal(Units));
            CompiledEffect.Parameters["fs_param_Units_size"].SetValue(FragSharpMarshal.Marshal(vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Units_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Units.Width, Units.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class PropagateAntiMagicAuro
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D AntiMagic, Texture2D Data, Texture2D Units, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(AntiMagic, Data, Units);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D AntiMagic, Texture2D Data, Texture2D Units, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(AntiMagic, Data, Units);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D AntiMagic, Texture2D Data, Texture2D Units, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(AntiMagic, Data, Units);
        }
        public static void Using(Texture2D AntiMagic, Texture2D Data, Texture2D Units, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(AntiMagic, Data, Units);
        }
        public static void Using(Texture2D AntiMagic, Texture2D Data, Texture2D Units)
        {
            CompiledEffect.Parameters["fs_param_AntiMagic_Texture"].SetValue(FragSharpMarshal.Marshal(AntiMagic));
            CompiledEffect.Parameters["fs_param_AntiMagic_size"].SetValue(FragSharpMarshal.Marshal(vec(AntiMagic.Width, AntiMagic.Height)));
            CompiledEffect.Parameters["fs_param_AntiMagic_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(AntiMagic.Width, AntiMagic.Height)));
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Units_Texture"].SetValue(FragSharpMarshal.Marshal(Units));
            CompiledEffect.Parameters["fs_param_Units_size"].SetValue(FragSharpMarshal.Marshal(vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Units_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Units.Width, Units.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Identity
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Field, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Field);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Field, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Field);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Field, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Field);
        }
        public static void Using(Texture2D Field, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Field);
        }
        public static void Using(Texture2D Field)
        {
            CompiledEffect.Parameters["fs_param_Field_Texture"].SetValue(FragSharpMarshal.Marshal(Field));
            CompiledEffect.Parameters["fs_param_Field_size"].SetValue(FragSharpMarshal.Marshal(vec(Field.Width, Field.Height)));
            CompiledEffect.Parameters["fs_param_Field_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Field.Width, Field.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}





namespace Game
{
    public partial class Shift
    {
        public static Effect CompiledEffect_dir_0p003921569;
        public static Effect CompiledEffect_dir_0p007843138;
        public static Effect CompiledEffect_dir_0p01176471;
        public static Effect CompiledEffect_dir_0p01568628;

        public static void Apply(Texture2D Random, float dir, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Random, dir);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Random, float dir, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Random, dir);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Random, float dir, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Random, dir);
        }
        public static void Using(Texture2D Random, float dir, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Random, dir);
        }
        public static void Using(Texture2D Random, float dir)
        {
            Effect CompiledEffect = null;

            if (abs((float)(dir - 0.003921569)) < .001) CompiledEffect = CompiledEffect_dir_0p003921569;
            else if (abs((float)(dir - 0.007843138)) < .001) CompiledEffect = CompiledEffect_dir_0p007843138;
            else if (abs((float)(dir - 0.01176471)) < .001) CompiledEffect = CompiledEffect_dir_0p01176471;
            else if (abs((float)(dir - 0.01568628)) < .001) CompiledEffect = CompiledEffect_dir_0p01568628;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Random_Texture"].SetValue(FragSharpMarshal.Marshal(Random));
            CompiledEffect.Parameters["fs_param_Random_size"].SetValue(FragSharpMarshal.Marshal(vec(Random.Width, Random.Height)));
            CompiledEffect.Parameters["fs_param_Random_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Random.Width, Random.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class SetTeams
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Units, Texture2D Data, PlayerTuple Teams, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Units, Data, Teams);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Units, Texture2D Data, PlayerTuple Teams, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Units, Data, Teams);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Units, Texture2D Data, PlayerTuple Teams, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Units, Data, Teams);
        }
        public static void Using(Texture2D Units, Texture2D Data, PlayerTuple Teams, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Units, Data, Teams);
        }
        public static void Using(Texture2D Units, Texture2D Data, PlayerTuple Teams)
        {
            CompiledEffect.Parameters["fs_param_Units_Texture"].SetValue(FragSharpMarshal.Marshal(Units));
            CompiledEffect.Parameters["fs_param_Units_size"].SetValue(FragSharpMarshal.Marshal(vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Units_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Teams"].SetValue(FragSharpMarshal.Marshal(Teams));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class UnitMigrate
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Units, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Units);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Units, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Units);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Units, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Units);
        }
        public static void Using(Texture2D Units, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Units);
        }
        public static void Using(Texture2D Units)
        {
            CompiledEffect.Parameters["fs_param_Units_Texture"].SetValue(FragSharpMarshal.Marshal(Units));
            CompiledEffect.Parameters["fs_param_Units_size"].SetValue(FragSharpMarshal.Marshal(vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Units_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Units.Width, Units.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class BenchmarkTest_TextureLookup4x4
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D s1, Texture2D s2, Texture2D s3, Texture2D s4, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(s1, s2, s3, s4);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D s1, Texture2D s2, Texture2D s3, Texture2D s4, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(s1, s2, s3, s4);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D s1, Texture2D s2, Texture2D s3, Texture2D s4, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(s1, s2, s3, s4);
        }
        public static void Using(Texture2D s1, Texture2D s2, Texture2D s3, Texture2D s4, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(s1, s2, s3, s4);
        }
        public static void Using(Texture2D s1, Texture2D s2, Texture2D s3, Texture2D s4)
        {
            CompiledEffect.Parameters["fs_param_s1_Texture"].SetValue(FragSharpMarshal.Marshal(s1));
            CompiledEffect.Parameters["fs_param_s1_size"].SetValue(FragSharpMarshal.Marshal(vec(s1.Width, s1.Height)));
            CompiledEffect.Parameters["fs_param_s1_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(s1.Width, s1.Height)));
            CompiledEffect.Parameters["fs_param_s2_Texture"].SetValue(FragSharpMarshal.Marshal(s2));
            CompiledEffect.Parameters["fs_param_s2_size"].SetValue(FragSharpMarshal.Marshal(vec(s2.Width, s2.Height)));
            CompiledEffect.Parameters["fs_param_s2_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(s2.Width, s2.Height)));
            CompiledEffect.Parameters["fs_param_s3_Texture"].SetValue(FragSharpMarshal.Marshal(s3));
            CompiledEffect.Parameters["fs_param_s3_size"].SetValue(FragSharpMarshal.Marshal(vec(s3.Width, s3.Height)));
            CompiledEffect.Parameters["fs_param_s3_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(s3.Width, s3.Height)));
            CompiledEffect.Parameters["fs_param_s4_Texture"].SetValue(FragSharpMarshal.Marshal(s4));
            CompiledEffect.Parameters["fs_param_s4_size"].SetValue(FragSharpMarshal.Marshal(vec(s4.Width, s4.Height)));
            CompiledEffect.Parameters["fs_param_s4_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(s4.Width, s4.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class BenchmarkTest_TextureLookup1x1
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D s, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(s);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D s, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(s);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D s, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(s);
        }
        public static void Using(Texture2D s, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(s);
        }
        public static void Using(Texture2D s)
        {
            CompiledEffect.Parameters["fs_param_s_Texture"].SetValue(FragSharpMarshal.Marshal(s));
            CompiledEffect.Parameters["fs_param_s_size"].SetValue(FragSharpMarshal.Marshal(vec(s.Width, s.Height)));
            CompiledEffect.Parameters["fs_param_s_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(s.Width, s.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class BenchmarkTest_TextureLookupWithConditional
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D s, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(s);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D s, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(s);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D s, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(s);
        }
        public static void Using(Texture2D s, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(s);
        }
        public static void Using(Texture2D s)
        {
            CompiledEffect.Parameters["fs_param_s_Texture"].SetValue(FragSharpMarshal.Marshal(s));
            CompiledEffect.Parameters["fs_param_s_size"].SetValue(FragSharpMarshal.Marshal(vec(s.Width, s.Height)));
            CompiledEffect.Parameters["fs_param_s_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(s.Width, s.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class BenchmarkTest_TextureLookupWithComplexMath
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D s, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(s);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D s, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(s);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D s, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(s);
        }
        public static void Using(Texture2D s, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(s);
        }
        public static void Using(Texture2D s)
        {
            CompiledEffect.Parameters["fs_param_s_Texture"].SetValue(FragSharpMarshal.Marshal(s));
            CompiledEffect.Parameters["fs_param_s_size"].SetValue(FragSharpMarshal.Marshal(vec(s.Width, s.Height)));
            CompiledEffect.Parameters["fs_param_s_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(s.Width, s.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class BenchmarkTest_TextureLookup1x5
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D s, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(s);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D s, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(s);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D s, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(s);
        }
        public static void Using(Texture2D s, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(s);
        }
        public static void Using(Texture2D s)
        {
            CompiledEffect.Parameters["fs_param_s_Texture"].SetValue(FragSharpMarshal.Marshal(s));
            CompiledEffect.Parameters["fs_param_s_size"].SetValue(FragSharpMarshal.Marshal(vec(s.Width, s.Height)));
            CompiledEffect.Parameters["fs_param_s_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(s.Width, s.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class BenchmarkTest_MathPacking
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D s, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(s);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D s, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(s);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D s, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(s);
        }
        public static void Using(Texture2D s, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(s);
        }
        public static void Using(Texture2D s)
        {
            CompiledEffect.Parameters["fs_param_s_Texture"].SetValue(FragSharpMarshal.Marshal(s));
            CompiledEffect.Parameters["fs_param_s_size"].SetValue(FragSharpMarshal.Marshal(vec(s.Width, s.Height)));
            CompiledEffect.Parameters["fs_param_s_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(s.Width, s.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class BenchmarkTest_MathPackingVec
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D s, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(s);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D s, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(s);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D s, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(s);
        }
        public static void Using(Texture2D s, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(s);
        }
        public static void Using(Texture2D s)
        {
            CompiledEffect.Parameters["fs_param_s_Texture"].SetValue(FragSharpMarshal.Marshal(s));
            CompiledEffect.Parameters["fs_param_s_size"].SetValue(FragSharpMarshal.Marshal(vec(s.Width, s.Height)));
            CompiledEffect.Parameters["fs_param_s_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(s.Width, s.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}






namespace Game
{
    public partial class DrawTerritoryPlayer
    {
        public static Effect CompiledEffect_player_0;
        public static Effect CompiledEffect_player_0p003921569;
        public static Effect CompiledEffect_player_0p007843138;
        public static Effect CompiledEffect_player_0p01176471;
        public static Effect CompiledEffect_player_0p01568628;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Path, float player, float cutoff, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Path, player, cutoff);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Path, float player, float cutoff, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Path, player, cutoff);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Path, float player, float cutoff, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Path, player, cutoff);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Path, float player, float cutoff, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Path, player, cutoff);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Path, float player, float cutoff)
        {
            Effect CompiledEffect = null;

            if (abs((float)(player - 0)) < .001) CompiledEffect = CompiledEffect_player_0;
            else if (abs((float)(player - 0.003921569)) < .001) CompiledEffect = CompiledEffect_player_0p003921569;
            else if (abs((float)(player - 0.007843138)) < .001) CompiledEffect = CompiledEffect_player_0p007843138;
            else if (abs((float)(player - 0.01176471)) < .001) CompiledEffect = CompiledEffect_player_0p01176471;
            else if (abs((float)(player - 0.01568628)) < .001) CompiledEffect = CompiledEffect_player_0p01568628;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_Path_Texture"].SetValue(FragSharpMarshal.Marshal(Path));
            CompiledEffect.Parameters["fs_param_Path_size"].SetValue(FragSharpMarshal.Marshal(vec(Path.Width, Path.Height)));
            CompiledEffect.Parameters["fs_param_Path_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Path.Width, Path.Height)));
            CompiledEffect.Parameters["fs_param_cutoff"].SetValue(FragSharpMarshal.Marshal(cutoff));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class DrawTerritoryColors
    {
        public static Effect CompiledEffect;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Path, float blend, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Path, blend);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Path, float blend, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Path, blend);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Path, float blend, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Path, blend);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Path, float blend, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Path, blend);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Path, float blend)
        {
            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_Path_Texture"].SetValue(FragSharpMarshal.Marshal(Path));
            CompiledEffect.Parameters["fs_param_Path_size"].SetValue(FragSharpMarshal.Marshal(vec(Path.Width, Path.Height)));
            CompiledEffect.Parameters["fs_param_Path_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Path.Width, Path.Height)));
            CompiledEffect.Parameters["fs_param_blend"].SetValue(FragSharpMarshal.Marshal(blend));
            CompiledEffect.Parameters["fs_param_FarColor_Texture"].SetValue(FragSharpMarshal.Marshal(FarColor));
            CompiledEffect.Parameters["fs_param_FarColor_size"].SetValue(FragSharpMarshal.Marshal(vec(FarColor.Width, FarColor.Height)));
            CompiledEffect.Parameters["fs_param_FarColor_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(FarColor.Width, FarColor.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}






namespace Game
{
    public partial class DrawBuildingsIcons
    {
        public static Effect CompiledEffect_player_0;
        public static Effect CompiledEffect_player_0p003921569;
        public static Effect CompiledEffect_player_0p007843138;
        public static Effect CompiledEffect_player_0p01176471;
        public static Effect CompiledEffect_player_0p01568628;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D BuildingDistances, Texture2D Data, Texture2D Unit, float blend, float radius, float player, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, BuildingDistances, Data, Unit, blend, radius, player);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D BuildingDistances, Texture2D Data, Texture2D Unit, float blend, float radius, float player, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, BuildingDistances, Data, Unit, blend, radius, player);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D BuildingDistances, Texture2D Data, Texture2D Unit, float blend, float radius, float player, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, BuildingDistances, Data, Unit, blend, radius, player);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D BuildingDistances, Texture2D Data, Texture2D Unit, float blend, float radius, float player, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, BuildingDistances, Data, Unit, blend, radius, player);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D BuildingDistances, Texture2D Data, Texture2D Unit, float blend, float radius, float player)
        {
            Effect CompiledEffect = null;

            if (abs((float)(player - 0)) < .001) CompiledEffect = CompiledEffect_player_0;
            else if (abs((float)(player - 0.003921569)) < .001) CompiledEffect = CompiledEffect_player_0p003921569;
            else if (abs((float)(player - 0.007843138)) < .001) CompiledEffect = CompiledEffect_player_0p007843138;
            else if (abs((float)(player - 0.01176471)) < .001) CompiledEffect = CompiledEffect_player_0p01176471;
            else if (abs((float)(player - 0.01568628)) < .001) CompiledEffect = CompiledEffect_player_0p01568628;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_BuildingDistances_Texture"].SetValue(FragSharpMarshal.Marshal(BuildingDistances));
            CompiledEffect.Parameters["fs_param_BuildingDistances_size"].SetValue(FragSharpMarshal.Marshal(vec(BuildingDistances.Width, BuildingDistances.Height)));
            CompiledEffect.Parameters["fs_param_BuildingDistances_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(BuildingDistances.Width, BuildingDistances.Height)));
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_blend"].SetValue(FragSharpMarshal.Marshal(blend));
            CompiledEffect.Parameters["fs_param_radius"].SetValue(FragSharpMarshal.Marshal(radius));
            CompiledEffect.Parameters["fs_param_FarColor_Texture"].SetValue(FragSharpMarshal.Marshal(FarColor));
            CompiledEffect.Parameters["fs_param_FarColor_size"].SetValue(FragSharpMarshal.Marshal(vec(FarColor.Width, FarColor.Height)));
            CompiledEffect.Parameters["fs_param_FarColor_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(FarColor.Width, FarColor.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}






namespace Game
{
    public partial class DrawBuildings
    {
        public static Effect CompiledEffect_player_0;
        public static Effect CompiledEffect_player_0p003921569;
        public static Effect CompiledEffect_player_0p007843138;
        public static Effect CompiledEffect_player_0p01176471;
        public static Effect CompiledEffect_player_0p01568628;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Buildings, Texture2D Units, Texture2D Texture, Texture2D Explosion, float player, float s, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Buildings, Units, Texture, Explosion, player, s);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Buildings, Texture2D Units, Texture2D Texture, Texture2D Explosion, float player, float s, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Buildings, Units, Texture, Explosion, player, s);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Buildings, Texture2D Units, Texture2D Texture, Texture2D Explosion, float player, float s, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Buildings, Units, Texture, Explosion, player, s);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Buildings, Texture2D Units, Texture2D Texture, Texture2D Explosion, float player, float s, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Buildings, Units, Texture, Explosion, player, s);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Buildings, Texture2D Units, Texture2D Texture, Texture2D Explosion, float player, float s)
        {
            Effect CompiledEffect = null;

            if (abs((float)(player - 0)) < .001) CompiledEffect = CompiledEffect_player_0;
            else if (abs((float)(player - 0.003921569)) < .001) CompiledEffect = CompiledEffect_player_0p003921569;
            else if (abs((float)(player - 0.007843138)) < .001) CompiledEffect = CompiledEffect_player_0p007843138;
            else if (abs((float)(player - 0.01176471)) < .001) CompiledEffect = CompiledEffect_player_0p01176471;
            else if (abs((float)(player - 0.01568628)) < .001) CompiledEffect = CompiledEffect_player_0p01568628;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_Buildings_Texture"].SetValue(FragSharpMarshal.Marshal(Buildings));
            CompiledEffect.Parameters["fs_param_Buildings_size"].SetValue(FragSharpMarshal.Marshal(vec(Buildings.Width, Buildings.Height)));
            CompiledEffect.Parameters["fs_param_Buildings_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Buildings.Width, Buildings.Height)));
            CompiledEffect.Parameters["fs_param_Units_Texture"].SetValue(FragSharpMarshal.Marshal(Units));
            CompiledEffect.Parameters["fs_param_Units_size"].SetValue(FragSharpMarshal.Marshal(vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Units_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Texture_Texture"].SetValue(FragSharpMarshal.Marshal(Texture));
            CompiledEffect.Parameters["fs_param_Texture_size"].SetValue(FragSharpMarshal.Marshal(vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_Texture_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_Explosion_Texture"].SetValue(FragSharpMarshal.Marshal(Explosion));
            CompiledEffect.Parameters["fs_param_Explosion_size"].SetValue(FragSharpMarshal.Marshal(vec(Explosion.Width, Explosion.Height)));
            CompiledEffect.Parameters["fs_param_Explosion_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Explosion.Width, Explosion.Height)));
            CompiledEffect.Parameters["fs_param_s"].SetValue(FragSharpMarshal.Marshal(s));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class DrawCorpses
    {
        public static Effect CompiledEffect;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Corpses, Texture2D Texture, float blend, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Corpses, Texture, blend);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Corpses, Texture2D Texture, float blend, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Corpses, Texture, blend);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Corpses, Texture2D Texture, float blend, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Corpses, Texture, blend);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Corpses, Texture2D Texture, float blend, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Corpses, Texture, blend);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Corpses, Texture2D Texture, float blend)
        {
            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_Corpses_Texture"].SetValue(FragSharpMarshal.Marshal(Corpses));
            CompiledEffect.Parameters["fs_param_Corpses_size"].SetValue(FragSharpMarshal.Marshal(vec(Corpses.Width, Corpses.Height)));
            CompiledEffect.Parameters["fs_param_Corpses_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Corpses.Width, Corpses.Height)));
            CompiledEffect.Parameters["fs_param_Texture_Texture"].SetValue(FragSharpMarshal.Marshal(Texture));
            CompiledEffect.Parameters["fs_param_Texture_size"].SetValue(FragSharpMarshal.Marshal(vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_Texture_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_blend"].SetValue(FragSharpMarshal.Marshal(blend));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class DrawPrecomputation_Cur
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Current, Texture2D Previous, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Current, Previous);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Current, Texture2D Previous, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Current, Previous);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Current, Texture2D Previous, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Current, Previous);
        }
        public static void Using(Texture2D Current, Texture2D Previous, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Current, Previous);
        }
        public static void Using(Texture2D Current, Texture2D Previous)
        {
            CompiledEffect.Parameters["fs_param_Current_Texture"].SetValue(FragSharpMarshal.Marshal(Current));
            CompiledEffect.Parameters["fs_param_Current_size"].SetValue(FragSharpMarshal.Marshal(vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Current_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Previous_Texture"].SetValue(FragSharpMarshal.Marshal(Previous));
            CompiledEffect.Parameters["fs_param_Previous_size"].SetValue(FragSharpMarshal.Marshal(vec(Previous.Width, Previous.Height)));
            CompiledEffect.Parameters["fs_param_Previous_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Previous.Width, Previous.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class DrawPrecomputation_Pre
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Current, Texture2D Previous, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Current, Previous);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Current, Texture2D Previous, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Current, Previous);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Current, Texture2D Previous, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Current, Previous);
        }
        public static void Using(Texture2D Current, Texture2D Previous, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Current, Previous);
        }
        public static void Using(Texture2D Current, Texture2D Previous)
        {
            CompiledEffect.Parameters["fs_param_Current_Texture"].SetValue(FragSharpMarshal.Marshal(Current));
            CompiledEffect.Parameters["fs_param_Current_size"].SetValue(FragSharpMarshal.Marshal(vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Current_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Previous_Texture"].SetValue(FragSharpMarshal.Marshal(Previous));
            CompiledEffect.Parameters["fs_param_Previous_size"].SetValue(FragSharpMarshal.Marshal(vec(Previous.Width, Previous.Height)));
            CompiledEffect.Parameters["fs_param_Previous_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Previous.Width, Previous.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class DrawSolid
    {
        public static Effect CompiledEffect;

        public static void Apply(vec4 cameraPos, float cameraAspect, color clr, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, clr);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, color clr, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, clr);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, color clr, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, clr);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, color clr, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, clr);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, color clr)
        {
            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_clr"].SetValue(FragSharpMarshal.Marshal(clr));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class DrawTexture
    {
        public static Effect CompiledEffect;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Texture, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Texture);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Texture, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Texture);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Texture, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Texture);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Texture, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Texture);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Texture)
        {
            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_Texture_Texture"].SetValue(FragSharpMarshal.Marshal(Texture));
            CompiledEffect.Parameters["fs_param_Texture_size"].SetValue(FragSharpMarshal.Marshal(vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_Texture_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Texture.Width, Texture.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class DrawColoredTexture
    {
        public static Effect CompiledEffect;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Texture, color clr, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Texture, clr);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Texture, color clr, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Texture, clr);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Texture, color clr, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Texture, clr);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Texture, color clr, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Texture, clr);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Texture, color clr)
        {
            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_Texture_Texture"].SetValue(FragSharpMarshal.Marshal(Texture));
            CompiledEffect.Parameters["fs_param_Texture_size"].SetValue(FragSharpMarshal.Marshal(vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_Texture_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_clr"].SetValue(FragSharpMarshal.Marshal(clr));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class DrawTextureSmooth
    {
        public static Effect CompiledEffect;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Texture, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Texture);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Texture, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Texture);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Texture, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Texture);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Texture, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Texture);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Texture)
        {
            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_Texture_Texture"].SetValue(FragSharpMarshal.Marshal(Texture));
            CompiledEffect.Parameters["fs_param_Texture_size"].SetValue(FragSharpMarshal.Marshal(vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_Texture_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Texture.Width, Texture.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class DyingDragonLordGridCoord
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D CurrentUnits, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(CurrentUnits);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D CurrentUnits, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(CurrentUnits);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D CurrentUnits, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(CurrentUnits);
        }
        public static void Using(Texture2D CurrentUnits, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(CurrentUnits);
        }
        public static void Using(Texture2D CurrentUnits)
        {
            CompiledEffect.Parameters["fs_param_CurrentUnits_Texture"].SetValue(FragSharpMarshal.Marshal(CurrentUnits));
            CompiledEffect.Parameters["fs_param_CurrentUnits_size"].SetValue(FragSharpMarshal.Marshal(vec(CurrentUnits.Width, CurrentUnits.Height)));
            CompiledEffect.Parameters["fs_param_CurrentUnits_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(CurrentUnits.Width, CurrentUnits.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}






namespace Game
{
    public partial class DragonLordGridCoord
    {
        public static Effect CompiledEffect_player_0;
        public static Effect CompiledEffect_player_0p003921569;
        public static Effect CompiledEffect_player_0p007843138;
        public static Effect CompiledEffect_player_0p01176471;
        public static Effect CompiledEffect_player_0p01568628;

        public static void Apply(Texture2D CurrentUnits, float player, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(CurrentUnits, player);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D CurrentUnits, float player, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(CurrentUnits, player);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D CurrentUnits, float player, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(CurrentUnits, player);
        }
        public static void Using(Texture2D CurrentUnits, float player, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(CurrentUnits, player);
        }
        public static void Using(Texture2D CurrentUnits, float player)
        {
            Effect CompiledEffect = null;

            if (abs((float)(player - 0)) < .001) CompiledEffect = CompiledEffect_player_0;
            else if (abs((float)(player - 0.003921569)) < .001) CompiledEffect = CompiledEffect_player_0p003921569;
            else if (abs((float)(player - 0.007843138)) < .001) CompiledEffect = CompiledEffect_player_0p007843138;
            else if (abs((float)(player - 0.01176471)) < .001) CompiledEffect = CompiledEffect_player_0p01176471;
            else if (abs((float)(player - 0.01568628)) < .001) CompiledEffect = CompiledEffect_player_0p01568628;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_CurrentUnits_Texture"].SetValue(FragSharpMarshal.Marshal(CurrentUnits));
            CompiledEffect.Parameters["fs_param_CurrentUnits_size"].SetValue(FragSharpMarshal.Marshal(vec(CurrentUnits.Width, CurrentUnits.Height)));
            CompiledEffect.Parameters["fs_param_CurrentUnits_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(CurrentUnits.Width, CurrentUnits.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class BoundingTr
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Data, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data);
        }
        public static void Using(Texture2D Data, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data);
        }
        public static void Using(Texture2D Data)
        {
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class BoundingBl
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Data, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data);
        }
        public static void Using(Texture2D Data, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data);
        }
        public static void Using(Texture2D Data)
        {
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class _BoundingTr
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D PreviousLevel, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(PreviousLevel);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D PreviousLevel, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(PreviousLevel);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D PreviousLevel, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(PreviousLevel);
        }
        public static void Using(Texture2D PreviousLevel, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(PreviousLevel);
        }
        public static void Using(Texture2D PreviousLevel)
        {
            CompiledEffect.Parameters["fs_param_PreviousLevel_Texture"].SetValue(FragSharpMarshal.Marshal(PreviousLevel));
            CompiledEffect.Parameters["fs_param_PreviousLevel_size"].SetValue(FragSharpMarshal.Marshal(vec(PreviousLevel.Width, PreviousLevel.Height)));
            CompiledEffect.Parameters["fs_param_PreviousLevel_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(PreviousLevel.Width, PreviousLevel.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class _BoundingBl
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D PreviousLevel, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(PreviousLevel);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D PreviousLevel, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(PreviousLevel);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D PreviousLevel, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(PreviousLevel);
        }
        public static void Using(Texture2D PreviousLevel, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(PreviousLevel);
        }
        public static void Using(Texture2D PreviousLevel)
        {
            CompiledEffect.Parameters["fs_param_PreviousLevel_Texture"].SetValue(FragSharpMarshal.Marshal(PreviousLevel));
            CompiledEffect.Parameters["fs_param_PreviousLevel_size"].SetValue(FragSharpMarshal.Marshal(vec(PreviousLevel.Width, PreviousLevel.Height)));
            CompiledEffect.Parameters["fs_param_PreviousLevel_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(PreviousLevel.Width, PreviousLevel.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class _PreferTl
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D PreviousLevel, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(PreviousLevel);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D PreviousLevel, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(PreviousLevel);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D PreviousLevel, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(PreviousLevel);
        }
        public static void Using(Texture2D PreviousLevel, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(PreviousLevel);
        }
        public static void Using(Texture2D PreviousLevel)
        {
            CompiledEffect.Parameters["fs_param_PreviousLevel_Texture"].SetValue(FragSharpMarshal.Marshal(PreviousLevel));
            CompiledEffect.Parameters["fs_param_PreviousLevel_size"].SetValue(FragSharpMarshal.Marshal(vec(PreviousLevel.Width, PreviousLevel.Height)));
            CompiledEffect.Parameters["fs_param_PreviousLevel_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(PreviousLevel.Width, PreviousLevel.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class CheckForAttacking
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Unit, Texture2D Data, Texture2D Random, Texture2D Magic, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Data, Random, Magic);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Unit, Texture2D Data, Texture2D Random, Texture2D Magic, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Data, Random, Magic);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Unit, Texture2D Data, Texture2D Random, Texture2D Magic, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Data, Random, Magic);
        }
        public static void Using(Texture2D Unit, Texture2D Data, Texture2D Random, Texture2D Magic, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Data, Random, Magic);
        }
        public static void Using(Texture2D Unit, Texture2D Data, Texture2D Random, Texture2D Magic)
        {
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Random_Texture"].SetValue(FragSharpMarshal.Marshal(Random));
            CompiledEffect.Parameters["fs_param_Random_size"].SetValue(FragSharpMarshal.Marshal(vec(Random.Width, Random.Height)));
            CompiledEffect.Parameters["fs_param_Random_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Random.Width, Random.Height)));
            CompiledEffect.Parameters["fs_param_Magic_Texture"].SetValue(FragSharpMarshal.Marshal(Magic));
            CompiledEffect.Parameters["fs_param_Magic_size"].SetValue(FragSharpMarshal.Marshal(vec(Magic.Width, Magic.Height)));
            CompiledEffect.Parameters["fs_param_Magic_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Magic.Width, Magic.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class BuildingInfusion_Delete
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Unit, Texture2D Building, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Building);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Unit, Texture2D Building, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Building);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Unit, Texture2D Building, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Building);
        }
        public static void Using(Texture2D Unit, Texture2D Building, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Building);
        }
        public static void Using(Texture2D Unit, Texture2D Building)
        {
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Building_Texture"].SetValue(FragSharpMarshal.Marshal(Building));
            CompiledEffect.Parameters["fs_param_Building_size"].SetValue(FragSharpMarshal.Marshal(vec(Building.Width, Building.Height)));
            CompiledEffect.Parameters["fs_param_Building_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Building.Width, Building.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class BuildingInfusion_Selection
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Unit, Texture2D Building, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Building);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Unit, Texture2D Building, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Building);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Unit, Texture2D Building, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Building);
        }
        public static void Using(Texture2D Unit, Texture2D Building, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Building);
        }
        public static void Using(Texture2D Unit, Texture2D Building)
        {
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Building_Texture"].SetValue(FragSharpMarshal.Marshal(Building));
            CompiledEffect.Parameters["fs_param_Building_size"].SetValue(FragSharpMarshal.Marshal(vec(Building.Width, Building.Height)));
            CompiledEffect.Parameters["fs_param_Building_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Building.Width, Building.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class BuildingDiffusion_Selection
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Unit, Texture2D Building, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Building);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Unit, Texture2D Building, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Building);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Unit, Texture2D Building, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Building);
        }
        public static void Using(Texture2D Unit, Texture2D Building, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Building);
        }
        public static void Using(Texture2D Unit, Texture2D Building)
        {
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Building_Texture"].SetValue(FragSharpMarshal.Marshal(Building));
            CompiledEffect.Parameters["fs_param_Building_size"].SetValue(FragSharpMarshal.Marshal(vec(Building.Width, Building.Height)));
            CompiledEffect.Parameters["fs_param_Building_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Building.Width, Building.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class BuildingInfusion_Data
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Unit, Texture2D Building, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Building);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Unit, Texture2D Building, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Building);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Unit, Texture2D Building, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Building);
        }
        public static void Using(Texture2D Unit, Texture2D Building, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Building);
        }
        public static void Using(Texture2D Unit, Texture2D Building)
        {
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Building_Texture"].SetValue(FragSharpMarshal.Marshal(Building));
            CompiledEffect.Parameters["fs_param_Building_size"].SetValue(FragSharpMarshal.Marshal(vec(Building.Width, Building.Height)));
            CompiledEffect.Parameters["fs_param_Building_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Building.Width, Building.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class BuildingDiffusion_Data
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Unit, Texture2D Building, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Building);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Unit, Texture2D Building, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Building);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Unit, Texture2D Building, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Building);
        }
        public static void Using(Texture2D Unit, Texture2D Building, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Building);
        }
        public static void Using(Texture2D Unit, Texture2D Building)
        {
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Building_Texture"].SetValue(FragSharpMarshal.Marshal(Building));
            CompiledEffect.Parameters["fs_param_Building_size"].SetValue(FragSharpMarshal.Marshal(vec(Building.Width, Building.Height)));
            CompiledEffect.Parameters["fs_param_Building_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Building.Width, Building.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class BuildingDiffusion_Target
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Unit, Texture2D Building, Texture2D TargetData, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Building, TargetData);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Unit, Texture2D Building, Texture2D TargetData, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Building, TargetData);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Unit, Texture2D Building, Texture2D TargetData, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Building, TargetData);
        }
        public static void Using(Texture2D Unit, Texture2D Building, Texture2D TargetData, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Building, TargetData);
        }
        public static void Using(Texture2D Unit, Texture2D Building, Texture2D TargetData)
        {
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Building_Texture"].SetValue(FragSharpMarshal.Marshal(Building));
            CompiledEffect.Parameters["fs_param_Building_size"].SetValue(FragSharpMarshal.Marshal(vec(Building.Width, Building.Height)));
            CompiledEffect.Parameters["fs_param_Building_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Building.Width, Building.Height)));
            CompiledEffect.Parameters["fs_param_TargetData_Texture"].SetValue(FragSharpMarshal.Marshal(TargetData));
            CompiledEffect.Parameters["fs_param_TargetData_size"].SetValue(FragSharpMarshal.Marshal(vec(TargetData.Width, TargetData.Height)));
            CompiledEffect.Parameters["fs_param_TargetData_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(TargetData.Width, TargetData.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class SpawnUnits
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Unit, Texture2D CurrentData, Texture2D PreviousData, Texture2D Random, Texture2D Magic, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, CurrentData, PreviousData, Random, Magic);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Unit, Texture2D CurrentData, Texture2D PreviousData, Texture2D Random, Texture2D Magic, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, CurrentData, PreviousData, Random, Magic);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Unit, Texture2D CurrentData, Texture2D PreviousData, Texture2D Random, Texture2D Magic, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, CurrentData, PreviousData, Random, Magic);
        }
        public static void Using(Texture2D Unit, Texture2D CurrentData, Texture2D PreviousData, Texture2D Random, Texture2D Magic, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, CurrentData, PreviousData, Random, Magic);
        }
        public static void Using(Texture2D Unit, Texture2D CurrentData, Texture2D PreviousData, Texture2D Random, Texture2D Magic)
        {
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_CurrentData_Texture"].SetValue(FragSharpMarshal.Marshal(CurrentData));
            CompiledEffect.Parameters["fs_param_CurrentData_size"].SetValue(FragSharpMarshal.Marshal(vec(CurrentData.Width, CurrentData.Height)));
            CompiledEffect.Parameters["fs_param_CurrentData_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(CurrentData.Width, CurrentData.Height)));
            CompiledEffect.Parameters["fs_param_PreviousData_Texture"].SetValue(FragSharpMarshal.Marshal(PreviousData));
            CompiledEffect.Parameters["fs_param_PreviousData_size"].SetValue(FragSharpMarshal.Marshal(vec(PreviousData.Width, PreviousData.Height)));
            CompiledEffect.Parameters["fs_param_PreviousData_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(PreviousData.Width, PreviousData.Height)));
            CompiledEffect.Parameters["fs_param_Random_Texture"].SetValue(FragSharpMarshal.Marshal(Random));
            CompiledEffect.Parameters["fs_param_Random_size"].SetValue(FragSharpMarshal.Marshal(vec(Random.Width, Random.Height)));
            CompiledEffect.Parameters["fs_param_Random_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Random.Width, Random.Height)));
            CompiledEffect.Parameters["fs_param_Magic_Texture"].SetValue(FragSharpMarshal.Marshal(Magic));
            CompiledEffect.Parameters["fs_param_Magic_size"].SetValue(FragSharpMarshal.Marshal(vec(Magic.Width, Magic.Height)));
            CompiledEffect.Parameters["fs_param_Magic_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Magic.Width, Magic.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class SetSpawn_Unit
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Unit, Texture2D Data, Texture2D Magic, PlayerTuple Teams, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Data, Magic, Teams);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Unit, Texture2D Data, Texture2D Magic, PlayerTuple Teams, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Data, Magic, Teams);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Unit, Texture2D Data, Texture2D Magic, PlayerTuple Teams, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Data, Magic, Teams);
        }
        public static void Using(Texture2D Unit, Texture2D Data, Texture2D Magic, PlayerTuple Teams, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Data, Magic, Teams);
        }
        public static void Using(Texture2D Unit, Texture2D Data, Texture2D Magic, PlayerTuple Teams)
        {
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Magic_Texture"].SetValue(FragSharpMarshal.Marshal(Magic));
            CompiledEffect.Parameters["fs_param_Magic_size"].SetValue(FragSharpMarshal.Marshal(vec(Magic.Width, Magic.Height)));
            CompiledEffect.Parameters["fs_param_Magic_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Magic.Width, Magic.Height)));
            CompiledEffect.Parameters["fs_param_Teams"].SetValue(FragSharpMarshal.Marshal(Teams));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class SetSpawn_Target
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Target, Texture2D Data, Texture2D Random, Texture2D Magic, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Target, Data, Random, Magic);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Target, Texture2D Data, Texture2D Random, Texture2D Magic, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Target, Data, Random, Magic);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Target, Texture2D Data, Texture2D Random, Texture2D Magic, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Target, Data, Random, Magic);
        }
        public static void Using(Texture2D Target, Texture2D Data, Texture2D Random, Texture2D Magic, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Target, Data, Random, Magic);
        }
        public static void Using(Texture2D Target, Texture2D Data, Texture2D Random, Texture2D Magic)
        {
            CompiledEffect.Parameters["fs_param_Target_Texture"].SetValue(FragSharpMarshal.Marshal(Target));
            CompiledEffect.Parameters["fs_param_Target_size"].SetValue(FragSharpMarshal.Marshal(vec(Target.Width, Target.Height)));
            CompiledEffect.Parameters["fs_param_Target_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Target.Width, Target.Height)));
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Random_Texture"].SetValue(FragSharpMarshal.Marshal(Random));
            CompiledEffect.Parameters["fs_param_Random_size"].SetValue(FragSharpMarshal.Marshal(vec(Random.Width, Random.Height)));
            CompiledEffect.Parameters["fs_param_Random_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Random.Width, Random.Height)));
            CompiledEffect.Parameters["fs_param_Magic_Texture"].SetValue(FragSharpMarshal.Marshal(Magic));
            CompiledEffect.Parameters["fs_param_Magic_size"].SetValue(FragSharpMarshal.Marshal(vec(Magic.Width, Magic.Height)));
            CompiledEffect.Parameters["fs_param_Magic_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Magic.Width, Magic.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class SetSpawn_Data
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Unit, Texture2D Data, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Data);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Unit, Texture2D Data, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Data);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Unit, Texture2D Data, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Data);
        }
        public static void Using(Texture2D Unit, Texture2D Data, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Data);
        }
        public static void Using(Texture2D Unit, Texture2D Data)
        {
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class AddCorpses
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Unit, Texture2D Data, Texture2D Corpses, Texture2D Magic, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Data, Corpses, Magic);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Unit, Texture2D Data, Texture2D Corpses, Texture2D Magic, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Data, Corpses, Magic);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Unit, Texture2D Data, Texture2D Corpses, Texture2D Magic, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Unit, Data, Corpses, Magic);
        }
        public static void Using(Texture2D Unit, Texture2D Data, Texture2D Corpses, Texture2D Magic, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Unit, Data, Corpses, Magic);
        }
        public static void Using(Texture2D Unit, Texture2D Data, Texture2D Corpses, Texture2D Magic)
        {
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Corpses_Texture"].SetValue(FragSharpMarshal.Marshal(Corpses));
            CompiledEffect.Parameters["fs_param_Corpses_size"].SetValue(FragSharpMarshal.Marshal(vec(Corpses.Width, Corpses.Height)));
            CompiledEffect.Parameters["fs_param_Corpses_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Corpses.Width, Corpses.Height)));
            CompiledEffect.Parameters["fs_param_Magic_Texture"].SetValue(FragSharpMarshal.Marshal(Magic));
            CompiledEffect.Parameters["fs_param_Magic_size"].SetValue(FragSharpMarshal.Marshal(vec(Magic.Width, Magic.Height)));
            CompiledEffect.Parameters["fs_param_Magic_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Magic.Width, Magic.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class UpdateRandomField
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Random, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Random);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Random, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Random);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Random, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Random);
        }
        public static void Using(Texture2D Random, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Random);
        }
        public static void Using(Texture2D Random)
        {
            CompiledEffect.Parameters["fs_param_Random_Texture"].SetValue(FragSharpMarshal.Marshal(Random));
            CompiledEffect.Parameters["fs_param_Random_size"].SetValue(FragSharpMarshal.Marshal(vec(Random.Width, Random.Height)));
            CompiledEffect.Parameters["fs_param_Random_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Random.Width, Random.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}











namespace Game
{
    public partial class DoUnitSummary_1
    {
        public static Effect CompiledEffect_player_0_only_selected_true;
        public static Effect CompiledEffect_player_0_only_selected_false;
        public static Effect CompiledEffect_player_0p003921569_only_selected_true;
        public static Effect CompiledEffect_player_0p003921569_only_selected_false;
        public static Effect CompiledEffect_player_0p007843138_only_selected_true;
        public static Effect CompiledEffect_player_0p007843138_only_selected_false;
        public static Effect CompiledEffect_player_0p01176471_only_selected_true;
        public static Effect CompiledEffect_player_0p01176471_only_selected_false;
        public static Effect CompiledEffect_player_0p01568628_only_selected_true;
        public static Effect CompiledEffect_player_0p01568628_only_selected_false;

        public static void Apply(Texture2D Data, Texture2D Units, float player, bool only_selected, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Units, player, only_selected);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, Texture2D Units, float player, bool only_selected, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Units, player, only_selected);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, Texture2D Units, float player, bool only_selected, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Units, player, only_selected);
        }
        public static void Using(Texture2D Data, Texture2D Units, float player, bool only_selected, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Units, player, only_selected);
        }
        public static void Using(Texture2D Data, Texture2D Units, float player, bool only_selected)
        {
            Effect CompiledEffect = null;

            if (abs((float)(player - 0)) < .001 && only_selected == true) CompiledEffect = CompiledEffect_player_0_only_selected_true;
            else if (abs((float)(player - 0)) < .001 && only_selected == false) CompiledEffect = CompiledEffect_player_0_only_selected_false;
            else if (abs((float)(player - 0.003921569)) < .001 && only_selected == true) CompiledEffect = CompiledEffect_player_0p003921569_only_selected_true;
            else if (abs((float)(player - 0.003921569)) < .001 && only_selected == false) CompiledEffect = CompiledEffect_player_0p003921569_only_selected_false;
            else if (abs((float)(player - 0.007843138)) < .001 && only_selected == true) CompiledEffect = CompiledEffect_player_0p007843138_only_selected_true;
            else if (abs((float)(player - 0.007843138)) < .001 && only_selected == false) CompiledEffect = CompiledEffect_player_0p007843138_only_selected_false;
            else if (abs((float)(player - 0.01176471)) < .001 && only_selected == true) CompiledEffect = CompiledEffect_player_0p01176471_only_selected_true;
            else if (abs((float)(player - 0.01176471)) < .001 && only_selected == false) CompiledEffect = CompiledEffect_player_0p01176471_only_selected_false;
            else if (abs((float)(player - 0.01568628)) < .001 && only_selected == true) CompiledEffect = CompiledEffect_player_0p01568628_only_selected_true;
            else if (abs((float)(player - 0.01568628)) < .001 && only_selected == false) CompiledEffect = CompiledEffect_player_0p01568628_only_selected_false;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Units_Texture"].SetValue(FragSharpMarshal.Marshal(Units));
            CompiledEffect.Parameters["fs_param_Units_size"].SetValue(FragSharpMarshal.Marshal(vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Units_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Units.Width, Units.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}











namespace Game
{
    public partial class DoUnitSummary_2
    {
        public static Effect CompiledEffect_player_0_only_selected_true;
        public static Effect CompiledEffect_player_0_only_selected_false;
        public static Effect CompiledEffect_player_0p003921569_only_selected_true;
        public static Effect CompiledEffect_player_0p003921569_only_selected_false;
        public static Effect CompiledEffect_player_0p007843138_only_selected_true;
        public static Effect CompiledEffect_player_0p007843138_only_selected_false;
        public static Effect CompiledEffect_player_0p01176471_only_selected_true;
        public static Effect CompiledEffect_player_0p01176471_only_selected_false;
        public static Effect CompiledEffect_player_0p01568628_only_selected_true;
        public static Effect CompiledEffect_player_0p01568628_only_selected_false;

        public static void Apply(Texture2D Data, Texture2D Units, float player, bool only_selected, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Units, player, only_selected);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, Texture2D Units, float player, bool only_selected, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Units, player, only_selected);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, Texture2D Units, float player, bool only_selected, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Units, player, only_selected);
        }
        public static void Using(Texture2D Data, Texture2D Units, float player, bool only_selected, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Units, player, only_selected);
        }
        public static void Using(Texture2D Data, Texture2D Units, float player, bool only_selected)
        {
            Effect CompiledEffect = null;

            if (abs((float)(player - 0)) < .001 && only_selected == true) CompiledEffect = CompiledEffect_player_0_only_selected_true;
            else if (abs((float)(player - 0)) < .001 && only_selected == false) CompiledEffect = CompiledEffect_player_0_only_selected_false;
            else if (abs((float)(player - 0.003921569)) < .001 && only_selected == true) CompiledEffect = CompiledEffect_player_0p003921569_only_selected_true;
            else if (abs((float)(player - 0.003921569)) < .001 && only_selected == false) CompiledEffect = CompiledEffect_player_0p003921569_only_selected_false;
            else if (abs((float)(player - 0.007843138)) < .001 && only_selected == true) CompiledEffect = CompiledEffect_player_0p007843138_only_selected_true;
            else if (abs((float)(player - 0.007843138)) < .001 && only_selected == false) CompiledEffect = CompiledEffect_player_0p007843138_only_selected_false;
            else if (abs((float)(player - 0.01176471)) < .001 && only_selected == true) CompiledEffect = CompiledEffect_player_0p01176471_only_selected_true;
            else if (abs((float)(player - 0.01176471)) < .001 && only_selected == false) CompiledEffect = CompiledEffect_player_0p01176471_only_selected_false;
            else if (abs((float)(player - 0.01568628)) < .001 && only_selected == true) CompiledEffect = CompiledEffect_player_0p01568628_only_selected_true;
            else if (abs((float)(player - 0.01568628)) < .001 && only_selected == false) CompiledEffect = CompiledEffect_player_0p01568628_only_selected_false;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Units_Texture"].SetValue(FragSharpMarshal.Marshal(Units));
            CompiledEffect.Parameters["fs_param_Units_size"].SetValue(FragSharpMarshal.Marshal(vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Units_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Units.Width, Units.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}









namespace Game
{
    public partial class CountUnitTypeForAllPlayers
    {
        public static Effect CompiledEffect_type_0p003921569;
        public static Effect CompiledEffect_type_0p007843138;
        public static Effect CompiledEffect_type_0p01176471;
        public static Effect CompiledEffect_type_0p01568628;
        public static Effect CompiledEffect_type_0p01960784;
        public static Effect CompiledEffect_type_0p02352941;
        public static Effect CompiledEffect_type_0p02745098;
        public static Effect CompiledEffect_type_0p03137255;

        public static void Apply(Texture2D Data, Texture2D Units, float type, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Units, type);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, Texture2D Units, float type, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Units, type);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, Texture2D Units, float type, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Units, type);
        }
        public static void Using(Texture2D Data, Texture2D Units, float type, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Units, type);
        }
        public static void Using(Texture2D Data, Texture2D Units, float type)
        {
            Effect CompiledEffect = null;

            if (abs((float)(type - 0.003921569)) < .001) CompiledEffect = CompiledEffect_type_0p003921569;
            else if (abs((float)(type - 0.007843138)) < .001) CompiledEffect = CompiledEffect_type_0p007843138;
            else if (abs((float)(type - 0.01176471)) < .001) CompiledEffect = CompiledEffect_type_0p01176471;
            else if (abs((float)(type - 0.01568628)) < .001) CompiledEffect = CompiledEffect_type_0p01568628;
            else if (abs((float)(type - 0.01960784)) < .001) CompiledEffect = CompiledEffect_type_0p01960784;
            else if (abs((float)(type - 0.02352941)) < .001) CompiledEffect = CompiledEffect_type_0p02352941;
            else if (abs((float)(type - 0.02745098)) < .001) CompiledEffect = CompiledEffect_type_0p02745098;
            else if (abs((float)(type - 0.03137255)) < .001) CompiledEffect = CompiledEffect_type_0p03137255;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Units_Texture"].SetValue(FragSharpMarshal.Marshal(Units));
            CompiledEffect.Parameters["fs_param_Units_size"].SetValue(FragSharpMarshal.Marshal(vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Units_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Units.Width, Units.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class CountReduce_4x1byte
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D PreviousLevel, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(PreviousLevel);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D PreviousLevel, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(PreviousLevel);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D PreviousLevel, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(PreviousLevel);
        }
        public static void Using(Texture2D PreviousLevel, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(PreviousLevel);
        }
        public static void Using(Texture2D PreviousLevel)
        {
            CompiledEffect.Parameters["fs_param_PreviousLevel_Texture"].SetValue(FragSharpMarshal.Marshal(PreviousLevel));
            CompiledEffect.Parameters["fs_param_PreviousLevel_size"].SetValue(FragSharpMarshal.Marshal(vec(PreviousLevel.Width, PreviousLevel.Height)));
            CompiledEffect.Parameters["fs_param_PreviousLevel_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(PreviousLevel.Width, PreviousLevel.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}






namespace Game
{
    public partial class CountUnits
    {
        public static Effect CompiledEffect_player_0;
        public static Effect CompiledEffect_player_0p003921569;
        public static Effect CompiledEffect_player_0p007843138;
        public static Effect CompiledEffect_player_0p01176471;
        public static Effect CompiledEffect_player_0p01568628;

        public static void Apply(Texture2D Data, Texture2D Units, float player, bool only_selected, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Units, player, only_selected);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, Texture2D Units, float player, bool only_selected, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Units, player, only_selected);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, Texture2D Units, float player, bool only_selected, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Units, player, only_selected);
        }
        public static void Using(Texture2D Data, Texture2D Units, float player, bool only_selected, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Units, player, only_selected);
        }
        public static void Using(Texture2D Data, Texture2D Units, float player, bool only_selected)
        {
            Effect CompiledEffect = null;

            if (abs((float)(player - 0)) < .001) CompiledEffect = CompiledEffect_player_0;
            else if (abs((float)(player - 0.003921569)) < .001) CompiledEffect = CompiledEffect_player_0p003921569;
            else if (abs((float)(player - 0.007843138)) < .001) CompiledEffect = CompiledEffect_player_0p007843138;
            else if (abs((float)(player - 0.01176471)) < .001) CompiledEffect = CompiledEffect_player_0p01176471;
            else if (abs((float)(player - 0.01568628)) < .001) CompiledEffect = CompiledEffect_player_0p01568628;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Units_Texture"].SetValue(FragSharpMarshal.Marshal(Units));
            CompiledEffect.Parameters["fs_param_Units_size"].SetValue(FragSharpMarshal.Marshal(vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Units_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_only_selected"].SetValue(FragSharpMarshal.Marshal(only_selected));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}






namespace Game
{
    public partial class CountAllUnits
    {
        public static Effect CompiledEffect_player_0;
        public static Effect CompiledEffect_player_0p003921569;
        public static Effect CompiledEffect_player_0p007843138;
        public static Effect CompiledEffect_player_0p01176471;
        public static Effect CompiledEffect_player_0p01568628;

        public static void Apply(Texture2D Data, Texture2D Units, float player, bool only_selected, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Units, player, only_selected);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, Texture2D Units, float player, bool only_selected, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Units, player, only_selected);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, Texture2D Units, float player, bool only_selected, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Units, player, only_selected);
        }
        public static void Using(Texture2D Data, Texture2D Units, float player, bool only_selected, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Units, player, only_selected);
        }
        public static void Using(Texture2D Data, Texture2D Units, float player, bool only_selected)
        {
            Effect CompiledEffect = null;

            if (abs((float)(player - 0)) < .001) CompiledEffect = CompiledEffect_player_0;
            else if (abs((float)(player - 0.003921569)) < .001) CompiledEffect = CompiledEffect_player_0p003921569;
            else if (abs((float)(player - 0.007843138)) < .001) CompiledEffect = CompiledEffect_player_0p007843138;
            else if (abs((float)(player - 0.01176471)) < .001) CompiledEffect = CompiledEffect_player_0p01176471;
            else if (abs((float)(player - 0.01568628)) < .001) CompiledEffect = CompiledEffect_player_0p01568628;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Units_Texture"].SetValue(FragSharpMarshal.Marshal(Units));
            CompiledEffect.Parameters["fs_param_Units_size"].SetValue(FragSharpMarshal.Marshal(vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Units_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_only_selected"].SetValue(FragSharpMarshal.Marshal(only_selected));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class CountMovingAttackingDyingStanding
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Data, Texture2D Units, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Units);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, Texture2D Units, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Units);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, Texture2D Units, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Units);
        }
        public static void Using(Texture2D Data, Texture2D Units, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Units);
        }
        public static void Using(Texture2D Data, Texture2D Units)
        {
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Units_Texture"].SetValue(FragSharpMarshal.Marshal(Units));
            CompiledEffect.Parameters["fs_param_Units_size"].SetValue(FragSharpMarshal.Marshal(vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Units_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Units.Width, Units.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class CountReduce_3byte1byte
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D PreviousLevel, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(PreviousLevel);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D PreviousLevel, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(PreviousLevel);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D PreviousLevel, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(PreviousLevel);
        }
        public static void Using(Texture2D PreviousLevel, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(PreviousLevel);
        }
        public static void Using(Texture2D PreviousLevel)
        {
            CompiledEffect.Parameters["fs_param_PreviousLevel_Texture"].SetValue(FragSharpMarshal.Marshal(PreviousLevel));
            CompiledEffect.Parameters["fs_param_PreviousLevel_size"].SetValue(FragSharpMarshal.Marshal(vec(PreviousLevel.Width, PreviousLevel.Height)));
            CompiledEffect.Parameters["fs_param_PreviousLevel_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(PreviousLevel.Width, PreviousLevel.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}






namespace Game
{
    public partial class SetSelectedAction
    {
        public static Effect CompiledEffect_player_0;
        public static Effect CompiledEffect_player_0p003921569;
        public static Effect CompiledEffect_player_0p007843138;
        public static Effect CompiledEffect_player_0p01176471;
        public static Effect CompiledEffect_player_0p01568628;

        public static void Apply(Texture2D Data, Texture2D Unit, float action, float player, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Unit, action, player);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, Texture2D Unit, float action, float player, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Unit, action, player);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, Texture2D Unit, float action, float player, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Unit, action, player);
        }
        public static void Using(Texture2D Data, Texture2D Unit, float action, float player, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Unit, action, player);
        }
        public static void Using(Texture2D Data, Texture2D Unit, float action, float player)
        {
            Effect CompiledEffect = null;

            if (abs((float)(player - 0)) < .001) CompiledEffect = CompiledEffect_player_0;
            else if (abs((float)(player - 0.003921569)) < .001) CompiledEffect = CompiledEffect_player_0p003921569;
            else if (abs((float)(player - 0.007843138)) < .001) CompiledEffect = CompiledEffect_player_0p007843138;
            else if (abs((float)(player - 0.01176471)) < .001) CompiledEffect = CompiledEffect_player_0p01176471;
            else if (abs((float)(player - 0.01568628)) < .001) CompiledEffect = CompiledEffect_player_0p01568628;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_action"].SetValue(FragSharpMarshal.Marshal(action));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


























namespace Game
{
    public partial class ActionAttackSquare
    {
        public static Effect CompiledEffect_player_0_filter_0;
        public static Effect CompiledEffect_player_0_filter_1;
        public static Effect CompiledEffect_player_0_filter_2;
        public static Effect CompiledEffect_player_0_filter_3;
        public static Effect CompiledEffect_player_0_filter_4;
        public static Effect CompiledEffect_player_0p003921569_filter_0;
        public static Effect CompiledEffect_player_0p003921569_filter_1;
        public static Effect CompiledEffect_player_0p003921569_filter_2;
        public static Effect CompiledEffect_player_0p003921569_filter_3;
        public static Effect CompiledEffect_player_0p003921569_filter_4;
        public static Effect CompiledEffect_player_0p007843138_filter_0;
        public static Effect CompiledEffect_player_0p007843138_filter_1;
        public static Effect CompiledEffect_player_0p007843138_filter_2;
        public static Effect CompiledEffect_player_0p007843138_filter_3;
        public static Effect CompiledEffect_player_0p007843138_filter_4;
        public static Effect CompiledEffect_player_0p01176471_filter_0;
        public static Effect CompiledEffect_player_0p01176471_filter_1;
        public static Effect CompiledEffect_player_0p01176471_filter_2;
        public static Effect CompiledEffect_player_0p01176471_filter_3;
        public static Effect CompiledEffect_player_0p01176471_filter_4;
        public static Effect CompiledEffect_player_0p01568628_filter_0;
        public static Effect CompiledEffect_player_0p01568628_filter_1;
        public static Effect CompiledEffect_player_0p01568628_filter_2;
        public static Effect CompiledEffect_player_0p01568628_filter_3;
        public static Effect CompiledEffect_player_0p01568628_filter_4;

        public static void Apply(Texture2D Data, Texture2D Unit, Texture2D TargetData, vec2 Destination_BL, vec2 Selection_BL, vec2 ConversionRatio, float player, float filter, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Unit, TargetData, Destination_BL, Selection_BL, ConversionRatio, player, filter);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, Texture2D Unit, Texture2D TargetData, vec2 Destination_BL, vec2 Selection_BL, vec2 ConversionRatio, float player, float filter, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Unit, TargetData, Destination_BL, Selection_BL, ConversionRatio, player, filter);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, Texture2D Unit, Texture2D TargetData, vec2 Destination_BL, vec2 Selection_BL, vec2 ConversionRatio, float player, float filter, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Unit, TargetData, Destination_BL, Selection_BL, ConversionRatio, player, filter);
        }
        public static void Using(Texture2D Data, Texture2D Unit, Texture2D TargetData, vec2 Destination_BL, vec2 Selection_BL, vec2 ConversionRatio, float player, float filter, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Unit, TargetData, Destination_BL, Selection_BL, ConversionRatio, player, filter);
        }
        public static void Using(Texture2D Data, Texture2D Unit, Texture2D TargetData, vec2 Destination_BL, vec2 Selection_BL, vec2 ConversionRatio, float player, float filter)
        {
            Effect CompiledEffect = null;

            if (abs((float)(player - 0)) < .001 && abs((float)(filter - 0)) < .001) CompiledEffect = CompiledEffect_player_0_filter_0;
            else if (abs((float)(player - 0)) < .001 && abs((float)(filter - 1)) < .001) CompiledEffect = CompiledEffect_player_0_filter_1;
            else if (abs((float)(player - 0)) < .001 && abs((float)(filter - 2)) < .001) CompiledEffect = CompiledEffect_player_0_filter_2;
            else if (abs((float)(player - 0)) < .001 && abs((float)(filter - 3)) < .001) CompiledEffect = CompiledEffect_player_0_filter_3;
            else if (abs((float)(player - 0)) < .001 && abs((float)(filter - 4)) < .001) CompiledEffect = CompiledEffect_player_0_filter_4;
            else if (abs((float)(player - 0.003921569)) < .001 && abs((float)(filter - 0)) < .001) CompiledEffect = CompiledEffect_player_0p003921569_filter_0;
            else if (abs((float)(player - 0.003921569)) < .001 && abs((float)(filter - 1)) < .001) CompiledEffect = CompiledEffect_player_0p003921569_filter_1;
            else if (abs((float)(player - 0.003921569)) < .001 && abs((float)(filter - 2)) < .001) CompiledEffect = CompiledEffect_player_0p003921569_filter_2;
            else if (abs((float)(player - 0.003921569)) < .001 && abs((float)(filter - 3)) < .001) CompiledEffect = CompiledEffect_player_0p003921569_filter_3;
            else if (abs((float)(player - 0.003921569)) < .001 && abs((float)(filter - 4)) < .001) CompiledEffect = CompiledEffect_player_0p003921569_filter_4;
            else if (abs((float)(player - 0.007843138)) < .001 && abs((float)(filter - 0)) < .001) CompiledEffect = CompiledEffect_player_0p007843138_filter_0;
            else if (abs((float)(player - 0.007843138)) < .001 && abs((float)(filter - 1)) < .001) CompiledEffect = CompiledEffect_player_0p007843138_filter_1;
            else if (abs((float)(player - 0.007843138)) < .001 && abs((float)(filter - 2)) < .001) CompiledEffect = CompiledEffect_player_0p007843138_filter_2;
            else if (abs((float)(player - 0.007843138)) < .001 && abs((float)(filter - 3)) < .001) CompiledEffect = CompiledEffect_player_0p007843138_filter_3;
            else if (abs((float)(player - 0.007843138)) < .001 && abs((float)(filter - 4)) < .001) CompiledEffect = CompiledEffect_player_0p007843138_filter_4;
            else if (abs((float)(player - 0.01176471)) < .001 && abs((float)(filter - 0)) < .001) CompiledEffect = CompiledEffect_player_0p01176471_filter_0;
            else if (abs((float)(player - 0.01176471)) < .001 && abs((float)(filter - 1)) < .001) CompiledEffect = CompiledEffect_player_0p01176471_filter_1;
            else if (abs((float)(player - 0.01176471)) < .001 && abs((float)(filter - 2)) < .001) CompiledEffect = CompiledEffect_player_0p01176471_filter_2;
            else if (abs((float)(player - 0.01176471)) < .001 && abs((float)(filter - 3)) < .001) CompiledEffect = CompiledEffect_player_0p01176471_filter_3;
            else if (abs((float)(player - 0.01176471)) < .001 && abs((float)(filter - 4)) < .001) CompiledEffect = CompiledEffect_player_0p01176471_filter_4;
            else if (abs((float)(player - 0.01568628)) < .001 && abs((float)(filter - 0)) < .001) CompiledEffect = CompiledEffect_player_0p01568628_filter_0;
            else if (abs((float)(player - 0.01568628)) < .001 && abs((float)(filter - 1)) < .001) CompiledEffect = CompiledEffect_player_0p01568628_filter_1;
            else if (abs((float)(player - 0.01568628)) < .001 && abs((float)(filter - 2)) < .001) CompiledEffect = CompiledEffect_player_0p01568628_filter_2;
            else if (abs((float)(player - 0.01568628)) < .001 && abs((float)(filter - 3)) < .001) CompiledEffect = CompiledEffect_player_0p01568628_filter_3;
            else if (abs((float)(player - 0.01568628)) < .001 && abs((float)(filter - 4)) < .001) CompiledEffect = CompiledEffect_player_0p01568628_filter_4;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_TargetData_Texture"].SetValue(FragSharpMarshal.Marshal(TargetData));
            CompiledEffect.Parameters["fs_param_TargetData_size"].SetValue(FragSharpMarshal.Marshal(vec(TargetData.Width, TargetData.Height)));
            CompiledEffect.Parameters["fs_param_TargetData_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(TargetData.Width, TargetData.Height)));
            CompiledEffect.Parameters["fs_param_Destination_BL"].SetValue(FragSharpMarshal.Marshal(Destination_BL));
            CompiledEffect.Parameters["fs_param_Selection_BL"].SetValue(FragSharpMarshal.Marshal(Selection_BL));
            CompiledEffect.Parameters["fs_param_ConversionRatio"].SetValue(FragSharpMarshal.Marshal(ConversionRatio));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


























namespace Game
{
    public partial class ActionAttackPoint
    {
        public static Effect CompiledEffect_player_0_filter_0;
        public static Effect CompiledEffect_player_0_filter_1;
        public static Effect CompiledEffect_player_0_filter_2;
        public static Effect CompiledEffect_player_0_filter_3;
        public static Effect CompiledEffect_player_0_filter_4;
        public static Effect CompiledEffect_player_0p003921569_filter_0;
        public static Effect CompiledEffect_player_0p003921569_filter_1;
        public static Effect CompiledEffect_player_0p003921569_filter_2;
        public static Effect CompiledEffect_player_0p003921569_filter_3;
        public static Effect CompiledEffect_player_0p003921569_filter_4;
        public static Effect CompiledEffect_player_0p007843138_filter_0;
        public static Effect CompiledEffect_player_0p007843138_filter_1;
        public static Effect CompiledEffect_player_0p007843138_filter_2;
        public static Effect CompiledEffect_player_0p007843138_filter_3;
        public static Effect CompiledEffect_player_0p007843138_filter_4;
        public static Effect CompiledEffect_player_0p01176471_filter_0;
        public static Effect CompiledEffect_player_0p01176471_filter_1;
        public static Effect CompiledEffect_player_0p01176471_filter_2;
        public static Effect CompiledEffect_player_0p01176471_filter_3;
        public static Effect CompiledEffect_player_0p01176471_filter_4;
        public static Effect CompiledEffect_player_0p01568628_filter_0;
        public static Effect CompiledEffect_player_0p01568628_filter_1;
        public static Effect CompiledEffect_player_0p01568628_filter_2;
        public static Effect CompiledEffect_player_0p01568628_filter_3;
        public static Effect CompiledEffect_player_0p01568628_filter_4;

        public static void Apply(Texture2D Data, Texture2D Unit, Texture2D TargetData, vec2 Destination, float player, float filter, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Unit, TargetData, Destination, player, filter);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, Texture2D Unit, Texture2D TargetData, vec2 Destination, float player, float filter, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Unit, TargetData, Destination, player, filter);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, Texture2D Unit, Texture2D TargetData, vec2 Destination, float player, float filter, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Unit, TargetData, Destination, player, filter);
        }
        public static void Using(Texture2D Data, Texture2D Unit, Texture2D TargetData, vec2 Destination, float player, float filter, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Unit, TargetData, Destination, player, filter);
        }
        public static void Using(Texture2D Data, Texture2D Unit, Texture2D TargetData, vec2 Destination, float player, float filter)
        {
            Effect CompiledEffect = null;

            if (abs((float)(player - 0)) < .001 && abs((float)(filter - 0)) < .001) CompiledEffect = CompiledEffect_player_0_filter_0;
            else if (abs((float)(player - 0)) < .001 && abs((float)(filter - 1)) < .001) CompiledEffect = CompiledEffect_player_0_filter_1;
            else if (abs((float)(player - 0)) < .001 && abs((float)(filter - 2)) < .001) CompiledEffect = CompiledEffect_player_0_filter_2;
            else if (abs((float)(player - 0)) < .001 && abs((float)(filter - 3)) < .001) CompiledEffect = CompiledEffect_player_0_filter_3;
            else if (abs((float)(player - 0)) < .001 && abs((float)(filter - 4)) < .001) CompiledEffect = CompiledEffect_player_0_filter_4;
            else if (abs((float)(player - 0.003921569)) < .001 && abs((float)(filter - 0)) < .001) CompiledEffect = CompiledEffect_player_0p003921569_filter_0;
            else if (abs((float)(player - 0.003921569)) < .001 && abs((float)(filter - 1)) < .001) CompiledEffect = CompiledEffect_player_0p003921569_filter_1;
            else if (abs((float)(player - 0.003921569)) < .001 && abs((float)(filter - 2)) < .001) CompiledEffect = CompiledEffect_player_0p003921569_filter_2;
            else if (abs((float)(player - 0.003921569)) < .001 && abs((float)(filter - 3)) < .001) CompiledEffect = CompiledEffect_player_0p003921569_filter_3;
            else if (abs((float)(player - 0.003921569)) < .001 && abs((float)(filter - 4)) < .001) CompiledEffect = CompiledEffect_player_0p003921569_filter_4;
            else if (abs((float)(player - 0.007843138)) < .001 && abs((float)(filter - 0)) < .001) CompiledEffect = CompiledEffect_player_0p007843138_filter_0;
            else if (abs((float)(player - 0.007843138)) < .001 && abs((float)(filter - 1)) < .001) CompiledEffect = CompiledEffect_player_0p007843138_filter_1;
            else if (abs((float)(player - 0.007843138)) < .001 && abs((float)(filter - 2)) < .001) CompiledEffect = CompiledEffect_player_0p007843138_filter_2;
            else if (abs((float)(player - 0.007843138)) < .001 && abs((float)(filter - 3)) < .001) CompiledEffect = CompiledEffect_player_0p007843138_filter_3;
            else if (abs((float)(player - 0.007843138)) < .001 && abs((float)(filter - 4)) < .001) CompiledEffect = CompiledEffect_player_0p007843138_filter_4;
            else if (abs((float)(player - 0.01176471)) < .001 && abs((float)(filter - 0)) < .001) CompiledEffect = CompiledEffect_player_0p01176471_filter_0;
            else if (abs((float)(player - 0.01176471)) < .001 && abs((float)(filter - 1)) < .001) CompiledEffect = CompiledEffect_player_0p01176471_filter_1;
            else if (abs((float)(player - 0.01176471)) < .001 && abs((float)(filter - 2)) < .001) CompiledEffect = CompiledEffect_player_0p01176471_filter_2;
            else if (abs((float)(player - 0.01176471)) < .001 && abs((float)(filter - 3)) < .001) CompiledEffect = CompiledEffect_player_0p01176471_filter_3;
            else if (abs((float)(player - 0.01176471)) < .001 && abs((float)(filter - 4)) < .001) CompiledEffect = CompiledEffect_player_0p01176471_filter_4;
            else if (abs((float)(player - 0.01568628)) < .001 && abs((float)(filter - 0)) < .001) CompiledEffect = CompiledEffect_player_0p01568628_filter_0;
            else if (abs((float)(player - 0.01568628)) < .001 && abs((float)(filter - 1)) < .001) CompiledEffect = CompiledEffect_player_0p01568628_filter_1;
            else if (abs((float)(player - 0.01568628)) < .001 && abs((float)(filter - 2)) < .001) CompiledEffect = CompiledEffect_player_0p01568628_filter_2;
            else if (abs((float)(player - 0.01568628)) < .001 && abs((float)(filter - 3)) < .001) CompiledEffect = CompiledEffect_player_0p01568628_filter_3;
            else if (abs((float)(player - 0.01568628)) < .001 && abs((float)(filter - 4)) < .001) CompiledEffect = CompiledEffect_player_0p01568628_filter_4;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_TargetData_Texture"].SetValue(FragSharpMarshal.Marshal(TargetData));
            CompiledEffect.Parameters["fs_param_TargetData_size"].SetValue(FragSharpMarshal.Marshal(vec(TargetData.Width, TargetData.Height)));
            CompiledEffect.Parameters["fs_param_TargetData_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(TargetData.Width, TargetData.Height)));
            CompiledEffect.Parameters["fs_param_Destination"].SetValue(FragSharpMarshal.Marshal(Destination));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


























namespace Game
{
    public partial class ActionAttack2
    {
        public static Effect CompiledEffect_player_0_filter_0;
        public static Effect CompiledEffect_player_0_filter_1;
        public static Effect CompiledEffect_player_0_filter_2;
        public static Effect CompiledEffect_player_0_filter_3;
        public static Effect CompiledEffect_player_0_filter_4;
        public static Effect CompiledEffect_player_0p003921569_filter_0;
        public static Effect CompiledEffect_player_0p003921569_filter_1;
        public static Effect CompiledEffect_player_0p003921569_filter_2;
        public static Effect CompiledEffect_player_0p003921569_filter_3;
        public static Effect CompiledEffect_player_0p003921569_filter_4;
        public static Effect CompiledEffect_player_0p007843138_filter_0;
        public static Effect CompiledEffect_player_0p007843138_filter_1;
        public static Effect CompiledEffect_player_0p007843138_filter_2;
        public static Effect CompiledEffect_player_0p007843138_filter_3;
        public static Effect CompiledEffect_player_0p007843138_filter_4;
        public static Effect CompiledEffect_player_0p01176471_filter_0;
        public static Effect CompiledEffect_player_0p01176471_filter_1;
        public static Effect CompiledEffect_player_0p01176471_filter_2;
        public static Effect CompiledEffect_player_0p01176471_filter_3;
        public static Effect CompiledEffect_player_0p01176471_filter_4;
        public static Effect CompiledEffect_player_0p01568628_filter_0;
        public static Effect CompiledEffect_player_0p01568628_filter_1;
        public static Effect CompiledEffect_player_0p01568628_filter_2;
        public static Effect CompiledEffect_player_0p01568628_filter_3;
        public static Effect CompiledEffect_player_0p01568628_filter_4;

        public static void Apply(Texture2D Data, Texture2D Unit, Texture2D Extra, vec2 Destination, float player, float filter, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Unit, Extra, Destination, player, filter);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, Texture2D Unit, Texture2D Extra, vec2 Destination, float player, float filter, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Unit, Extra, Destination, player, filter);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, Texture2D Unit, Texture2D Extra, vec2 Destination, float player, float filter, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Unit, Extra, Destination, player, filter);
        }
        public static void Using(Texture2D Data, Texture2D Unit, Texture2D Extra, vec2 Destination, float player, float filter, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Unit, Extra, Destination, player, filter);
        }
        public static void Using(Texture2D Data, Texture2D Unit, Texture2D Extra, vec2 Destination, float player, float filter)
        {
            Effect CompiledEffect = null;

            if (abs((float)(player - 0)) < .001 && abs((float)(filter - 0)) < .001) CompiledEffect = CompiledEffect_player_0_filter_0;
            else if (abs((float)(player - 0)) < .001 && abs((float)(filter - 1)) < .001) CompiledEffect = CompiledEffect_player_0_filter_1;
            else if (abs((float)(player - 0)) < .001 && abs((float)(filter - 2)) < .001) CompiledEffect = CompiledEffect_player_0_filter_2;
            else if (abs((float)(player - 0)) < .001 && abs((float)(filter - 3)) < .001) CompiledEffect = CompiledEffect_player_0_filter_3;
            else if (abs((float)(player - 0)) < .001 && abs((float)(filter - 4)) < .001) CompiledEffect = CompiledEffect_player_0_filter_4;
            else if (abs((float)(player - 0.003921569)) < .001 && abs((float)(filter - 0)) < .001) CompiledEffect = CompiledEffect_player_0p003921569_filter_0;
            else if (abs((float)(player - 0.003921569)) < .001 && abs((float)(filter - 1)) < .001) CompiledEffect = CompiledEffect_player_0p003921569_filter_1;
            else if (abs((float)(player - 0.003921569)) < .001 && abs((float)(filter - 2)) < .001) CompiledEffect = CompiledEffect_player_0p003921569_filter_2;
            else if (abs((float)(player - 0.003921569)) < .001 && abs((float)(filter - 3)) < .001) CompiledEffect = CompiledEffect_player_0p003921569_filter_3;
            else if (abs((float)(player - 0.003921569)) < .001 && abs((float)(filter - 4)) < .001) CompiledEffect = CompiledEffect_player_0p003921569_filter_4;
            else if (abs((float)(player - 0.007843138)) < .001 && abs((float)(filter - 0)) < .001) CompiledEffect = CompiledEffect_player_0p007843138_filter_0;
            else if (abs((float)(player - 0.007843138)) < .001 && abs((float)(filter - 1)) < .001) CompiledEffect = CompiledEffect_player_0p007843138_filter_1;
            else if (abs((float)(player - 0.007843138)) < .001 && abs((float)(filter - 2)) < .001) CompiledEffect = CompiledEffect_player_0p007843138_filter_2;
            else if (abs((float)(player - 0.007843138)) < .001 && abs((float)(filter - 3)) < .001) CompiledEffect = CompiledEffect_player_0p007843138_filter_3;
            else if (abs((float)(player - 0.007843138)) < .001 && abs((float)(filter - 4)) < .001) CompiledEffect = CompiledEffect_player_0p007843138_filter_4;
            else if (abs((float)(player - 0.01176471)) < .001 && abs((float)(filter - 0)) < .001) CompiledEffect = CompiledEffect_player_0p01176471_filter_0;
            else if (abs((float)(player - 0.01176471)) < .001 && abs((float)(filter - 1)) < .001) CompiledEffect = CompiledEffect_player_0p01176471_filter_1;
            else if (abs((float)(player - 0.01176471)) < .001 && abs((float)(filter - 2)) < .001) CompiledEffect = CompiledEffect_player_0p01176471_filter_2;
            else if (abs((float)(player - 0.01176471)) < .001 && abs((float)(filter - 3)) < .001) CompiledEffect = CompiledEffect_player_0p01176471_filter_3;
            else if (abs((float)(player - 0.01176471)) < .001 && abs((float)(filter - 4)) < .001) CompiledEffect = CompiledEffect_player_0p01176471_filter_4;
            else if (abs((float)(player - 0.01568628)) < .001 && abs((float)(filter - 0)) < .001) CompiledEffect = CompiledEffect_player_0p01568628_filter_0;
            else if (abs((float)(player - 0.01568628)) < .001 && abs((float)(filter - 1)) < .001) CompiledEffect = CompiledEffect_player_0p01568628_filter_1;
            else if (abs((float)(player - 0.01568628)) < .001 && abs((float)(filter - 2)) < .001) CompiledEffect = CompiledEffect_player_0p01568628_filter_2;
            else if (abs((float)(player - 0.01568628)) < .001 && abs((float)(filter - 3)) < .001) CompiledEffect = CompiledEffect_player_0p01568628_filter_3;
            else if (abs((float)(player - 0.01568628)) < .001 && abs((float)(filter - 4)) < .001) CompiledEffect = CompiledEffect_player_0p01568628_filter_4;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Extra_Texture"].SetValue(FragSharpMarshal.Marshal(Extra));
            CompiledEffect.Parameters["fs_param_Extra_size"].SetValue(FragSharpMarshal.Marshal(vec(Extra.Width, Extra.Height)));
            CompiledEffect.Parameters["fs_param_Extra_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Extra.Width, Extra.Height)));
            CompiledEffect.Parameters["fs_param_Destination"].SetValue(FragSharpMarshal.Marshal(Destination));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Pathfinding_ToSpecial
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Path, Texture2D Data, Texture2D Unit, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Path, Data, Unit);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Path, Texture2D Data, Texture2D Unit, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Path, Data, Unit);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Path, Texture2D Data, Texture2D Unit, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Path, Data, Unit);
        }
        public static void Using(Texture2D Path, Texture2D Data, Texture2D Unit, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Path, Data, Unit);
        }
        public static void Using(Texture2D Path, Texture2D Data, Texture2D Unit)
        {
            CompiledEffect.Parameters["fs_param_Path_Texture"].SetValue(FragSharpMarshal.Marshal(Path));
            CompiledEffect.Parameters["fs_param_Path_size"].SetValue(FragSharpMarshal.Marshal(vec(Path.Width, Path.Height)));
            CompiledEffect.Parameters["fs_param_Path_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Path.Width, Path.Height)));
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Pathfinding_ToPlayers
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Path, Texture2D Data, Texture2D Units, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Path, Data, Units);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Path, Texture2D Data, Texture2D Units, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Path, Data, Units);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Path, Texture2D Data, Texture2D Units, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Path, Data, Units);
        }
        public static void Using(Texture2D Path, Texture2D Data, Texture2D Units, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Path, Data, Units);
        }
        public static void Using(Texture2D Path, Texture2D Data, Texture2D Units)
        {
            CompiledEffect.Parameters["fs_param_Path_Texture"].SetValue(FragSharpMarshal.Marshal(Path));
            CompiledEffect.Parameters["fs_param_Path_size"].SetValue(FragSharpMarshal.Marshal(vec(Path.Width, Path.Height)));
            CompiledEffect.Parameters["fs_param_Path_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Path.Width, Path.Height)));
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Units_Texture"].SetValue(FragSharpMarshal.Marshal(Units));
            CompiledEffect.Parameters["fs_param_Units_size"].SetValue(FragSharpMarshal.Marshal(vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Units_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Units.Width, Units.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Pathfinding_ToOtherTeams
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Path, Texture2D Data, Texture2D Units, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Path, Data, Units);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Path, Texture2D Data, Texture2D Units, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Path, Data, Units);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Path, Texture2D Data, Texture2D Units, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Path, Data, Units);
        }
        public static void Using(Texture2D Path, Texture2D Data, Texture2D Units, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Path, Data, Units);
        }
        public static void Using(Texture2D Path, Texture2D Data, Texture2D Units)
        {
            CompiledEffect.Parameters["fs_param_Path_Texture"].SetValue(FragSharpMarshal.Marshal(Path));
            CompiledEffect.Parameters["fs_param_Path_size"].SetValue(FragSharpMarshal.Marshal(vec(Path.Width, Path.Height)));
            CompiledEffect.Parameters["fs_param_Path_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Path.Width, Path.Height)));
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Units_Texture"].SetValue(FragSharpMarshal.Marshal(Units));
            CompiledEffect.Parameters["fs_param_Units_size"].SetValue(FragSharpMarshal.Marshal(vec(Units.Width, Units.Height)));
            CompiledEffect.Parameters["fs_param_Units_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Units.Width, Units.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Movement_Phase1
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Current, Texture2D Random, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Current, Random);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Current, Texture2D Random, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Current, Random);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Current, Texture2D Random, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Current, Random);
        }
        public static void Using(Texture2D Current, Texture2D Random, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Current, Random);
        }
        public static void Using(Texture2D Current, Texture2D Random)
        {
            CompiledEffect.Parameters["fs_param_Current_Texture"].SetValue(FragSharpMarshal.Marshal(Current));
            CompiledEffect.Parameters["fs_param_Current_size"].SetValue(FragSharpMarshal.Marshal(vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Current_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Random_Texture"].SetValue(FragSharpMarshal.Marshal(Random));
            CompiledEffect.Parameters["fs_param_Random_size"].SetValue(FragSharpMarshal.Marshal(vec(Random.Width, Random.Height)));
            CompiledEffect.Parameters["fs_param_Random_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Random.Width, Random.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Movement_Phase2
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Current, Texture2D Next, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Current, Next);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Current, Texture2D Next, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Current, Next);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Current, Texture2D Next, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Current, Next);
        }
        public static void Using(Texture2D Current, Texture2D Next, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Current, Next);
        }
        public static void Using(Texture2D Current, Texture2D Next)
        {
            CompiledEffect.Parameters["fs_param_Current_Texture"].SetValue(FragSharpMarshal.Marshal(Current));
            CompiledEffect.Parameters["fs_param_Current_size"].SetValue(FragSharpMarshal.Marshal(vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Current_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Next_Texture"].SetValue(FragSharpMarshal.Marshal(Next));
            CompiledEffect.Parameters["fs_param_Next_size"].SetValue(FragSharpMarshal.Marshal(vec(Next.Width, Next.Height)));
            CompiledEffect.Parameters["fs_param_Next_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Next.Width, Next.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Movement_Convect
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Data, Texture2D CurrentData, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, CurrentData);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, Texture2D CurrentData, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, CurrentData);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, Texture2D CurrentData, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, CurrentData);
        }
        public static void Using(Texture2D Data, Texture2D CurrentData, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, CurrentData);
        }
        public static void Using(Texture2D Data, Texture2D CurrentData)
        {
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_CurrentData_Texture"].SetValue(FragSharpMarshal.Marshal(CurrentData));
            CompiledEffect.Parameters["fs_param_CurrentData_size"].SetValue(FragSharpMarshal.Marshal(vec(CurrentData.Width, CurrentData.Height)));
            CompiledEffect.Parameters["fs_param_CurrentData_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(CurrentData.Width, CurrentData.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Movement_UpdateDirection_RemoveDead
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D TargetData, Texture2D Unit, Texture2D Extra, Texture2D Data, Texture2D PrevData, Texture2D PathToOtherTeams, Texture2D RandomField, Texture2D Magic, Texture2D Geo, Texture2D AntiGeo, Texture2D DirwardRight, Texture2D DirwardLeft, Texture2D DirwardUp, Texture2D DirwardDown, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(TargetData, Unit, Extra, Data, PrevData, PathToOtherTeams, RandomField, Magic, Geo, AntiGeo, DirwardRight, DirwardLeft, DirwardUp, DirwardDown);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D TargetData, Texture2D Unit, Texture2D Extra, Texture2D Data, Texture2D PrevData, Texture2D PathToOtherTeams, Texture2D RandomField, Texture2D Magic, Texture2D Geo, Texture2D AntiGeo, Texture2D DirwardRight, Texture2D DirwardLeft, Texture2D DirwardUp, Texture2D DirwardDown, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(TargetData, Unit, Extra, Data, PrevData, PathToOtherTeams, RandomField, Magic, Geo, AntiGeo, DirwardRight, DirwardLeft, DirwardUp, DirwardDown);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D TargetData, Texture2D Unit, Texture2D Extra, Texture2D Data, Texture2D PrevData, Texture2D PathToOtherTeams, Texture2D RandomField, Texture2D Magic, Texture2D Geo, Texture2D AntiGeo, Texture2D DirwardRight, Texture2D DirwardLeft, Texture2D DirwardUp, Texture2D DirwardDown, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(TargetData, Unit, Extra, Data, PrevData, PathToOtherTeams, RandomField, Magic, Geo, AntiGeo, DirwardRight, DirwardLeft, DirwardUp, DirwardDown);
        }
        public static void Using(Texture2D TargetData, Texture2D Unit, Texture2D Extra, Texture2D Data, Texture2D PrevData, Texture2D PathToOtherTeams, Texture2D RandomField, Texture2D Magic, Texture2D Geo, Texture2D AntiGeo, Texture2D DirwardRight, Texture2D DirwardLeft, Texture2D DirwardUp, Texture2D DirwardDown, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(TargetData, Unit, Extra, Data, PrevData, PathToOtherTeams, RandomField, Magic, Geo, AntiGeo, DirwardRight, DirwardLeft, DirwardUp, DirwardDown);
        }
        public static void Using(Texture2D TargetData, Texture2D Unit, Texture2D Extra, Texture2D Data, Texture2D PrevData, Texture2D PathToOtherTeams, Texture2D RandomField, Texture2D Magic, Texture2D Geo, Texture2D AntiGeo, Texture2D DirwardRight, Texture2D DirwardLeft, Texture2D DirwardUp, Texture2D DirwardDown)
        {
            CompiledEffect.Parameters["fs_param_TargetData_Texture"].SetValue(FragSharpMarshal.Marshal(TargetData));
            CompiledEffect.Parameters["fs_param_TargetData_size"].SetValue(FragSharpMarshal.Marshal(vec(TargetData.Width, TargetData.Height)));
            CompiledEffect.Parameters["fs_param_TargetData_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(TargetData.Width, TargetData.Height)));
            CompiledEffect.Parameters["fs_param_Unit_Texture"].SetValue(FragSharpMarshal.Marshal(Unit));
            CompiledEffect.Parameters["fs_param_Unit_size"].SetValue(FragSharpMarshal.Marshal(vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Unit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Unit.Width, Unit.Height)));
            CompiledEffect.Parameters["fs_param_Extra_Texture"].SetValue(FragSharpMarshal.Marshal(Extra));
            CompiledEffect.Parameters["fs_param_Extra_size"].SetValue(FragSharpMarshal.Marshal(vec(Extra.Width, Extra.Height)));
            CompiledEffect.Parameters["fs_param_Extra_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Extra.Width, Extra.Height)));
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_PrevData_Texture"].SetValue(FragSharpMarshal.Marshal(PrevData));
            CompiledEffect.Parameters["fs_param_PrevData_size"].SetValue(FragSharpMarshal.Marshal(vec(PrevData.Width, PrevData.Height)));
            CompiledEffect.Parameters["fs_param_PrevData_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(PrevData.Width, PrevData.Height)));
            CompiledEffect.Parameters["fs_param_PathToOtherTeams_Texture"].SetValue(FragSharpMarshal.Marshal(PathToOtherTeams));
            CompiledEffect.Parameters["fs_param_PathToOtherTeams_size"].SetValue(FragSharpMarshal.Marshal(vec(PathToOtherTeams.Width, PathToOtherTeams.Height)));
            CompiledEffect.Parameters["fs_param_PathToOtherTeams_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(PathToOtherTeams.Width, PathToOtherTeams.Height)));
            CompiledEffect.Parameters["fs_param_RandomField_Texture"].SetValue(FragSharpMarshal.Marshal(RandomField));
            CompiledEffect.Parameters["fs_param_RandomField_size"].SetValue(FragSharpMarshal.Marshal(vec(RandomField.Width, RandomField.Height)));
            CompiledEffect.Parameters["fs_param_RandomField_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(RandomField.Width, RandomField.Height)));
            CompiledEffect.Parameters["fs_param_Magic_Texture"].SetValue(FragSharpMarshal.Marshal(Magic));
            CompiledEffect.Parameters["fs_param_Magic_size"].SetValue(FragSharpMarshal.Marshal(vec(Magic.Width, Magic.Height)));
            CompiledEffect.Parameters["fs_param_Magic_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Magic.Width, Magic.Height)));
            CompiledEffect.Parameters["fs_param_Geo_Texture"].SetValue(FragSharpMarshal.Marshal(Geo));
            CompiledEffect.Parameters["fs_param_Geo_size"].SetValue(FragSharpMarshal.Marshal(vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Geo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_AntiGeo_Texture"].SetValue(FragSharpMarshal.Marshal(AntiGeo));
            CompiledEffect.Parameters["fs_param_AntiGeo_size"].SetValue(FragSharpMarshal.Marshal(vec(AntiGeo.Width, AntiGeo.Height)));
            CompiledEffect.Parameters["fs_param_AntiGeo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(AntiGeo.Width, AntiGeo.Height)));
            CompiledEffect.Parameters["fs_param_DirwardRight_Texture"].SetValue(FragSharpMarshal.Marshal(DirwardRight));
            CompiledEffect.Parameters["fs_param_DirwardRight_size"].SetValue(FragSharpMarshal.Marshal(vec(DirwardRight.Width, DirwardRight.Height)));
            CompiledEffect.Parameters["fs_param_DirwardRight_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(DirwardRight.Width, DirwardRight.Height)));
            CompiledEffect.Parameters["fs_param_DirwardLeft_Texture"].SetValue(FragSharpMarshal.Marshal(DirwardLeft));
            CompiledEffect.Parameters["fs_param_DirwardLeft_size"].SetValue(FragSharpMarshal.Marshal(vec(DirwardLeft.Width, DirwardLeft.Height)));
            CompiledEffect.Parameters["fs_param_DirwardLeft_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(DirwardLeft.Width, DirwardLeft.Height)));
            CompiledEffect.Parameters["fs_param_DirwardUp_Texture"].SetValue(FragSharpMarshal.Marshal(DirwardUp));
            CompiledEffect.Parameters["fs_param_DirwardUp_size"].SetValue(FragSharpMarshal.Marshal(vec(DirwardUp.Width, DirwardUp.Height)));
            CompiledEffect.Parameters["fs_param_DirwardUp_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(DirwardUp.Width, DirwardUp.Height)));
            CompiledEffect.Parameters["fs_param_DirwardDown_Texture"].SetValue(FragSharpMarshal.Marshal(DirwardDown));
            CompiledEffect.Parameters["fs_param_DirwardDown_size"].SetValue(FragSharpMarshal.Marshal(vec(DirwardDown.Width, DirwardDown.Height)));
            CompiledEffect.Parameters["fs_param_DirwardDown_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(DirwardDown.Width, DirwardDown.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Movement_SetPolarity_Phase1
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Data, Texture2D Extra, Texture2D Geo, Texture2D AntiGeo, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Extra, Geo, AntiGeo);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, Texture2D Extra, Texture2D Geo, Texture2D AntiGeo, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Extra, Geo, AntiGeo);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, Texture2D Extra, Texture2D Geo, Texture2D AntiGeo, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data, Extra, Geo, AntiGeo);
        }
        public static void Using(Texture2D Data, Texture2D Extra, Texture2D Geo, Texture2D AntiGeo, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data, Extra, Geo, AntiGeo);
        }
        public static void Using(Texture2D Data, Texture2D Extra, Texture2D Geo, Texture2D AntiGeo)
        {
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Extra_Texture"].SetValue(FragSharpMarshal.Marshal(Extra));
            CompiledEffect.Parameters["fs_param_Extra_size"].SetValue(FragSharpMarshal.Marshal(vec(Extra.Width, Extra.Height)));
            CompiledEffect.Parameters["fs_param_Extra_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Extra.Width, Extra.Height)));
            CompiledEffect.Parameters["fs_param_Geo_Texture"].SetValue(FragSharpMarshal.Marshal(Geo));
            CompiledEffect.Parameters["fs_param_Geo_size"].SetValue(FragSharpMarshal.Marshal(vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_Geo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Geo.Width, Geo.Height)));
            CompiledEffect.Parameters["fs_param_AntiGeo_Texture"].SetValue(FragSharpMarshal.Marshal(AntiGeo));
            CompiledEffect.Parameters["fs_param_AntiGeo_size"].SetValue(FragSharpMarshal.Marshal(vec(AntiGeo.Width, AntiGeo.Height)));
            CompiledEffect.Parameters["fs_param_AntiGeo_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(AntiGeo.Width, AntiGeo.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Game
{
    public partial class Movement_SetPolarity_Phase2
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Data, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Data, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Data, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Data);
        }
        public static void Using(Texture2D Data, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Data);
        }
        public static void Using(Texture2D Data)
        {
            CompiledEffect.Parameters["fs_param_Data_Texture"].SetValue(FragSharpMarshal.Marshal(Data));
            CompiledEffect.Parameters["fs_param_Data_size"].SetValue(FragSharpMarshal.Marshal(vec(Data.Width, Data.Height)));
            CompiledEffect.Parameters["fs_param_Data_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Data.Width, Data.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}






namespace Game
{
    public partial class DrawUnitsZoomedOutBlur
    {
        public static Effect CompiledEffect_player_0;
        public static Effect CompiledEffect_player_0p003921569;
        public static Effect CompiledEffect_player_0p007843138;
        public static Effect CompiledEffect_player_0p01176471;
        public static Effect CompiledEffect_player_0p01568628;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D CurrentData, Texture2D PreviousData, Texture2D CurrentUnit, Texture2D PreviousUnit, Texture2D Texture, float player, float PercentSimStepComplete, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, CurrentData, PreviousData, CurrentUnit, PreviousUnit, Texture, player, PercentSimStepComplete);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D CurrentData, Texture2D PreviousData, Texture2D CurrentUnit, Texture2D PreviousUnit, Texture2D Texture, float player, float PercentSimStepComplete, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, CurrentData, PreviousData, CurrentUnit, PreviousUnit, Texture, player, PercentSimStepComplete);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D CurrentData, Texture2D PreviousData, Texture2D CurrentUnit, Texture2D PreviousUnit, Texture2D Texture, float player, float PercentSimStepComplete, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, CurrentData, PreviousData, CurrentUnit, PreviousUnit, Texture, player, PercentSimStepComplete);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D CurrentData, Texture2D PreviousData, Texture2D CurrentUnit, Texture2D PreviousUnit, Texture2D Texture, float player, float PercentSimStepComplete, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, CurrentData, PreviousData, CurrentUnit, PreviousUnit, Texture, player, PercentSimStepComplete);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D CurrentData, Texture2D PreviousData, Texture2D CurrentUnit, Texture2D PreviousUnit, Texture2D Texture, float player, float PercentSimStepComplete)
        {
            Effect CompiledEffect = null;

            if (abs((float)(player - 0)) < .001) CompiledEffect = CompiledEffect_player_0;
            else if (abs((float)(player - 0.003921569)) < .001) CompiledEffect = CompiledEffect_player_0p003921569;
            else if (abs((float)(player - 0.007843138)) < .001) CompiledEffect = CompiledEffect_player_0p007843138;
            else if (abs((float)(player - 0.01176471)) < .001) CompiledEffect = CompiledEffect_player_0p01176471;
            else if (abs((float)(player - 0.01568628)) < .001) CompiledEffect = CompiledEffect_player_0p01568628;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_CurrentData_Texture"].SetValue(FragSharpMarshal.Marshal(CurrentData));
            CompiledEffect.Parameters["fs_param_CurrentData_size"].SetValue(FragSharpMarshal.Marshal(vec(CurrentData.Width, CurrentData.Height)));
            CompiledEffect.Parameters["fs_param_CurrentData_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(CurrentData.Width, CurrentData.Height)));
            CompiledEffect.Parameters["fs_param_PreviousData_Texture"].SetValue(FragSharpMarshal.Marshal(PreviousData));
            CompiledEffect.Parameters["fs_param_PreviousData_size"].SetValue(FragSharpMarshal.Marshal(vec(PreviousData.Width, PreviousData.Height)));
            CompiledEffect.Parameters["fs_param_PreviousData_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(PreviousData.Width, PreviousData.Height)));
            CompiledEffect.Parameters["fs_param_CurrentUnit_Texture"].SetValue(FragSharpMarshal.Marshal(CurrentUnit));
            CompiledEffect.Parameters["fs_param_CurrentUnit_size"].SetValue(FragSharpMarshal.Marshal(vec(CurrentUnit.Width, CurrentUnit.Height)));
            CompiledEffect.Parameters["fs_param_CurrentUnit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(CurrentUnit.Width, CurrentUnit.Height)));
            CompiledEffect.Parameters["fs_param_PreviousUnit_Texture"].SetValue(FragSharpMarshal.Marshal(PreviousUnit));
            CompiledEffect.Parameters["fs_param_PreviousUnit_size"].SetValue(FragSharpMarshal.Marshal(vec(PreviousUnit.Width, PreviousUnit.Height)));
            CompiledEffect.Parameters["fs_param_PreviousUnit_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(PreviousUnit.Width, PreviousUnit.Height)));
            CompiledEffect.Parameters["fs_param_Texture_Texture"].SetValue(FragSharpMarshal.Marshal(Texture));
            CompiledEffect.Parameters["fs_param_Texture_size"].SetValue(FragSharpMarshal.Marshal(vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_Texture_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Texture.Width, Texture.Height)));
            CompiledEffect.Parameters["fs_param_PercentSimStepComplete"].SetValue(FragSharpMarshal.Marshal(PercentSimStepComplete));
            CompiledEffect.Parameters["fs_param_FarColor_Texture"].SetValue(FragSharpMarshal.Marshal(FarColor));
            CompiledEffect.Parameters["fs_param_FarColor_size"].SetValue(FragSharpMarshal.Marshal(vec(FarColor.Width, FarColor.Height)));
            CompiledEffect.Parameters["fs_param_FarColor_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(FarColor.Width, FarColor.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}











namespace Game
{
    public partial class DrawUnits
    {
        public static Effect CompiledEffect_player_0_solid_blend_flag_true;
        public static Effect CompiledEffect_player_0_solid_blend_flag_false;
        public static Effect CompiledEffect_player_0p003921569_solid_blend_flag_true;
        public static Effect CompiledEffect_player_0p003921569_solid_blend_flag_false;
        public static Effect CompiledEffect_player_0p007843138_solid_blend_flag_true;
        public static Effect CompiledEffect_player_0p007843138_solid_blend_flag_false;
        public static Effect CompiledEffect_player_0p01176471_solid_blend_flag_true;
        public static Effect CompiledEffect_player_0p01176471_solid_blend_flag_false;
        public static Effect CompiledEffect_player_0p01568628_solid_blend_flag_true;
        public static Effect CompiledEffect_player_0p01568628_solid_blend_flag_false;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D CurrentData, Texture2D PreviousData, Texture2D CurrentUnits, Texture2D PreviousUnits, Texture2D UnitTexture, Texture2D ShadowTexture, float player, float s, float t, float selection_blend, float selection_size, bool solid_blend_flag, float solid_blend, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, CurrentData, PreviousData, CurrentUnits, PreviousUnits, UnitTexture, ShadowTexture, player, s, t, selection_blend, selection_size, solid_blend_flag, solid_blend);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D CurrentData, Texture2D PreviousData, Texture2D CurrentUnits, Texture2D PreviousUnits, Texture2D UnitTexture, Texture2D ShadowTexture, float player, float s, float t, float selection_blend, float selection_size, bool solid_blend_flag, float solid_blend, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, CurrentData, PreviousData, CurrentUnits, PreviousUnits, UnitTexture, ShadowTexture, player, s, t, selection_blend, selection_size, solid_blend_flag, solid_blend);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D CurrentData, Texture2D PreviousData, Texture2D CurrentUnits, Texture2D PreviousUnits, Texture2D UnitTexture, Texture2D ShadowTexture, float player, float s, float t, float selection_blend, float selection_size, bool solid_blend_flag, float solid_blend, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, CurrentData, PreviousData, CurrentUnits, PreviousUnits, UnitTexture, ShadowTexture, player, s, t, selection_blend, selection_size, solid_blend_flag, solid_blend);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D CurrentData, Texture2D PreviousData, Texture2D CurrentUnits, Texture2D PreviousUnits, Texture2D UnitTexture, Texture2D ShadowTexture, float player, float s, float t, float selection_blend, float selection_size, bool solid_blend_flag, float solid_blend, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, CurrentData, PreviousData, CurrentUnits, PreviousUnits, UnitTexture, ShadowTexture, player, s, t, selection_blend, selection_size, solid_blend_flag, solid_blend);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D CurrentData, Texture2D PreviousData, Texture2D CurrentUnits, Texture2D PreviousUnits, Texture2D UnitTexture, Texture2D ShadowTexture, float player, float s, float t, float selection_blend, float selection_size, bool solid_blend_flag, float solid_blend)
        {
            Effect CompiledEffect = null;

            if (abs((float)(player - 0)) < .001 && solid_blend_flag == true) CompiledEffect = CompiledEffect_player_0_solid_blend_flag_true;
            else if (abs((float)(player - 0)) < .001 && solid_blend_flag == false) CompiledEffect = CompiledEffect_player_0_solid_blend_flag_false;
            else if (abs((float)(player - 0.003921569)) < .001 && solid_blend_flag == true) CompiledEffect = CompiledEffect_player_0p003921569_solid_blend_flag_true;
            else if (abs((float)(player - 0.003921569)) < .001 && solid_blend_flag == false) CompiledEffect = CompiledEffect_player_0p003921569_solid_blend_flag_false;
            else if (abs((float)(player - 0.007843138)) < .001 && solid_blend_flag == true) CompiledEffect = CompiledEffect_player_0p007843138_solid_blend_flag_true;
            else if (abs((float)(player - 0.007843138)) < .001 && solid_blend_flag == false) CompiledEffect = CompiledEffect_player_0p007843138_solid_blend_flag_false;
            else if (abs((float)(player - 0.01176471)) < .001 && solid_blend_flag == true) CompiledEffect = CompiledEffect_player_0p01176471_solid_blend_flag_true;
            else if (abs((float)(player - 0.01176471)) < .001 && solid_blend_flag == false) CompiledEffect = CompiledEffect_player_0p01176471_solid_blend_flag_false;
            else if (abs((float)(player - 0.01568628)) < .001 && solid_blend_flag == true) CompiledEffect = CompiledEffect_player_0p01568628_solid_blend_flag_true;
            else if (abs((float)(player - 0.01568628)) < .001 && solid_blend_flag == false) CompiledEffect = CompiledEffect_player_0p01568628_solid_blend_flag_false;

            if (CompiledEffect == null) throw new Exception("Parameters do not match any specified specialization.");

            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_CurrentData_Texture"].SetValue(FragSharpMarshal.Marshal(CurrentData));
            CompiledEffect.Parameters["fs_param_CurrentData_size"].SetValue(FragSharpMarshal.Marshal(vec(CurrentData.Width, CurrentData.Height)));
            CompiledEffect.Parameters["fs_param_CurrentData_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(CurrentData.Width, CurrentData.Height)));
            CompiledEffect.Parameters["fs_param_PreviousData_Texture"].SetValue(FragSharpMarshal.Marshal(PreviousData));
            CompiledEffect.Parameters["fs_param_PreviousData_size"].SetValue(FragSharpMarshal.Marshal(vec(PreviousData.Width, PreviousData.Height)));
            CompiledEffect.Parameters["fs_param_PreviousData_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(PreviousData.Width, PreviousData.Height)));
            CompiledEffect.Parameters["fs_param_CurrentUnits_Texture"].SetValue(FragSharpMarshal.Marshal(CurrentUnits));
            CompiledEffect.Parameters["fs_param_CurrentUnits_size"].SetValue(FragSharpMarshal.Marshal(vec(CurrentUnits.Width, CurrentUnits.Height)));
            CompiledEffect.Parameters["fs_param_CurrentUnits_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(CurrentUnits.Width, CurrentUnits.Height)));
            CompiledEffect.Parameters["fs_param_PreviousUnits_Texture"].SetValue(FragSharpMarshal.Marshal(PreviousUnits));
            CompiledEffect.Parameters["fs_param_PreviousUnits_size"].SetValue(FragSharpMarshal.Marshal(vec(PreviousUnits.Width, PreviousUnits.Height)));
            CompiledEffect.Parameters["fs_param_PreviousUnits_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(PreviousUnits.Width, PreviousUnits.Height)));
            CompiledEffect.Parameters["fs_param_UnitTexture_Texture"].SetValue(FragSharpMarshal.Marshal(UnitTexture));
            CompiledEffect.Parameters["fs_param_UnitTexture_size"].SetValue(FragSharpMarshal.Marshal(vec(UnitTexture.Width, UnitTexture.Height)));
            CompiledEffect.Parameters["fs_param_UnitTexture_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(UnitTexture.Width, UnitTexture.Height)));
            CompiledEffect.Parameters["fs_param_ShadowTexture_Texture"].SetValue(FragSharpMarshal.Marshal(ShadowTexture));
            CompiledEffect.Parameters["fs_param_ShadowTexture_size"].SetValue(FragSharpMarshal.Marshal(vec(ShadowTexture.Width, ShadowTexture.Height)));
            CompiledEffect.Parameters["fs_param_ShadowTexture_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(ShadowTexture.Width, ShadowTexture.Height)));
            CompiledEffect.Parameters["fs_param_s"].SetValue(FragSharpMarshal.Marshal(s));
            CompiledEffect.Parameters["fs_param_t"].SetValue(FragSharpMarshal.Marshal(t));
            CompiledEffect.Parameters["fs_param_selection_blend"].SetValue(FragSharpMarshal.Marshal(selection_blend));
            CompiledEffect.Parameters["fs_param_selection_size"].SetValue(FragSharpMarshal.Marshal(selection_size));
            CompiledEffect.Parameters["fs_param_solid_blend"].SetValue(FragSharpMarshal.Marshal(solid_blend));
            CompiledEffect.Parameters["fs_param_FarColor_Texture"].SetValue(FragSharpMarshal.Marshal(FarColor));
            CompiledEffect.Parameters["fs_param_FarColor_size"].SetValue(FragSharpMarshal.Marshal(vec(FarColor.Width, FarColor.Height)));
            CompiledEffect.Parameters["fs_param_FarColor_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(FarColor.Width, FarColor.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


