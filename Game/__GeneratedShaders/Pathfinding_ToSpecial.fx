// This file was auto-generated by FragSharp. It will be regenerated on the next compilation.
// Manual changes made will not persist and may cause incorrect behavior between compilations.

#define PIXEL_SHADER ps_3_0
#define VERTEX_SHADER vs_3_0

// Vertex shader data structure definition
struct VertexToPixel
{
    float4 Position   : POSITION0;
    float4 Color      : COLOR0;
    float2 TexCoords  : TEXCOORD0;
    float2 Position2D : TEXCOORD2;
};

// Fragment shader data structure definition
struct PixelToFrame
{
    float4 Color      : COLOR0;
};

// The following are variables used by the vertex shader (vertex parameters).

// The following are variables used by the fragment shader (fragment parameters).
// Texture Sampler for fs_param_Path, using register location 1
float2 fs_param_Path_size;
float2 fs_param_Path_dxdy;

Texture fs_param_Path_Texture;
sampler fs_param_Path : register(s1) = sampler_state
{
    texture   = <fs_param_Path_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// Texture Sampler for fs_param_Data, using register location 2
float2 fs_param_Data_size;
float2 fs_param_Data_dxdy;

Texture fs_param_Data_Texture;
sampler fs_param_Data : register(s2) = sampler_state
{
    texture   = <fs_param_Data_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// Texture Sampler for fs_param_Unit, using register location 3
float2 fs_param_Unit_size;
float2 fs_param_Unit_dxdy;

Texture fs_param_Unit_Texture;
sampler fs_param_Unit : register(s3) = sampler_state
{
    texture   = <fs_param_Unit_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// The following variables are included because they are referenced but are not function parameters. Their values will be set at call time.

// The following methods are included because they are referenced by the fragment shader.
bool Game__SimShader__Something__data(float4 u)
{
    return u.r > 0 + .0019;
}

bool Game__SimShader__IsBuilding__Single(float type)
{
    return type >= 0.02352941 - .0019 && type < 0.07843138 - .0019;
}

bool Game__SimShader__IsBuilding__unit(float4 u)
{
    return Game__SimShader__IsBuilding__Single(u.r);
}

float FragSharpFramework__FragSharpStd__fint_round__Single(float v)
{
    return floor(255 * v + 0.5) * 0.003921569;
}

float Game__SimShader__get_type__BuildingDist(float4 u)
{
    return FragSharpFramework__FragSharpStd__fint_round__Single(u.b / 16.0);
}

float Game__SimShader__get_player__BuildingDist(float4 u)
{
    return u.b - Game__SimShader__get_type__BuildingDist(u) * 16.0;
}

void Game__SimShader__set_type__BuildingDist__Single(inout float4 u, float type)
{
    u.b = Game__SimShader__get_player__BuildingDist(u) + type * 16.0;
}

void Game__SimShader__set_player__BuildingDist__Single(inout float4 u, float player)
{
    u.b = player + Game__SimShader__get_type__BuildingDist(u) * 16.0;
}

// Compiled vertex shader
VertexToPixel StandardVertexShader(float2 inPos : POSITION0, float2 inTexCoords : TEXCOORD0, float4 inColor : COLOR0)
{
    VertexToPixel Output = (VertexToPixel)0;
    Output.Position.w = 1;
    Output.Position.xy = inPos.xy;
    Output.TexCoords = inTexCoords;
    return Output;
}

// Compiled fragment shader
PixelToFrame FragmentShader(VertexToPixel psin)
{
    PixelToFrame __FinalOutput = (PixelToFrame)0;
    float4 output = float4(0, 0, 0, 0);
    float4 data_here = tex2D(fs_param_Data, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 0)) * fs_param_Data_dxdy);
    float4 unit_here = tex2D(fs_param_Unit, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 0)) * fs_param_Unit_dxdy);
    if (Game__SimShader__Something__data(data_here) && (Game__SimShader__IsBuilding__unit(unit_here) || abs(unit_here.r - 0.007843138) < .0019 || abs(unit_here.r - 0.01176471) < .0019))
    {
        float type = unit_here.r;
        if (abs(type - 0.007843138) < .0019)
        {
            type = 0.03529412;
        }
        if (abs(type - 0.01176471) < .0019)
        {
            type = 0.03921569;
        }
        Game__SimShader__set_type__BuildingDist__Single(output, type);
        Game__SimShader__set_player__BuildingDist__Single(output, unit_here.g);
        output.rg = float2(0.1568628, 0.1568628);
        output.a = 0.0;
    }
    else
    {
        float4 right = tex2D(fs_param_Path, psin.TexCoords + (-float2(0.25,0.25) + float2(1, 0)) * fs_param_Path_dxdy), up = tex2D(fs_param_Path, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 1)) * fs_param_Path_dxdy), left = tex2D(fs_param_Path, psin.TexCoords + (-float2(0.25,0.25) + float2(-(1), 0)) * fs_param_Path_dxdy), down = tex2D(fs_param_Path, psin.TexCoords + (-float2(0.25,0.25) + float2(0, -(1))) * fs_param_Path_dxdy);
        float min_dist = 1.0;
        if (left.a < min_dist - .0019)
        {
            output.b = left.b;
            min_dist = left.a;
            output.rg = left.rg - float2(0.003921569, 0.0);
        }
        if (down.a < min_dist - .0019)
        {
            output.b = down.b;
            min_dist = down.a;
            output.rg = down.rg - float2(0.0, 0.003921569);
        }
        if (right.a < min_dist - .0019)
        {
            output.b = right.b;
            min_dist = right.a;
            output.rg = right.rg + float2(0.003921569, 0.0);
        }
        if (up.a < min_dist - .0019)
        {
            output.b = up.b;
            min_dist = up.a;
            output.rg = up.rg + float2(0.0, 0.003921569);
        }
        output.a = min_dist + 0.003921569;
    }
    __FinalOutput.Color = output;
    return __FinalOutput;
}

// Shader compilation
technique Simplest
{
    pass Pass0
    {
        VertexShader = compile VERTEX_SHADER StandardVertexShader();
        PixelShader = compile PIXEL_SHADER FragmentShader();
    }
}