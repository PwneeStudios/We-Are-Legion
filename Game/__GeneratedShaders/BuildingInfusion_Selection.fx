// This file was auto-generated by FragSharp. It will be regenerated on the next compilation.
// Manual changes made will not persist and may cause incorrect behavior between compilations.

#define PIXEL_SHADER ps_3_0
#define VERTEX_SHADER vs_3_0

// Vertex shader data structure definition
struct VertexToPixel
{
    float4 Position   : POSITION0;
    float4 Color      : COLOR0;
    float2 TexCoords  : TEXCOORD0;
    float2 Position2D : TEXCOORD2;
};

// Fragment shader data structure definition
struct PixelToFrame
{
    float4 Color      : COLOR0;
};

// The following are variables used by the vertex shader (vertex parameters).

// The following are variables used by the fragment shader (fragment parameters).
// Texture Sampler for fs_param_Unit, using register location 1
float2 fs_param_Unit_size;
float2 fs_param_Unit_dxdy;

Texture fs_param_Unit_Texture;
sampler fs_param_Unit : register(s1) = sampler_state
{
    texture   = <fs_param_Unit_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// Texture Sampler for fs_param_Building, using register location 2
float2 fs_param_Building_size;
float2 fs_param_Building_dxdy;

Texture fs_param_Building_Texture;
sampler fs_param_Building : register(s2) = sampler_state
{
    texture   = <fs_param_Building_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// The following variables are included because they are referenced but are not function parameters. Their values will be set at call time.

// The following methods are included because they are referenced by the fragment shader.
bool Game__SimShader__Something__building(float4 u)
{
    return u.r > 0 + .0019;
}

bool Game__SimShader__IsBuilding__Single(float type)
{
    return type >= 0.02352941 - .0019 && type < 0.07843138 - .0019;
}

bool Game__SimShader__IsBuilding__unit(float4 u)
{
    return Game__SimShader__IsBuilding__Single(u.r);
}

bool Game__SimShader__IsCenter__building(float4 b)
{
    return abs(b.g - 0.003921569) < .0019 && abs(b.a - 0.003921569) < .0019;
}

bool Game__SimShader__fake_selected__data(float4 u)
{
    float val = u.b;
    return 0.1254902 <= val + .0019 && val < 0.5019608 - .0019;
}

bool Game__SimShader__fake_selected__building(float4 u)
{
    return Game__SimShader__fake_selected__data(u);
}

bool Game__SimShader__selected__data(float4 u)
{
    float val = u.b;
    return val >= 0.3764706 - .0019;
}

float FragSharpFramework__FragSharpStd__fint_round__Single(float v)
{
    return floor(255 * v + 0.5) * 0.003921569;
}

float Game__SimShader__prior_direction__data(float4 u)
{
    float val = u.b;
    val = fmod(val, 0.1254902);
    val = FragSharpFramework__FragSharpStd__fint_round__Single(val);
    return val;
}

void Game__SimShader__set_selected_fake__data__Boolean(inout float4 u, bool fake_selected)
{
    bool is_selected = Game__SimShader__selected__data(u);
    float prior_dir = Game__SimShader__prior_direction__data(u);
    float select_state= (float)0;
    if (fake_selected)
    {
        select_state = is_selected ? 0.3764706 : 0.2509804;
    }
    else
    {
        select_state = is_selected ? 0.627451 : 0.0;
    }
    u.b = prior_dir + select_state;
}

void Game__SimShader__set_selected_fake__building__Boolean(inout float4 u, bool selected)
{
    float4 d = u;
    Game__SimShader__set_selected_fake__data__Boolean(d, selected);
    u = d;
}

// Compiled vertex shader
VertexToPixel StandardVertexShader(float2 inPos : POSITION0, float2 inTexCoords : TEXCOORD0, float4 inColor : COLOR0)
{
    VertexToPixel Output = (VertexToPixel)0;
    Output.Position.w = 1;
    Output.Position.xy = inPos.xy;
    Output.TexCoords = inTexCoords;
    return Output;
}

// Compiled fragment shader
PixelToFrame FragmentShader(VertexToPixel psin)
{
    PixelToFrame __FinalOutput = (PixelToFrame)0;
    float4 building_here = tex2D(fs_param_Building, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 0)) * fs_param_Building_dxdy);
    float4 unit_here = tex2D(fs_param_Unit, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 0)) * fs_param_Unit_dxdy);
    if (Game__SimShader__Something__building(building_here) && Game__SimShader__IsBuilding__unit(unit_here) && Game__SimShader__IsCenter__building(building_here))
    {
        float4 right = tex2D(fs_param_Building, psin.TexCoords + (-float2(0.25,0.25) + float2(1, 0)) * fs_param_Building_dxdy), up = tex2D(fs_param_Building, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 1)) * fs_param_Building_dxdy), left = tex2D(fs_param_Building, psin.TexCoords + (-float2(0.25,0.25) + float2(-(1), 0)) * fs_param_Building_dxdy), down = tex2D(fs_param_Building, psin.TexCoords + (-float2(0.25,0.25) + float2(0, -(1))) * fs_param_Building_dxdy), up_right = tex2D(fs_param_Building, psin.TexCoords + (-float2(0.25,0.25) + float2(1, 1)) * fs_param_Building_dxdy), up_left = tex2D(fs_param_Building, psin.TexCoords + (-float2(0.25,0.25) + float2(-(1), 1)) * fs_param_Building_dxdy), down_right = tex2D(fs_param_Building, psin.TexCoords + (-float2(0.25,0.25) + float2(1, -(1))) * fs_param_Building_dxdy), down_left = tex2D(fs_param_Building, psin.TexCoords + (-float2(0.25,0.25) + float2(-(1), -(1))) * fs_param_Building_dxdy);
        if (!(Game__SimShader__fake_selected__building(building_here)))
        {
            bool is_fake_selected = Game__SimShader__fake_selected__building(right) || Game__SimShader__fake_selected__building(up) || Game__SimShader__fake_selected__building(left) || Game__SimShader__fake_selected__building(down) || Game__SimShader__fake_selected__building(up_right) || Game__SimShader__fake_selected__building(up_left) || Game__SimShader__fake_selected__building(down_right) || Game__SimShader__fake_selected__building(down_left);
            Game__SimShader__set_selected_fake__building__Boolean(building_here, is_fake_selected);
        }
    }
    __FinalOutput.Color = building_here;
    return __FinalOutput;
}

// Shader compilation
technique Simplest
{
    pass Pass0
    {
        VertexShader = compile VERTEX_SHADER StandardVertexShader();
        PixelShader = compile PIXEL_SHADER FragmentShader();
    }
}