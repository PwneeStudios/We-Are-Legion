// This file was auto-generated by FragSharp. It will be regenerated on the next compilation.
// Manual changes made will not persist and may cause incorrect behavior between compilations.

#define PIXEL_SHADER ps_3_0
#define VERTEX_SHADER vs_3_0

// Vertex shader data structure definition
struct VertexToPixel
{
    float4 Position   : POSITION0;
    float4 Color      : COLOR0;
    float2 TexCoords  : TEXCOORD0;
    float2 Position2D : TEXCOORD2;
};

// Fragment shader data structure definition
struct PixelToFrame
{
    float4 Color      : COLOR0;
};

// The following are variables used by the vertex shader (vertex parameters).

// The following are variables used by the fragment shader (fragment parameters).
// Texture Sampler for fs_param_Tiles, using register location 1
float2 fs_param_Tiles_size;
float2 fs_param_Tiles_dxdy;

Texture fs_param_Tiles_Texture;
sampler fs_param_Tiles : register(s1) = sampler_state
{
    texture   = <fs_param_Tiles_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};


// The following variables are included because they are referenced but are not function parameters. Their values will be set at call time.

// The following methods are included because they are referenced by the fragment shader.
bool Game__SimShader__IsBlockingTile__tile(float4 t)
{
    return t.r >= 0.01176471 - .0019 || abs(t.r - 0.003921569) < .0019 && abs(t.b - 0.1215686) > .0019;
}

// Compiled vertex shader
VertexToPixel StandardVertexShader(float2 inPos : POSITION0, float2 inTexCoords : TEXCOORD0, float4 inColor : COLOR0)
{
    VertexToPixel Output = (VertexToPixel)0;
    Output.Position.w = 1;
    Output.Position.xy = inPos.xy;
    Output.TexCoords = inTexCoords;
    return Output;
}

// Compiled fragment shader
PixelToFrame FragmentShader(VertexToPixel psin)
{
    PixelToFrame __FinalOutput = (PixelToFrame)0;
    float4 here = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 0)) * fs_param_Tiles_dxdy), right = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(1, 0)) * fs_param_Tiles_dxdy), up = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 1)) * fs_param_Tiles_dxdy), left = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(-(1), 0)) * fs_param_Tiles_dxdy), down = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(0, -(1))) * fs_param_Tiles_dxdy), up_right = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(1, 1)) * fs_param_Tiles_dxdy), up_left = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(-(1), 1)) * fs_param_Tiles_dxdy), down_right = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(1, -(1))) * fs_param_Tiles_dxdy), down_left = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(-(1), -(1))) * fs_param_Tiles_dxdy);
    if (Game__SimShader__IsBlockingTile__tile(here))
    {
        __FinalOutput.Color = float4(0, 0, 0, 0);
        return __FinalOutput;
    }
    float dir = 0;
    if (Game__SimShader__IsBlockingTile__tile(up_left))
    {
        dir = false ? 0.01176471 : 0.007843138;
    }
    if (Game__SimShader__IsBlockingTile__tile(up_right))
    {
        dir = false ? 0.007843138 : 0.003921569;
    }
    if (Game__SimShader__IsBlockingTile__tile(down_right))
    {
        dir = false ? 0.003921569 : 0.01568628;
    }
    if (Game__SimShader__IsBlockingTile__tile(down_left))
    {
        dir = false ? 0.01568628 : 0.01176471;
    }
    if (false)
    {
        if (Game__SimShader__IsBlockingTile__tile(right))
        {
            dir = 0.007843138;
            if (Game__SimShader__IsBlockingTile__tile(up))
            {
                dir = 0.01176471;
                if (Game__SimShader__IsBlockingTile__tile(left))
                {
                    dir = 0.01568628;
                }
            }
        }
        if (Game__SimShader__IsBlockingTile__tile(up))
        {
            dir = 0.01176471;
            if (Game__SimShader__IsBlockingTile__tile(left))
            {
                dir = 0.01568628;
                if (Game__SimShader__IsBlockingTile__tile(down))
                {
                    dir = 0.003921569;
                }
            }
        }
        if (Game__SimShader__IsBlockingTile__tile(left))
        {
            dir = 0.01568628;
            if (Game__SimShader__IsBlockingTile__tile(down))
            {
                dir = 0.003921569;
                if (Game__SimShader__IsBlockingTile__tile(right))
                {
                    dir = 0.007843138;
                }
            }
        }
        if (Game__SimShader__IsBlockingTile__tile(down))
        {
            dir = 0.003921569;
            if (Game__SimShader__IsBlockingTile__tile(right))
            {
                dir = 0.007843138;
                if (Game__SimShader__IsBlockingTile__tile(up))
                {
                    dir = 0.01176471;
                }
            }
        }
    }
    else
    {
        if (Game__SimShader__IsBlockingTile__tile(right))
        {
            dir = 0.01568628;
            if (Game__SimShader__IsBlockingTile__tile(down))
            {
                dir = 0.01176471;
                if (Game__SimShader__IsBlockingTile__tile(left))
                {
                    dir = 0.007843138;
                }
            }
        }
        if (Game__SimShader__IsBlockingTile__tile(up))
        {
            dir = 0.003921569;
            if (Game__SimShader__IsBlockingTile__tile(right))
            {
                dir = 0.01568628;
                if (Game__SimShader__IsBlockingTile__tile(down))
                {
                    dir = 0.01176471;
                }
            }
        }
        if (Game__SimShader__IsBlockingTile__tile(left))
        {
            dir = 0.007843138;
            if (Game__SimShader__IsBlockingTile__tile(up))
            {
                dir = 0.003921569;
                if (Game__SimShader__IsBlockingTile__tile(right))
                {
                    dir = 0.01568628;
                }
            }
        }
        if (Game__SimShader__IsBlockingTile__tile(down))
        {
            dir = 0.01176471;
            if (Game__SimShader__IsBlockingTile__tile(left))
            {
                dir = 0.007843138;
                if (Game__SimShader__IsBlockingTile__tile(up))
                {
                    dir = 0.003921569;
                }
            }
        }
    }
    float4 output = float4(0, 0, 0, 0);
    output.r = dir;
    int surround_count = (Game__SimShader__IsBlockingTile__tile(up) ? 1 : 0) + (Game__SimShader__IsBlockingTile__tile(left) ? 1 : 0) + (Game__SimShader__IsBlockingTile__tile(down) ? 1 : 0) + (Game__SimShader__IsBlockingTile__tile(right) ? 1 : 0);
    if (output.r > 0.0 + .0019 && abs(surround_count - 3) < .0019)
    {
        output.a = 0.003921569;
    }
    __FinalOutput.Color = output;
    return __FinalOutput;
}

// Shader compilation
technique Simplest
{
    pass Pass0
    {
        VertexShader = compile VERTEX_SHADER StandardVertexShader();
        PixelShader = compile PIXEL_SHADER FragmentShader();
    }
}