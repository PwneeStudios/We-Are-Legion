// This file was auto-generated by FragSharp. It will be regenerated on the next compilation.
// Manual changes made will not persist and may cause incorrect behavior between compilations.

#define PIXEL_SHADER ps_3_0
#define VERTEX_SHADER vs_3_0

// Vertex shader data structure definition
struct VertexToPixel
{
    float4 Position   : POSITION0;
    float4 Color      : COLOR0;
    float2 TexCoords  : TEXCOORD0;
    float2 Position2D : TEXCOORD2;
};

// Fragment shader data structure definition
struct PixelToFrame
{
    float4 Color      : COLOR0;
};

// The following are variables used by the vertex shader (vertex parameters).

// The following are variables used by the fragment shader (fragment parameters).
// Texture Sampler for fs_param_Current, using register location 1
float2 fs_param_Current_size;
float2 fs_param_Current_dxdy;

Texture fs_param_Current_Texture;
sampler fs_param_Current : register(s1) = sampler_state
{
    texture   = <fs_param_Current_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// Texture Sampler for fs_param_Next, using register location 2
float2 fs_param_Next_size;
float2 fs_param_Next_dxdy;

Texture fs_param_Next_Texture;
sampler fs_param_Next : register(s2) = sampler_state
{
    texture   = <fs_param_Next_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// The following variables are included because they are referenced but are not function parameters. Their values will be set at call time.

// The following methods are included because they are referenced by the fragment shader.
bool Game__SimShader__IsStationary__data(float4 d)
{
    return d.r >= 0.01960784 - .0019;
}

bool Game__SimShader__IsValid__Single(float direction)
{
    return direction > 0 + .0019;
}

float2 Game__SimShader__dir_to_vec__Single(float direction)
{
    float angle = (float)((direction * 255 - 1) * (3.1415926 / 2.0));
    return Game__SimShader__IsValid__Single(direction) ? float2(cos(angle), sin(angle)) : float2(0, 0);
}

float FragSharpFramework__FragSharpStd__fint_round__Single(float v)
{
    return floor(255 * v + 0.5) * 0.003921569;
}

float Game__SimShader__prior_direction__data(float4 u)
{
    float val = u.b;
    val = fmod(val, 0.1254902);
    val = FragSharpFramework__FragSharpStd__fint_round__Single(val);
    return val;
}

float Game__SimShader__select_state__data(float4 u)
{
    return u.b - Game__SimShader__prior_direction__data(u);
}

void Game__SimShader__set_prior_direction__data__Single(inout float4 u, float dir)
{
    u.b = Game__SimShader__select_state__data(u) + dir;
}

// Compiled vertex shader
VertexToPixel StandardVertexShader(float2 inPos : POSITION0, float2 inTexCoords : TEXCOORD0, float4 inColor : COLOR0)
{
    VertexToPixel Output = (VertexToPixel)0;
    Output.Position.w = 1;
    Output.Position.xy = inPos.xy;
    Output.TexCoords = inTexCoords;
    return Output;
}

// Compiled fragment shader
PixelToFrame FragmentShader(VertexToPixel psin)
{
    PixelToFrame __FinalOutput = (PixelToFrame)0;
    float4 next = tex2D(fs_param_Next, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 0)) * fs_param_Next_dxdy);
    float4 here = tex2D(fs_param_Current, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 0)) * fs_param_Current_dxdy);
    if (Game__SimShader__IsStationary__data(next))
    {
        __FinalOutput.Color = next;
        return __FinalOutput;
    }
    float4 ahead = tex2D(fs_param_Next, psin.TexCoords + (-float2(0.25,0.25) + Game__SimShader__dir_to_vec__Single(here.r)) * fs_param_Next_dxdy);
    if (abs(ahead.g - 0.0) < .0019 && abs(ahead.r - here.r) < .0019)
    {
        next = float4(0, 0, 0, 0);
    }
    Game__SimShader__set_prior_direction__data__Single(next, next.r);
    __FinalOutput.Color = next;
    return __FinalOutput;
}

// Shader compilation
technique Simplest
{
    pass Pass0
    {
        VertexShader = compile VERTEX_SHADER StandardVertexShader();
        PixelShader = compile PIXEL_SHADER FragmentShader();
    }
}