// This file was auto-generated by FragSharp. It will be regenerated on the next compilation.
// Manual changes made will not persist and may cause incorrect behavior between compilations.

#define PIXEL_SHADER ps_3_0
#define VERTEX_SHADER vs_3_0

// Vertex shader data structure definition
struct VertexToPixel
{
    float4 Position   : POSITION0;
    float4 Color      : COLOR0;
    float2 TexCoords  : TEXCOORD0;
    float2 Position2D : TEXCOORD2;
};

// Fragment shader data structure definition
struct PixelToFrame
{
    float4 Color      : COLOR0;
};

// The following are variables used by the vertex shader (vertex parameters).

// The following are variables used by the fragment shader (fragment parameters).
// Texture Sampler for fs_param_Current, using register location 1
float2 fs_param_Current_size;
float2 fs_param_Current_dxdy;

Texture fs_param_Current_Texture;
sampler fs_param_Current : register(s1) = sampler_state
{
    texture   = <fs_param_Current_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// Texture Sampler for fs_param_Random, using register location 2
float2 fs_param_Random_size;
float2 fs_param_Random_dxdy;

Texture fs_param_Random_Texture;
sampler fs_param_Random : register(s2) = sampler_state
{
    texture   = <fs_param_Random_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// The following variables are included because they are referenced but are not function parameters. Their values will be set at call time.

// The following methods are included because they are referenced by the fragment shader.
bool Game__SimShader__Something__data(float4 u)
{
    return u.r > 0 + .0019;
}

bool Game__SimShader__IsStationary__data(float4 d)
{
    return d.r >= 0.01960784 - .0019;
}

float FragSharpFramework__FragSharpStd__fint_floor__Single(float v)
{
    v += 0.0005;
    return floor(255 * v) * 0.003921569;
}

float Game__SimShader__RndFint__Single__Single__Single(float rnd, float f1, float f2)
{
    f2 += 0.003921569;
    f2 -= 0.0006;
    float val = rnd * (f2 - f1) + f1;
    return FragSharpFramework__FragSharpStd__fint_floor__Single(val);
}

// Compiled vertex shader
VertexToPixel StandardVertexShader(float2 inPos : POSITION0, float2 inTexCoords : TEXCOORD0, float4 inColor : COLOR0)
{
    VertexToPixel Output = (VertexToPixel)0;
    Output.Position.w = 1;
    Output.Position.xy = inPos.xy;
    Output.TexCoords = inTexCoords;
    return Output;
}

// Compiled fragment shader
PixelToFrame FragmentShader(VertexToPixel psin)
{
    PixelToFrame __FinalOutput = (PixelToFrame)0;
    float4 here = tex2D(fs_param_Current, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 0)) * fs_param_Current_dxdy), output = float4(0, 0, 0, 0);
    if (Game__SimShader__Something__data(here))
    {
        output = here;
        if (!(Game__SimShader__IsStationary__data(here)))
        {
            output.g = 0.003921569;
        }
        __FinalOutput.Color = output;
        return __FinalOutput;
    }
    float4 right = tex2D(fs_param_Current, psin.TexCoords + (-float2(0.25,0.25) + float2(1, 0)) * fs_param_Current_dxdy), up = tex2D(fs_param_Current, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 1)) * fs_param_Current_dxdy), left = tex2D(fs_param_Current, psin.TexCoords + (-float2(0.25,0.25) + float2(-(1), 0)) * fs_param_Current_dxdy), down = tex2D(fs_param_Current, psin.TexCoords + (-float2(0.25,0.25) + float2(0, -(1))) * fs_param_Current_dxdy);
    float rnd = Game__SimShader__RndFint__Single__Single__Single(tex2D(fs_param_Random, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 0)) * fs_param_Random_dxdy).x, 0.0, 0.01176471);
    if (abs(rnd - 0.0) < .0019)
    {
        if (abs(right.a - 0.0) > .0019 && abs(right.a - 0.01176471) > .0019 && abs(right.r - 0.01176471) < .0019)
        {
            output = right;
        }
        if (abs(up.a - 0.0) > .0019 && abs(up.a - 0.01176471) > .0019 && abs(up.r - 0.01568628) < .0019)
        {
            output = up;
        }
        if (abs(left.a - 0.0) > .0019 && abs(left.a - 0.01176471) > .0019 && abs(left.r - 0.003921569) < .0019)
        {
            output = left;
        }
        if (abs(down.a - 0.0) > .0019 && abs(down.a - 0.01176471) > .0019 && abs(down.r - 0.007843138) < .0019)
        {
            output = down;
        }
    }
    else
    {
        if (abs(rnd - 0.003921569) < .0019)
        {
            if (abs(down.a - 0.0) > .0019 && abs(down.a - 0.01176471) > .0019 && abs(down.r - 0.007843138) < .0019)
            {
                output = down;
            }
            if (abs(right.a - 0.0) > .0019 && abs(right.a - 0.01176471) > .0019 && abs(right.r - 0.01176471) < .0019)
            {
                output = right;
            }
            if (abs(up.a - 0.0) > .0019 && abs(up.a - 0.01176471) > .0019 && abs(up.r - 0.01568628) < .0019)
            {
                output = up;
            }
            if (abs(left.a - 0.0) > .0019 && abs(left.a - 0.01176471) > .0019 && abs(left.r - 0.003921569) < .0019)
            {
                output = left;
            }
        }
        else
        {
            if (abs(rnd - 0.007843138) < .0019)
            {
                if (abs(left.a - 0.0) > .0019 && abs(left.a - 0.01176471) > .0019 && abs(left.r - 0.003921569) < .0019)
                {
                    output = left;
                }
                if (abs(down.a - 0.0) > .0019 && abs(down.a - 0.01176471) > .0019 && abs(down.r - 0.007843138) < .0019)
                {
                    output = down;
                }
                if (abs(right.a - 0.0) > .0019 && abs(right.a - 0.01176471) > .0019 && abs(right.r - 0.01176471) < .0019)
                {
                    output = right;
                }
                if (abs(up.a - 0.0) > .0019 && abs(up.a - 0.01176471) > .0019 && abs(up.r - 0.01568628) < .0019)
                {
                    output = up;
                }
            }
            else
            {
                if (abs(rnd - 0.01176471) < .0019)
                {
                    if (abs(up.a - 0.0) > .0019 && abs(up.a - 0.01176471) > .0019 && abs(up.r - 0.01568628) < .0019)
                    {
                        output = up;
                    }
                    if (abs(left.a - 0.0) > .0019 && abs(left.a - 0.01176471) > .0019 && abs(left.r - 0.003921569) < .0019)
                    {
                        output = left;
                    }
                    if (abs(down.a - 0.0) > .0019 && abs(down.a - 0.01176471) > .0019 && abs(down.r - 0.007843138) < .0019)
                    {
                        output = down;
                    }
                    if (abs(right.a - 0.0) > .0019 && abs(right.a - 0.01176471) > .0019 && abs(right.r - 0.01176471) < .0019)
                    {
                        output = right;
                    }
                }
            }
        }
    }
    if (Game__SimShader__Something__data(output))
    {
        output.g = 0.0;
        __FinalOutput.Color = output;
        return __FinalOutput;
    }
    else
    {
        output = here;
        output.g = 0.003921569;
        __FinalOutput.Color = output;
        return __FinalOutput;
    }
}

// Shader compilation
technique Simplest
{
    pass Pass0
    {
        VertexShader = compile VERTEX_SHADER StandardVertexShader();
        PixelShader = compile PIXEL_SHADER FragmentShader();
    }
}