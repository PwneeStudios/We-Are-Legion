// This file was auto-generated by FragSharp. It will be regenerated on the next compilation.
// Manual changes made will not persist and may cause incorrect behavior between compilations.

#define PIXEL_SHADER ps_3_0
#define VERTEX_SHADER vs_3_0

// Vertex shader data structure definition
struct VertexToPixel
{
    float4 Position   : POSITION0;
    float4 Color      : COLOR0;
    float2 TexCoords  : TEXCOORD0;
    float2 Position2D : TEXCOORD2;
};

// Fragment shader data structure definition
struct PixelToFrame
{
    float4 Color      : COLOR0;
};

// The following are variables used by the vertex shader (vertex parameters).

// The following are variables used by the fragment shader (fragment parameters).
// Texture Sampler for fs_param_Geo, using register location 1
float2 fs_param_Geo_size;
float2 fs_param_Geo_dxdy;

Texture fs_param_Geo_Texture;
sampler fs_param_Geo : register(s1) = sampler_state
{
    texture   = <fs_param_Geo_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// Texture Sampler for fs_param_OuterGeo, using register location 2
float2 fs_param_OuterGeo_size;
float2 fs_param_OuterGeo_dxdy;

Texture fs_param_OuterGeo_Texture;
sampler fs_param_OuterGeo : register(s2) = sampler_state
{
    texture   = <fs_param_OuterGeo_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// The following variables are included because they are referenced but are not function parameters. Their values will be set at call time.

// The following methods are included because they are referenced by the fragment shader.
bool Game__SimShader__IsValid__Single(float direction)
{
    return direction > 0 + .0019;
}

void Game__Geodesic_Flatten__InheritsFrom__geo__geo(inout float4 outer_geo, float4 inner_geo)
{
    outer_geo.g = inner_geo.g + 0.003921569;
    outer_geo.ba = inner_geo.ba;
}

// Compiled vertex shader
VertexToPixel StandardVertexShader(float2 inPos : POSITION0, float2 inTexCoords : TEXCOORD0, float4 inColor : COLOR0)
{
    VertexToPixel Output = (VertexToPixel)0;
    Output.Position.w = 1;
    Output.Position.xy = inPos.xy;
    Output.TexCoords = inTexCoords;
    return Output;
}

// Compiled fragment shader
PixelToFrame FragmentShader(VertexToPixel psin)
{
    PixelToFrame __FinalOutput = (PixelToFrame)0;
    float4 geo_here = tex2D(fs_param_Geo, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 0)) * fs_param_Geo_dxdy), geo_right = tex2D(fs_param_Geo, psin.TexCoords + (-float2(0.25,0.25) + float2(1, 0)) * fs_param_Geo_dxdy), geo_up = tex2D(fs_param_Geo, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 1)) * fs_param_Geo_dxdy), geo_left = tex2D(fs_param_Geo, psin.TexCoords + (-float2(0.25,0.25) + float2(-(1), 0)) * fs_param_Geo_dxdy), geo_down = tex2D(fs_param_Geo, psin.TexCoords + (-float2(0.25,0.25) + float2(0, -(1))) * fs_param_Geo_dxdy), geo_up_right = tex2D(fs_param_Geo, psin.TexCoords + (-float2(0.25,0.25) + float2(1, 1)) * fs_param_Geo_dxdy), geo_up_left = tex2D(fs_param_Geo, psin.TexCoords + (-float2(0.25,0.25) + float2(-(1), 1)) * fs_param_Geo_dxdy), geo_down_right = tex2D(fs_param_Geo, psin.TexCoords + (-float2(0.25,0.25) + float2(1, -(1))) * fs_param_Geo_dxdy), geo_down_left = tex2D(fs_param_Geo, psin.TexCoords + (-float2(0.25,0.25) + float2(-(1), -(1))) * fs_param_Geo_dxdy);
    float4 outer_geo_here = tex2D(fs_param_OuterGeo, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 0)) * fs_param_OuterGeo_dxdy);
    if (Game__SimShader__IsValid__Single(geo_here.r))
    {
        __FinalOutput.Color = geo_here;
        return __FinalOutput;
    }
    outer_geo_here.g = 1.0;
    if (outer_geo_here.g > geo_right.g + .0019 && Game__SimShader__IsValid__Single(geo_right.r))
    {
        Game__Geodesic_Flatten__InheritsFrom__geo__geo(outer_geo_here, geo_right);
    }
    else
    {
        if (outer_geo_here.g > geo_up.g + .0019 && Game__SimShader__IsValid__Single(geo_up.r))
        {
            Game__Geodesic_Flatten__InheritsFrom__geo__geo(outer_geo_here, geo_up);
        }
        else
        {
            if (outer_geo_here.g > geo_left.g + .0019 && Game__SimShader__IsValid__Single(geo_left.r))
            {
                Game__Geodesic_Flatten__InheritsFrom__geo__geo(outer_geo_here, geo_left);
            }
            else
            {
                if (outer_geo_here.g > geo_down.g + .0019 && Game__SimShader__IsValid__Single(geo_down.r))
                {
                    Game__Geodesic_Flatten__InheritsFrom__geo__geo(outer_geo_here, geo_down);
                }
                else
                {
                    if (outer_geo_here.g > geo_up_right.g + .0019 && Game__SimShader__IsValid__Single(geo_up_right.r))
                    {
                        Game__Geodesic_Flatten__InheritsFrom__geo__geo(outer_geo_here, geo_up_right);
                    }
                    else
                    {
                        if (outer_geo_here.g > geo_up_left.g + .0019 && Game__SimShader__IsValid__Single(geo_up_left.r))
                        {
                            Game__Geodesic_Flatten__InheritsFrom__geo__geo(outer_geo_here, geo_up_left);
                        }
                        else
                        {
                            if (outer_geo_here.g > geo_down_right.g + .0019 && Game__SimShader__IsValid__Single(geo_down_right.r))
                            {
                                Game__Geodesic_Flatten__InheritsFrom__geo__geo(outer_geo_here, geo_down_right);
                            }
                            else
                            {
                                if (outer_geo_here.g > geo_down_left.g + .0019 && Game__SimShader__IsValid__Single(geo_down_left.r))
                                {
                                    Game__Geodesic_Flatten__InheritsFrom__geo__geo(outer_geo_here, geo_down_left);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    __FinalOutput.Color = outer_geo_here;
    return __FinalOutput;
}

// Shader compilation
technique Simplest
{
    pass Pass0
    {
        VertexShader = compile VERTEX_SHADER StandardVertexShader();
        PixelShader = compile PIXEL_SHADER FragmentShader();
    }
}