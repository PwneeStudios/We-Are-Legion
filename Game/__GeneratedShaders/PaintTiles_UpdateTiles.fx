// This file was auto-generated by FragSharp. It will be regenerated on the next compilation.
// Manual changes made will not persist and may cause incorrect behavior between compilations.

#define PIXEL_SHADER ps_3_0
#define VERTEX_SHADER vs_3_0

// Vertex shader data structure definition
struct VertexToPixel
{
    float4 Position   : POSITION0;
    float4 Color      : COLOR0;
    float2 TexCoords  : TEXCOORD0;
    float2 Position2D : TEXCOORD2;
};

// Fragment shader data structure definition
struct PixelToFrame
{
    float4 Color      : COLOR0;
};

// The following are variables used by the vertex shader (vertex parameters).

// The following are variables used by the fragment shader (fragment parameters).
// Texture Sampler for fs_param_Tiles, using register location 1
float2 fs_param_Tiles_size;
float2 fs_param_Tiles_dxdy;

Texture fs_param_Tiles_Texture;
sampler fs_param_Tiles : register(s1) = sampler_state
{
    texture   = <fs_param_Tiles_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// Texture Sampler for fs_param_Select, using register location 2
float2 fs_param_Select_size;
float2 fs_param_Select_dxdy;

Texture fs_param_Select_Texture;
sampler fs_param_Select : register(s2) = sampler_state
{
    texture   = <fs_param_Select_Texture>;
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
    AddressU  = Clamp;
    AddressV  = Clamp;
};

// The following variables are included because they are referenced but are not function parameters. Their values will be set at call time.

// The following methods are included because they are referenced by the fragment shader.
void Game__PaintTiles_UpdateTiles__DirtGrassInterface__tile__tile__tile__tile__tile__tile__tile__tile__tile(inout float4 here, inout float4 right, inout float4 up, inout float4 left, inout float4 down, inout float4 up_right, inout float4 up_left, inout float4 down_right, inout float4 down_left)
{
    bool grass_on_left = abs(left.r - 0.003921569) < .0019 || abs(up_left.r - 0.003921569) < .0019 || abs(down_left.r - 0.003921569) < .0019;
    bool grass_on_right = abs(right.r - 0.003921569) < .0019 || abs(up_right.r - 0.003921569) < .0019 || abs(down_right.r - 0.003921569) < .0019;
    bool grass_on_top = abs(up_left.r - 0.003921569) < .0019 || abs(up.r - 0.003921569) < .0019 || abs(up_right.r - 0.003921569) < .0019;
    bool grass_on_bottom = abs(down_left.r - 0.003921569) < .0019 || abs(down.r - 0.003921569) < .0019 || abs(down_right.r - 0.003921569) < .0019;
    if (abs(left.r - 0.003921569) < .0019 && abs(right.r - 0.003921569) < .0019 || abs(up.r - 0.003921569) < .0019 && abs(down.r - 0.003921569) < .0019 || abs(up.r - 0.01960784) < .0019 || abs(right.r - 0.01960784) < .0019 || abs(down.r - 0.01960784) < .0019 || abs(left.r - 0.01960784) < .0019)
    {
        here.r = 0.003921569;
        here.g = 0.0;
        here.b = 0.1215686;
    }
    else
    {
        if (abs(left.r - 0.003921569) < .0019 && abs(up.r - 0.003921569) < .0019)
        {
            here.r = 0.007843138;
            here.g = 0.007843138;
            here.b = 0.1019608;
        }
        else
        {
            if (abs(up.r - 0.003921569) < .0019 && abs(right.r - 0.003921569) < .0019)
            {
                here.r = 0.007843138;
                here.g = 0.0;
                here.b = 0.1019608;
            }
            else
            {
                if (abs(right.r - 0.003921569) < .0019 && abs(down.r - 0.003921569) < .0019)
                {
                    here.r = 0.007843138;
                    here.g = 0.01568628;
                    here.b = 0.1019608;
                }
                else
                {
                    if (abs(down.r - 0.003921569) < .0019 && abs(left.r - 0.003921569) < .0019)
                    {
                        here.r = 0.007843138;
                        here.g = 0.02352941;
                        here.b = 0.1019608;
                    }
                    else
                    {
                        if (grass_on_left && abs(right.r - 0.003921569) < .0019 || grass_on_right && abs(left.r - 0.003921569) < .0019 || grass_on_top && abs(down.r - 0.003921569) < .0019 || grass_on_bottom && abs(up.r - 0.003921569) < .0019)
                        {
                            here.r = 0.003921569;
                            here.g = 0.0;
                            here.b = 0.1215686;
                        }
                        else
                        {
                            if (abs(right.r - 0.003921569) < .0019)
                            {
                                here.r = 0.007843138;
                                here.g = 0.0;
                                here.b = 0.1098039;
                            }
                            else
                            {
                                if (abs(up.r - 0.003921569) < .0019)
                                {
                                    here.r = 0.007843138;
                                    here.g = 0.01176471;
                                    here.b = 0.1098039;
                                }
                                else
                                {
                                    if (abs(left.r - 0.003921569) < .0019)
                                    {
                                        here.r = 0.007843138;
                                        here.g = 0.02352941;
                                        here.b = 0.1098039;
                                    }
                                    else
                                    {
                                        if (abs(down.r - 0.003921569) < .0019)
                                        {
                                            here.r = 0.007843138;
                                            here.g = 0.03529412;
                                            here.b = 0.1098039;
                                        }
                                        else
                                        {
                                            if (abs(down_left.r - 0.003921569) < .0019)
                                            {
                                                here.r = 0.007843138;
                                                here.g = 0.0;
                                                here.b = 0.1058824;
                                            }
                                            else
                                            {
                                                if (abs(down_right.r - 0.003921569) < .0019)
                                                {
                                                    here.r = 0.007843138;
                                                    here.g = 0.007843138;
                                                    here.b = 0.1058824;
                                                }
                                                else
                                                {
                                                    if (abs(up_left.r - 0.003921569) < .0019)
                                                    {
                                                        here.r = 0.007843138;
                                                        here.g = 0.01568628;
                                                        here.b = 0.1058824;
                                                    }
                                                    else
                                                    {
                                                        if (abs(up_right.r - 0.003921569) < .0019)
                                                        {
                                                            here.r = 0.007843138;
                                                            here.g = 0.02352941;
                                                            here.b = 0.1058824;
                                                        }
                                                        else
                                                        {
                                                            if (abs(here.b - 0.1176471) > .0019)
                                                            {
                                                                here.g = 0.0;
                                                                here.b = 0.1176471;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

void Game__PaintTiles_UpdateTiles__GrassTreeInterface__tile__tile__tile__tile__tile__tile__tile__tile__tile(inout float4 here, inout float4 right, inout float4 up, inout float4 left, inout float4 down, inout float4 up_right, inout float4 up_left, inout float4 down_right, inout float4 down_left)
{
    if (abs(here.r - 0.01960784) < .0019)
    {
        if (abs(left.r - 0.01960784) < .0019 && abs(right.r - 0.01960784) < .0019 || abs(up_left.r - 0.01960784) < .0019 && abs(up_right.r - 0.01960784) < .0019)
        {
            if (abs(up_left.r - 0.01960784) < .0019 && abs(up.r - 0.01960784) < .0019 && abs(up_right.r - 0.01960784) < .0019)
            {
                here.r = 0.01960784;
                here.g = 0.0;
                here.b = 0.09803922;
            }
            else
            {
                if (abs(up_left.r - 0.01960784) > .0019 && abs(up.r - 0.01960784) < .0019 && abs(up_right.r - 0.01960784) < .0019)
                {
                    here.r = 0.01960784;
                    here.g = 0.0;
                    here.b = 0.08627451;
                }
                else
                {
                    if (abs(up_left.r - 0.01960784) < .0019 && abs(up.r - 0.01960784) < .0019 && abs(up_right.r - 0.01960784) > .0019)
                    {
                        here.r = 0.01960784;
                        here.g = 0.01176471;
                        here.b = 0.08627451;
                    }
                    else
                    {
                        if (abs(up_left.r - 0.01960784) > .0019 && abs(up.r - 0.01960784) < .0019 && abs(up_right.r - 0.01960784) > .0019)
                        {
                            here.r = 0.01960784;
                            here.g = 0.02352941;
                            here.b = 0.08627451;
                        }
                        else
                        {
                            here.r = 0.01960784;
                            here.g = 0.0;
                            here.b = 0.09411765;
                        }
                    }
                }
            }
        }
        else
        {
            if (abs(right.r - 0.01960784) < .0019 && abs(up.r - 0.01960784) > .0019)
            {
                here.r = 0.01960784;
                here.g = 0.0;
                here.b = 0.08235294;
            }
            else
            {
                if (abs(left.r - 0.01960784) < .0019 && abs(up.r - 0.01960784) > .0019)
                {
                    here.r = 0.01960784;
                    here.g = 0.007843138;
                    here.b = 0.08235294;
                }
                else
                {
                    if ((abs(right.r - 0.01960784) < .0019 || abs(up_right.r - 0.01960784) < .0019) && abs(up.r - 0.01960784) < .0019)
                    {
                        here.r = 0.01960784;
                        here.g = 0.0;
                        here.b = 0.07843138;
                    }
                    else
                    {
                        if ((abs(left.r - 0.01960784) < .0019 || abs(up_left.r - 0.01960784) < .0019) && abs(up.r - 0.01960784) < .0019)
                        {
                            here.r = 0.01960784;
                            here.g = 0.007843138;
                            here.b = 0.07843138;
                        }
                        else
                        {
                            if (abs(up.r - 0.01960784) > .0019)
                            {
                                here.r = 0.01960784;
                                here.g = 0.0;
                                here.b = 0.07450981;
                            }
                            else
                            {
                                if (abs(up.r - 0.01960784) < .0019)
                                {
                                    here.r = 0.01960784;
                                    here.g = 0.003921569;
                                    here.b = 0.07450981;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else
    {
        if (abs(here.r - 0.003921569) < .0019)
        {
            if (abs(up_left.r - 0.01960784) < .0019 && abs(up.r - 0.01960784) < .0019 && abs(up_right.r - 0.01960784) < .0019)
            {
                here.r = 0.003921569;
                here.g = 0.0;
                here.b = 0.09019608;
            }
            else
            {
                if (abs(up_left.r - 0.01960784) > .0019 && abs(up.r - 0.01960784) < .0019 && abs(up_right.r - 0.01960784) < .0019)
                {
                    here.r = 0.003921569;
                    here.g = 0.01568628;
                    here.b = 0.08235294;
                }
                else
                {
                    if (abs(up_left.r - 0.01960784) < .0019 && abs(up.r - 0.01960784) < .0019 && abs(up_right.r - 0.01960784) > .0019)
                    {
                        here.r = 0.003921569;
                        here.g = 0.02352941;
                        here.b = 0.08235294;
                    }
                    else
                    {
                        if (abs(up_left.r - 0.01960784) > .0019 && abs(up.r - 0.01960784) < .0019 && abs(up_right.r - 0.01960784) > .0019)
                        {
                            here.r = 0.003921569;
                            here.g = 0.0;
                            here.b = 0.07058824;
                        }
                        else
                        {
                            if (abs(here.b - 0.1215686) > .0019)
                            {
                                here.g = 0.0;
                                here.b = 0.1215686;
                            }
                        }
                    }
                }
            }
        }
    }
}

// Compiled vertex shader
VertexToPixel StandardVertexShader(float2 inPos : POSITION0, float2 inTexCoords : TEXCOORD0, float4 inColor : COLOR0)
{
    VertexToPixel Output = (VertexToPixel)0;
    Output.Position.w = 1;
    Output.Position.xy = inPos.xy;
    Output.TexCoords = inTexCoords;
    return Output;
}

// Compiled fragment shader
PixelToFrame FragmentShader(VertexToPixel psin)
{
    PixelToFrame __FinalOutput = (PixelToFrame)0;
    float4 here = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 0)) * fs_param_Tiles_dxdy);
    float4 select = tex2D(fs_param_Select, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 0)) * fs_param_Select_dxdy);
    float4 right = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(1, 0)) * fs_param_Tiles_dxdy), up = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(0, 1)) * fs_param_Tiles_dxdy), left = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(-(1), 0)) * fs_param_Tiles_dxdy), down = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(0, -(1))) * fs_param_Tiles_dxdy), up_right = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(1, 1)) * fs_param_Tiles_dxdy), up_left = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(-(1), 1)) * fs_param_Tiles_dxdy), down_right = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(1, -(1))) * fs_param_Tiles_dxdy), down_left = tex2D(fs_param_Tiles, psin.TexCoords + (-float2(0.25,0.25) + float2(-(1), -(1))) * fs_param_Tiles_dxdy);
    if (abs(here.r - 0.007843138) < .0019)
    {
        Game__PaintTiles_UpdateTiles__DirtGrassInterface__tile__tile__tile__tile__tile__tile__tile__tile__tile(here, right, up, left, down, up_right, up_left, down_right, down_left);
    }
    else
    {
        if (abs(here.r - 0.003921569) < .0019 || abs(here.r - 0.01960784) < .0019)
        {
            Game__PaintTiles_UpdateTiles__GrassTreeInterface__tile__tile__tile__tile__tile__tile__tile__tile__tile(here, right, up, left, down, up_right, up_left, down_right, down_left);
        }
    }
    __FinalOutput.Color = here;
    return __FinalOutput;
}

// Shader compilation
technique Simplest
{
    pass Pass0
    {
        VertexShader = compile VERTEX_SHADER StandardVertexShader();
        PixelShader = compile PIXEL_SHADER FragmentShader();
    }
}